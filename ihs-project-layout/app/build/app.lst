
app/build/release/app:     formato de ficheiro elf64-x86-64

Secções:
Idx Name          Tam.      VMA               LMA               File off  Algn
  0 .interp       0000001c  0000000000400318  0000000000400318  00000318  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.gnu.property 00000040  0000000000400338  0000000000400338  00000338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  0000000000400378  0000000000400378  00000378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .note.ABI-tag 00000020  000000000040039c  000000000040039c  0000039c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .gnu.hash     0000005c  00000000004003c0  00000000004003c0  000003c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynsym       000008a0  0000000000400420  0000000000400420  00000420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .dynstr       00000b0c  0000000000400cc0  0000000000400cc0  00000cc0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version  000000b8  00000000004017cc  00000000004017cc  000017cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .gnu.version_r 000000e0  0000000000401888  0000000000401888  00001888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rela.dyn     00000120  0000000000401968  0000000000401968  00001968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .rela.plt     00000768  0000000000401a88  0000000000401a88  00001a88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .init         0000001b  0000000000403000  0000000000403000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .plt          00000500  0000000000403020  0000000000403020  00003020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text         00004df2  0000000000403520  0000000000403520  00003520  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .fini         0000000d  0000000000408314  0000000000408314  00008314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .rodata       00000560  0000000000409000  0000000000409000  00009000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .eh_frame_hdr 000000c4  0000000000409560  0000000000409560  00009560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .eh_frame     000003cc  0000000000409628  0000000000409628  00009628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .gcc_except_table 0000035d  00000000004099f4  00000000004099f4  000099f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .init_array   00000010  000000000040bcc8  000000000040bcc8  0000acc8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 20 .fini_array   00000008  000000000040bcd8  000000000040bcd8  0000acd8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 21 .data.rel.ro  000000d0  000000000040bce0  000000000040bce0  0000ace0  2**4
                  CONTENTS, ALLOC, LOAD, DATA
 22 .dynamic      00000240  000000000040bdb0  000000000040bdb0  0000adb0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 23 .got          00000010  000000000040bff0  000000000040bff0  0000aff0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 24 .got.plt      00000290  000000000040c000  000000000040c000  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 25 .data         00000004  000000000040c290  000000000040c290  0000b290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 26 .bss          000001f0  000000000040c2c0  000000000040c2c0  0000b294  2**6
                  ALLOC
 27 .comment      0000002e  0000000000000000  0000000000000000  0000b294  2**0
                  CONTENTS, READONLY
 28 .gnu.build.attributes 00001cd4  000000000040e4b0  000000000040e4b0  0000b2c4  2**2
                  CONTENTS, READONLY, OCTETS
 29 .debug_aranges 00000090  0000000000000000  0000000000000000  0000cf98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_info   0003bc3a  0000000000000000  0000000000000000  0000d028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_abbrev 00001342  0000000000000000  0000000000000000  00048c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 32 .debug_line   00006860  0000000000000000  0000000000000000  00049fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 33 .debug_str    00033fe7  0000000000000000  0000000000000000  00050804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 34 .debug_line_str 000007a8  0000000000000000  0000000000000000  000847eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 35 .debug_loclists 00010b91  0000000000000000  0000000000000000  00084f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 36 .debug_rnglists 00002e8d  0000000000000000  0000000000000000  00095b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Desmontagem da secção .init:

0000000000403000 <_init>:
  403000:	f3 0f 1e fa          	endbr64 
  403004:	48 83 ec 08          	sub    $0x8,%rsp
  403008:	48 8b 05 e9 8f 00 00 	mov    0x8fe9(%rip),%rax        # 40bff8 <__gmon_start__@Base>
  40300f:	48 85 c0             	test   %rax,%rax
  403012:	74 02                	je     403016 <_init+0x16>
  403014:	ff d0                	call   *%rax
  403016:	48 83 c4 08          	add    $0x8,%rsp
  40301a:	c3                   	ret    

Desmontagem da secção .plt:

0000000000403020 <_ZNSo3putEc@plt-0x10>:
  403020:	ff 35 e2 8f 00 00    	push   0x8fe2(%rip)        # 40c008 <_GLOBAL_OFFSET_TABLE_+0x8>
  403026:	ff 25 e4 8f 00 00    	jmp    *0x8fe4(%rip)        # 40c010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40302c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000403030 <_ZNSo3putEc@plt>:
  403030:	ff 25 e2 8f 00 00    	jmp    *0x8fe2(%rip)        # 40c018 <_ZNSo3putEc@GLIBCXX_3.4>
  403036:	68 00 00 00 00       	push   $0x0
  40303b:	e9 e0 ff ff ff       	jmp    403020 <_init+0x20>

0000000000403040 <printf@plt>:
  403040:	ff 25 da 8f 00 00    	jmp    *0x8fda(%rip)        # 40c020 <printf@GLIBC_2.2.5>
  403046:	68 01 00 00 00       	push   $0x1
  40304b:	e9 d0 ff ff ff       	jmp    403020 <_init+0x20>

0000000000403050 <_ZN2sf4TimeC1Ev@plt>:
  403050:	ff 25 d2 8f 00 00    	jmp    *0x8fd2(%rip)        # 40c028 <_ZN2sf4TimeC1Ev@Base>
  403056:	68 02 00 00 00       	push   $0x2
  40305b:	e9 c0 ff ff ff       	jmp    403020 <_init+0x20>

0000000000403060 <_ZN2sf5ShapeD2Ev@plt>:
  403060:	ff 25 ca 8f 00 00    	jmp    *0x8fca(%rip)        # 40c030 <_ZN2sf5ShapeD2Ev@Base>
  403066:	68 03 00 00 00       	push   $0x3
  40306b:	e9 b0 ff ff ff       	jmp    403020 <_init+0x20>

0000000000403070 <_ZN2sf5MusicC1Ev@plt>:
  403070:	ff 25 c2 8f 00 00    	jmp    *0x8fc2(%rip)        # 40c038 <_ZN2sf5MusicC1Ev@Base>
  403076:	68 04 00 00 00       	push   $0x4
  40307b:	e9 a0 ff ff ff       	jmp    403020 <_init+0x20>

0000000000403080 <sprintf@plt>:
  403080:	ff 25 ba 8f 00 00    	jmp    *0x8fba(%rip)        # 40c040 <sprintf@GLIBC_2.2.5>
  403086:	68 05 00 00 00       	push   $0x5
  40308b:	e9 90 ff ff ff       	jmp    403020 <_init+0x20>

0000000000403090 <_ZN2sf5Music12openFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
  403090:	ff 25 b2 8f 00 00    	jmp    *0x8fb2(%rip)        # 40c048 <_ZN2sf5Music12openFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@Base>
  403096:	68 06 00 00 00       	push   $0x6
  40309b:	e9 80 ff ff ff       	jmp    403020 <_init+0x20>

00000000004030a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>:
  4030a0:	ff 25 aa 8f 00 00    	jmp    *0x8faa(%rip)        # 40c050 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@GLIBCXX_3.4.21>
  4030a6:	68 07 00 00 00       	push   $0x7
  4030ab:	e9 70 ff ff ff       	jmp    403020 <_init+0x20>

00000000004030b0 <_ZN2sf6StringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6locale@plt>:
  4030b0:	ff 25 a2 8f 00 00    	jmp    *0x8fa2(%rip)        # 40c058 <_ZN2sf6StringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6locale@Base>
  4030b6:	68 08 00 00 00       	push   $0x8
  4030bb:	e9 60 ff ff ff       	jmp    403020 <_init+0x20>

00000000004030c0 <_ZN2sf4FontC1Ev@plt>:
  4030c0:	ff 25 9a 8f 00 00    	jmp    *0x8f9a(%rip)        # 40c060 <_ZN2sf4FontC1Ev@Base>
  4030c6:	68 09 00 00 00       	push   $0x9
  4030cb:	e9 50 ff ff ff       	jmp    403020 <_init+0x20>

00000000004030d0 <_ZN2sf6StringC1Ej@plt>:
  4030d0:	ff 25 92 8f 00 00    	jmp    *0x8f92(%rip)        # 40c068 <_ZN2sf6StringC1Ej@Base>
  4030d6:	68 0a 00 00 00       	push   $0xa
  4030db:	e9 40 ff ff ff       	jmp    403020 <_init+0x20>

00000000004030e0 <_ZN2sfplERKNS_6StringES2_@plt>:
  4030e0:	ff 25 8a 8f 00 00    	jmp    *0x8f8a(%rip)        # 40c070 <_ZN2sfplERKNS_6StringES2_@Base>
  4030e6:	68 0b 00 00 00       	push   $0xb
  4030eb:	e9 30 ff ff ff       	jmp    403020 <_init+0x20>

00000000004030f0 <write@plt>:
  4030f0:	ff 25 82 8f 00 00    	jmp    *0x8f82(%rip)        # 40c078 <write@GLIBC_2.2.5>
  4030f6:	68 0c 00 00 00       	push   $0xc
  4030fb:	e9 20 ff ff ff       	jmp    403020 <_init+0x20>

0000000000403100 <_ZN2sf6StringC1EPKcRKSt6locale@plt>:
  403100:	ff 25 7a 8f 00 00    	jmp    *0x8f7a(%rip)        # 40c080 <_ZN2sf6StringC1EPKcRKSt6locale@Base>
  403106:	68 0d 00 00 00       	push   $0xd
  40310b:	e9 10 ff ff ff       	jmp    403020 <_init+0x20>

0000000000403110 <_ZN2sf5ColorC1Ehhhh@plt>:
  403110:	ff 25 72 8f 00 00    	jmp    *0x8f72(%rip)        # 40c088 <_ZN2sf5ColorC1Ehhhh@Base>
  403116:	68 0e 00 00 00       	push   $0xe
  40311b:	e9 00 ff ff ff       	jmp    403020 <_init+0x20>

0000000000403120 <strlen@plt>:
  403120:	ff 25 6a 8f 00 00    	jmp    *0x8f6a(%rip)        # 40c090 <strlen@GLIBC_2.2.5>
  403126:	68 0f 00 00 00       	push   $0xf
  40312b:	e9 f0 fe ff ff       	jmp    403020 <_init+0x20>

0000000000403130 <_ZSt20__throw_length_errorPKc@plt>:
  403130:	ff 25 62 8f 00 00    	jmp    *0x8f62(%rip)        # 40c098 <_ZSt20__throw_length_errorPKc@GLIBCXX_3.4>
  403136:	68 10 00 00 00       	push   $0x10
  40313b:	e9 e0 fe ff ff       	jmp    403020 <_init+0x20>

0000000000403140 <_ZN2sf13TransformableD2Ev@plt>:
  403140:	ff 25 5a 8f 00 00    	jmp    *0x8f5a(%rip)        # 40c0a0 <_ZN2sf13TransformableD2Ev@Base>
  403146:	68 11 00 00 00       	push   $0x11
  40314b:	e9 d0 fe ff ff       	jmp    403020 <_init+0x20>

0000000000403150 <_ZN2sf13Transformable11setPositionEff@plt>:
  403150:	ff 25 52 8f 00 00    	jmp    *0x8f52(%rip)        # 40c0a8 <_ZN2sf13Transformable11setPositionEff@Base>
  403156:	68 12 00 00 00       	push   $0x12
  40315b:	e9 c0 fe ff ff       	jmp    403020 <_init+0x20>

0000000000403160 <_ZSt24__throw_invalid_argumentPKc@plt>:
  403160:	ff 25 4a 8f 00 00    	jmp    *0x8f4a(%rip)        # 40c0b0 <_ZSt24__throw_invalid_argumentPKc@GLIBCXX_3.4>
  403166:	68 13 00 00 00       	push   $0x13
  40316b:	e9 b0 fe ff ff       	jmp    403020 <_init+0x20>

0000000000403170 <_ZN2sf7secondsEf@plt>:
  403170:	ff 25 42 8f 00 00    	jmp    *0x8f42(%rip)        # 40c0b8 <_ZN2sf7secondsEf@Base>
  403176:	68 14 00 00 00       	push   $0x14
  40317b:	e9 a0 fe ff ff       	jmp    403020 <_init+0x20>

0000000000403180 <_ZNSo5flushEv@plt>:
  403180:	ff 25 3a 8f 00 00    	jmp    *0x8f3a(%rip)        # 40c0c0 <_ZNSo5flushEv@GLIBCXX_3.4>
  403186:	68 15 00 00 00       	push   $0x15
  40318b:	e9 90 fe ff ff       	jmp    403020 <_init+0x20>

0000000000403190 <_ZSt19__throw_logic_errorPKc@plt>:
  403190:	ff 25 32 8f 00 00    	jmp    *0x8f32(%rip)        # 40c0c8 <_ZSt19__throw_logic_errorPKc@GLIBCXX_3.4>
  403196:	68 16 00 00 00       	push   $0x16
  40319b:	e9 80 fe ff ff       	jmp    403020 <_init+0x20>

00000000004031a0 <_ZN2sf12RenderTarget5clearERKNS_5ColorE@plt>:
  4031a0:	ff 25 2a 8f 00 00    	jmp    *0x8f2a(%rip)        # 40c0d0 <_ZN2sf12RenderTarget5clearERKNS_5ColorE@Base>
  4031a6:	68 17 00 00 00       	push   $0x17
  4031ab:	e9 70 fe ff ff       	jmp    403020 <_init+0x20>

00000000004031b0 <open@plt>:
  4031b0:	ff 25 22 8f 00 00    	jmp    *0x8f22(%rip)        # 40c0d8 <open@GLIBC_2.2.5>
  4031b6:	68 18 00 00 00       	push   $0x18
  4031bb:	e9 60 fe ff ff       	jmp    403020 <_init+0x20>

00000000004031c0 <_ZN2sf9VideoModeC1Ejjj@plt>:
  4031c0:	ff 25 1a 8f 00 00    	jmp    *0x8f1a(%rip)        # 40c0e0 <_ZN2sf9VideoModeC1Ejjj@Base>
  4031c6:	68 19 00 00 00       	push   $0x19
  4031cb:	e9 50 fe ff ff       	jmp    403020 <_init+0x20>

00000000004031d0 <_ZN2sf6String6insertEmRKS0_@plt>:
  4031d0:	ff 25 12 8f 00 00    	jmp    *0x8f12(%rip)        # 40c0e8 <_ZN2sf6String6insertEmRKS0_@Base>
  4031d6:	68 1a 00 00 00       	push   $0x1a
  4031db:	e9 40 fe ff ff       	jmp    403020 <_init+0x20>

00000000004031e0 <_ZN2sf11CircleShapeC1Efm@plt>:
  4031e0:	ff 25 0a 8f 00 00    	jmp    *0x8f0a(%rip)        # 40c0f0 <_ZN2sf11CircleShapeC1Efm@Base>
  4031e6:	68 1b 00 00 00       	push   $0x1b
  4031eb:	e9 30 fe ff ff       	jmp    403020 <_init+0x20>

00000000004031f0 <memcpy@plt>:
  4031f0:	ff 25 02 8f 00 00    	jmp    *0x8f02(%rip)        # 40c0f8 <memcpy@GLIBC_2.14>
  4031f6:	68 1c 00 00 00       	push   $0x1c
  4031fb:	e9 20 fe ff ff       	jmp    403020 <_init+0x20>

0000000000403200 <_ZN2sf6Window9pollEventERNS_5EventE@plt>:
  403200:	ff 25 fa 8e 00 00    	jmp    *0x8efa(%rip)        # 40c100 <_ZN2sf6Window9pollEventERNS_5EventE@Base>
  403206:	68 1d 00 00 00       	push   $0x1d
  40320b:	e9 10 fe ff ff       	jmp    403020 <_init+0x20>

0000000000403210 <_ZN2sf4TextC1ERKNS_6StringERKNS_4FontEj@plt>:
  403210:	ff 25 f2 8e 00 00    	jmp    *0x8ef2(%rip)        # 40c108 <_ZN2sf4TextC1ERKNS_6StringERKNS_4FontEj@Base>
  403216:	68 1e 00 00 00       	push   $0x1e
  40321b:	e9 00 fe ff ff       	jmp    403020 <_init+0x20>

0000000000403220 <__cxa_atexit@plt>:
  403220:	ff 25 ea 8e 00 00    	jmp    *0x8eea(%rip)        # 40c110 <__cxa_atexit@GLIBC_2.2.5>
  403226:	68 1f 00 00 00       	push   $0x1f
  40322b:	e9 f0 fd ff ff       	jmp    403020 <_init+0x20>

0000000000403230 <_ZN2sf4Font12loadFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
  403230:	ff 25 e2 8e 00 00    	jmp    *0x8ee2(%rip)        # 40c118 <_ZN2sf4Font12loadFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@Base>
  403236:	68 20 00 00 00       	push   $0x20
  40323b:	e9 e0 fd ff ff       	jmp    403020 <_init+0x20>

0000000000403240 <_ZdlPvm@plt>:
  403240:	ff 25 da 8e 00 00    	jmp    *0x8eda(%rip)        # 40c120 <_ZdlPvm@CXXABI_1.3.9>
  403246:	68 21 00 00 00       	push   $0x21
  40324b:	e9 d0 fd ff ff       	jmp    403020 <_init+0x20>

0000000000403250 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@plt>:
  403250:	ff 25 d2 8e 00 00    	jmp    *0x8ed2(%rip)        # 40c128 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@GLIBCXX_3.4.21>
  403256:	68 22 00 00 00       	push   $0x22
  40325b:	e9 c0 fd ff ff       	jmp    403020 <_init+0x20>

0000000000403260 <_ZNK2sf6Window6isOpenEv@plt>:
  403260:	ff 25 ca 8e 00 00    	jmp    *0x8eca(%rip)        # 40c130 <_ZNK2sf6Window6isOpenEv@Base>
  403266:	68 23 00 00 00       	push   $0x23
  40326b:	e9 b0 fd ff ff       	jmp    403020 <_init+0x20>

0000000000403270 <_ZN2sf4TextC1Ev@plt>:
  403270:	ff 25 c2 8e 00 00    	jmp    *0x8ec2(%rip)        # 40c138 <_ZN2sf4TextC1Ev@Base>
  403276:	68 24 00 00 00       	push   $0x24
  40327b:	e9 a0 fd ff ff       	jmp    403020 <_init+0x20>

0000000000403280 <_ZN2sf4FontD1Ev@plt>:
  403280:	ff 25 ba 8e 00 00    	jmp    *0x8eba(%rip)        # 40c140 <_ZN2sf4FontD1Ev@Base>
  403286:	68 25 00 00 00       	push   $0x25
  40328b:	e9 90 fd ff ff       	jmp    403020 <_init+0x20>

0000000000403290 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>:
  403290:	ff 25 b2 8e 00 00    	jmp    *0x8eb2(%rip)        # 40c148 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@GLIBCXX_3.4.9>
  403296:	68 26 00 00 00       	push   $0x26
  40329b:	e9 80 fd ff ff       	jmp    403020 <_init+0x20>

00000000004032a0 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>:
  4032a0:	ff 25 aa 8e 00 00    	jmp    *0x8eaa(%rip)        # 40c150 <_ZNKSt5ctypeIcE13_M_widen_initEv@GLIBCXX_3.4.11>
  4032a6:	68 27 00 00 00       	push   $0x27
  4032ab:	e9 70 fd ff ff       	jmp    403020 <_init+0x20>

00000000004032b0 <_ZN2sf6StringixEm@plt>:
  4032b0:	ff 25 a2 8e 00 00    	jmp    *0x8ea2(%rip)        # 40c158 <_ZN2sf6StringixEm@Base>
  4032b6:	68 28 00 00 00       	push   $0x28
  4032bb:	e9 60 fd ff ff       	jmp    403020 <_init+0x20>

00000000004032c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@plt>:
  4032c0:	ff 25 9a 8e 00 00    	jmp    *0x8e9a(%rip)        # 40c160 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@GLIBCXX_3.4.21>
  4032c6:	68 29 00 00 00       	push   $0x29
  4032cb:	e9 50 fd ff ff       	jmp    403020 <_init+0x20>

00000000004032d0 <_ZN2sfgeENS_4TimeES0_@plt>:
  4032d0:	ff 25 92 8e 00 00    	jmp    *0x8e92(%rip)        # 40c168 <_ZN2sfgeENS_4TimeES0_@Base>
  4032d6:	68 2a 00 00 00       	push   $0x2a
  4032db:	e9 40 fd ff ff       	jmp    403020 <_init+0x20>

00000000004032e0 <_ZN2sf6Window17setFramerateLimitEj@plt>:
  4032e0:	ff 25 8a 8e 00 00    	jmp    *0x8e8a(%rip)        # 40c170 <_ZN2sf6Window17setFramerateLimitEj@Base>
  4032e6:	68 2b 00 00 00       	push   $0x2b
  4032eb:	e9 30 fd ff ff       	jmp    403020 <_init+0x20>

00000000004032f0 <_ZN2sf4Text7setFontERKNS_4FontE@plt>:
  4032f0:	ff 25 82 8e 00 00    	jmp    *0x8e82(%rip)        # 40c178 <_ZN2sf4Text7setFontERKNS_4FontE@Base>
  4032f6:	68 2c 00 00 00       	push   $0x2c
  4032fb:	e9 20 fd ff ff       	jmp    403020 <_init+0x20>

0000000000403300 <_ZSt16__throw_bad_castv@plt>:
  403300:	ff 25 7a 8e 00 00    	jmp    *0x8e7a(%rip)        # 40c180 <_ZSt16__throw_bad_castv@GLIBCXX_3.4>
  403306:	68 2d 00 00 00       	push   $0x2d
  40330b:	e9 10 fd ff ff       	jmp    403020 <_init+0x20>

0000000000403310 <_ZN2sf6Window7displayEv@plt>:
  403310:	ff 25 72 8e 00 00    	jmp    *0x8e72(%rip)        # 40c188 <_ZN2sf6Window7displayEv@Base>
  403316:	68 2e 00 00 00       	push   $0x2e
  40331b:	e9 00 fd ff ff       	jmp    403020 <_init+0x20>

0000000000403320 <_ZN2sf5ClockC1Ev@plt>:
  403320:	ff 25 6a 8e 00 00    	jmp    *0x8e6a(%rip)        # 40c190 <_ZN2sf5ClockC1Ev@Base>
  403326:	68 2f 00 00 00       	push   $0x2f
  40332b:	e9 f0 fc ff ff       	jmp    403020 <_init+0x20>

0000000000403330 <_ZN2sf4Text16setCharacterSizeEj@plt>:
  403330:	ff 25 62 8e 00 00    	jmp    *0x8e62(%rip)        # 40c198 <_ZN2sf4Text16setCharacterSizeEj@Base>
  403336:	68 30 00 00 00       	push   $0x30
  40333b:	e9 e0 fc ff ff       	jmp    403020 <_init+0x20>

0000000000403340 <ioctl@plt>:
  403340:	ff 25 5a 8e 00 00    	jmp    *0x8e5a(%rip)        # 40c1a0 <ioctl@GLIBC_2.2.5>
  403346:	68 31 00 00 00       	push   $0x31
  40334b:	e9 d0 fc ff ff       	jmp    403020 <_init+0x20>

0000000000403350 <_ZNSt6localeD1Ev@plt>:
  403350:	ff 25 52 8e 00 00    	jmp    *0x8e52(%rip)        # 40c1a8 <_ZNSt6localeD1Ev@GLIBCXX_3.4>
  403356:	68 32 00 00 00       	push   $0x32
  40335b:	e9 c0 fc ff ff       	jmp    403020 <_init+0x20>

0000000000403360 <fprintf@plt>:
  403360:	ff 25 4a 8e 00 00    	jmp    *0x8e4a(%rip)        # 40c1b0 <fprintf@GLIBC_2.2.5>
  403366:	68 33 00 00 00       	push   $0x33
  40336b:	e9 b0 fc ff ff       	jmp    403020 <_init+0x20>

0000000000403370 <read@plt>:
  403370:	ff 25 42 8e 00 00    	jmp    *0x8e42(%rip)        # 40c1b8 <read@GLIBC_2.2.5>
  403376:	68 34 00 00 00       	push   $0x34
  40337b:	e9 a0 fc ff ff       	jmp    403020 <_init+0x20>

0000000000403380 <_ZN2sf5MusicD1Ev@plt>:
  403380:	ff 25 3a 8e 00 00    	jmp    *0x8e3a(%rip)        # 40c1c0 <_ZN2sf5MusicD1Ev@Base>
  403386:	68 35 00 00 00       	push   $0x35
  40338b:	e9 90 fc ff ff       	jmp    403020 <_init+0x20>

0000000000403390 <_ZN2sf12RenderWindowC1ENS_9VideoModeERKNS_6StringEjRKNS_15ContextSettingsE@plt>:
  403390:	ff 25 32 8e 00 00    	jmp    *0x8e32(%rip)        # 40c1c8 <_ZN2sf12RenderWindowC1ENS_9VideoModeERKNS_6StringEjRKNS_15ContextSettingsE@Base>
  403396:	68 36 00 00 00       	push   $0x36
  40339b:	e9 80 fc ff ff       	jmp    403020 <_init+0x20>

00000000004033a0 <_ZSt24__throw_out_of_range_fmtPKcz@plt>:
  4033a0:	ff 25 2a 8e 00 00    	jmp    *0x8e2a(%rip)        # 40c1d0 <_ZSt24__throw_out_of_range_fmtPKcz@GLIBCXX_3.4.20>
  4033a6:	68 37 00 00 00       	push   $0x37
  4033ab:	e9 70 fc ff ff       	jmp    403020 <_init+0x20>

00000000004033b0 <_ZNK2sf6String7getSizeEv@plt>:
  4033b0:	ff 25 22 8e 00 00    	jmp    *0x8e22(%rip)        # 40c1d8 <_ZNK2sf6String7getSizeEv@Base>
  4033b6:	68 38 00 00 00       	push   $0x38
  4033bb:	e9 60 fc ff ff       	jmp    403020 <_init+0x20>

00000000004033c0 <_ZNSt8ios_base4InitC1Ev@plt>:
  4033c0:	ff 25 1a 8e 00 00    	jmp    *0x8e1a(%rip)        # 40c1e0 <_ZNSt8ios_base4InitC1Ev@GLIBCXX_3.4>
  4033c6:	68 39 00 00 00       	push   $0x39
  4033cb:	e9 50 fc ff ff       	jmp    403020 <_init+0x20>

00000000004033d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>:
  4033d0:	ff 25 12 8e 00 00    	jmp    *0x8e12(%rip)        # 40c1e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@GLIBCXX_3.4.21>
  4033d6:	68 3a 00 00 00       	push   $0x3a
  4033db:	e9 40 fc ff ff       	jmp    403020 <_init+0x20>

00000000004033e0 <_ZNK2sf5Clock14getElapsedTimeEv@plt>:
  4033e0:	ff 25 0a 8e 00 00    	jmp    *0x8e0a(%rip)        # 40c1f0 <_ZNK2sf5Clock14getElapsedTimeEv@Base>
  4033e6:	68 3b 00 00 00       	push   $0x3b
  4033eb:	e9 30 fc ff ff       	jmp    403020 <_init+0x20>

00000000004033f0 <_ZNK2sf4Text9getStringEv@plt>:
  4033f0:	ff 25 02 8e 00 00    	jmp    *0x8e02(%rip)        # 40c1f8 <_ZNK2sf4Text9getStringEv@Base>
  4033f6:	68 3c 00 00 00       	push   $0x3c
  4033fb:	e9 20 fc ff ff       	jmp    403020 <_init+0x20>

0000000000403400 <_ZN2sfpLERNS_4TimeES0_@plt>:
  403400:	ff 25 fa 8d 00 00    	jmp    *0x8dfa(%rip)        # 40c200 <_ZN2sfpLERNS_4TimeES0_@Base>
  403406:	68 3d 00 00 00       	push   $0x3d
  40340b:	e9 10 fc ff ff       	jmp    403020 <_init+0x20>

0000000000403410 <_ZN2sf5Clock7restartEv@plt>:
  403410:	ff 25 f2 8d 00 00    	jmp    *0x8df2(%rip)        # 40c208 <_ZN2sf5Clock7restartEv@Base>
  403416:	68 3e 00 00 00       	push   $0x3e
  40341b:	e9 00 fc ff ff       	jmp    403020 <_init+0x20>

0000000000403420 <_ZN2sf11SoundStream4playEv@plt>:
  403420:	ff 25 ea 8d 00 00    	jmp    *0x8dea(%rip)        # 40c210 <_ZN2sf11SoundStream4playEv@Base>
  403426:	68 3f 00 00 00       	push   $0x3f
  40342b:	e9 f0 fb ff ff       	jmp    403020 <_init+0x20>

0000000000403430 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>:
  403430:	ff 25 e2 8d 00 00    	jmp    *0x8de2(%rip)        # 40c218 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@Base>
  403436:	68 40 00 00 00       	push   $0x40
  40343b:	e9 e0 fb ff ff       	jmp    403020 <_init+0x20>

0000000000403440 <_ZN2sfmIERNS_4TimeES0_@plt>:
  403440:	ff 25 da 8d 00 00    	jmp    *0x8dda(%rip)        # 40c220 <_ZN2sfmIERNS_4TimeES0_@Base>
  403446:	68 41 00 00 00       	push   $0x41
  40344b:	e9 d0 fb ff ff       	jmp    403020 <_init+0x20>

0000000000403450 <__gxx_personality_v0@plt>:
  403450:	ff 25 d2 8d 00 00    	jmp    *0x8dd2(%rip)        # 40c228 <__gxx_personality_v0@CXXABI_1.3>
  403456:	68 42 00 00 00       	push   $0x42
  40345b:	e9 c0 fb ff ff       	jmp    403020 <_init+0x20>

0000000000403460 <_ZN2sf6StringaSERKS0_@plt>:
  403460:	ff 25 ca 8d 00 00    	jmp    *0x8dca(%rip)        # 40c230 <_ZN2sf6StringaSERKS0_@Base>
  403466:	68 43 00 00 00       	push   $0x43
  40346b:	e9 b0 fb ff ff       	jmp    403020 <_init+0x20>

0000000000403470 <_ZNK2sf4Time9asSecondsEv@plt>:
  403470:	ff 25 c2 8d 00 00    	jmp    *0x8dc2(%rip)        # 40c238 <_ZNK2sf4Time9asSecondsEv@Base>
  403476:	68 44 00 00 00       	push   $0x44
  40347b:	e9 a0 fb ff ff       	jmp    403020 <_init+0x20>

0000000000403480 <_ZN2sf12RenderWindowD1Ev@plt>:
  403480:	ff 25 ba 8d 00 00    	jmp    *0x8dba(%rip)        # 40c240 <_ZN2sf12RenderWindowD1Ev@Base>
  403486:	68 45 00 00 00       	push   $0x45
  40348b:	e9 90 fb ff ff       	jmp    403020 <_init+0x20>

0000000000403490 <_ZNK2sf6String12toAnsiStringB5cxx11ERKSt6locale@plt>:
  403490:	ff 25 b2 8d 00 00    	jmp    *0x8db2(%rip)        # 40c248 <_ZNK2sf6String12toAnsiStringB5cxx11ERKSt6locale@Base>
  403496:	68 46 00 00 00       	push   $0x46
  40349b:	e9 80 fb ff ff       	jmp    403020 <_init+0x20>

00000000004034a0 <_ZN2sf4Text9setStringERKNS_6StringE@plt>:
  4034a0:	ff 25 aa 8d 00 00    	jmp    *0x8daa(%rip)        # 40c250 <_ZN2sf4Text9setStringERKNS_6StringE@Base>
  4034a6:	68 47 00 00 00       	push   $0x47
  4034ab:	e9 70 fb ff ff       	jmp    403020 <_init+0x20>

00000000004034b0 <_Unwind_Resume@plt>:
  4034b0:	ff 25 a2 8d 00 00    	jmp    *0x8da2(%rip)        # 40c258 <_Unwind_Resume@GCC_3.0>
  4034b6:	68 48 00 00 00       	push   $0x48
  4034bb:	e9 60 fb ff ff       	jmp    403020 <_init+0x20>

00000000004034c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>:
  4034c0:	ff 25 9a 8d 00 00    	jmp    *0x8d9a(%rip)        # 40c260 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@GLIBCXX_3.4.21>
  4034c6:	68 49 00 00 00       	push   $0x49
  4034cb:	e9 50 fb ff ff       	jmp    403020 <_init+0x20>

00000000004034d0 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>:
  4034d0:	ff 25 92 8d 00 00    	jmp    *0x8d92(%rip)        # 40c268 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@Base>
  4034d6:	68 4a 00 00 00       	push   $0x4a
  4034db:	e9 40 fb ff ff       	jmp    403020 <_init+0x20>

00000000004034e0 <_ZN2sf4Text12setFillColorERKNS_5ColorE@plt>:
  4034e0:	ff 25 8a 8d 00 00    	jmp    *0x8d8a(%rip)        # 40c270 <_ZN2sf4Text12setFillColorERKNS_5ColorE@Base>
  4034e6:	68 4b 00 00 00       	push   $0x4b
  4034eb:	e9 30 fb ff ff       	jmp    403020 <_init+0x20>

00000000004034f0 <_ZN2sf6Window5closeEv@plt>:
  4034f0:	ff 25 82 8d 00 00    	jmp    *0x8d82(%rip)        # 40c278 <_ZN2sf6Window5closeEv@Base>
  4034f6:	68 4c 00 00 00       	push   $0x4c
  4034fb:	e9 20 fb ff ff       	jmp    403020 <_init+0x20>

0000000000403500 <_ZNSt6localeC1Ev@plt>:
  403500:	ff 25 7a 8d 00 00    	jmp    *0x8d7a(%rip)        # 40c280 <_ZNSt6localeC1Ev@GLIBCXX_3.4>
  403506:	68 4d 00 00 00       	push   $0x4d
  40350b:	e9 10 fb ff ff       	jmp    403020 <_init+0x20>

0000000000403510 <_ZNSt8ios_base4InitD1Ev@plt>:
  403510:	ff 25 72 8d 00 00    	jmp    *0x8d72(%rip)        # 40c288 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
  403516:	68 4e 00 00 00       	push   $0x4e
  40351b:	e9 00 fb ff ff       	jmp    403020 <_init+0x20>

Desmontagem da secção .text:

0000000000403520 <_Z17char_to_stringbitB5cxx11c.cold>:
      _M_length(size_type __length)
      { _M_string_length = __length; }

      pointer
      _M_data() const
      { return _M_dataplus._M_p; }
  403520:	49 8b 3c 24          	mov    (%r12),%rdi
      _M_create(size_type&, size_type);

      void
      _M_dispose()
      {
	if (!_M_is_local())
  403524:	48 39 fb             	cmp    %rdi,%rbx
  403527:	74 0e                	je     403537 <_Z17char_to_stringbitB5cxx11c.cold+0x17>
	  _M_destroy(_M_allocated_capacity);
      }

      void
      _M_destroy(size_type __size) throw()
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403529:	49 8b 74 24 10       	mov    0x10(%r12),%rsi
  40352e:	48 83 c6 01          	add    $0x1,%rsi
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
  403532:	e8 09 fd ff ff       	call   403240 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  403537:	48 89 ef             	mov    %rbp,%rdi
  40353a:	e8 71 ff ff ff       	call   4034b0 <_Unwind_Resume@plt>

000000000040353f <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold>:
      { return _M_dataplus._M_p; }
  40353f:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  403544:	4c 39 e7             	cmp    %r12,%rdi
  403547:	74 0e                	je     403557 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x18>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403549:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  40354e:	48 8d 70 01          	lea    0x1(%rax),%rsi
	::operator delete(__p
  403552:	e8 e9 fc ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403557:	48 8b 3c 24          	mov    (%rsp),%rdi
	if (!_M_is_local())
  40355b:	48 39 df             	cmp    %rbx,%rdi
  40355e:	74 0e                	je     40356e <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x2f>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403560:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  403565:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403569:	e8 d2 fc ff ff       	call   403240 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  40356e:	48 89 ef             	mov    %rbp,%rdi
  403571:	e8 3a ff ff ff       	call   4034b0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
  403576:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  40357b:	4c 39 e7             	cmp    %r12,%rdi
  40357e:	74 d7                	je     403557 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x18>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403580:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  403585:	48 8d 70 01          	lea    0x1(%rax),%rsi
	::operator delete(__p
  403589:	e8 b2 fc ff ff       	call   403240 <_ZdlPvm@plt>
  40358e:	eb c7                	jmp    403557 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x18>
      { return _M_dataplus._M_p; }
  403590:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  403595:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  40359a:	48 39 c7             	cmp    %rax,%rdi
  40359d:	74 b8                	je     403557 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x18>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  40359f:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  4035a4:	48 8d 70 01          	lea    0x1(%rax),%rsi
  4035a8:	e8 93 fc ff ff       	call   403240 <_ZdlPvm@plt>
  4035ad:	eb a8                	jmp    403557 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x18>
      { return _M_dataplus._M_p; }
  4035af:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  4035b4:	4c 39 e7             	cmp    %r12,%rdi
  4035b7:	74 9e                	je     403557 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x18>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4035b9:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  4035be:	48 8d 70 01          	lea    0x1(%rax),%rsi
  4035c2:	e8 79 fc ff ff       	call   403240 <_ZdlPvm@plt>
  4035c7:	eb 8e                	jmp    403557 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x18>

00000000004035c9 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_.cold>:
      { return _M_dataplus._M_p; }
  4035c9:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  4035ce:	4c 39 f7             	cmp    %r14,%rdi
  4035d1:	74 0e                	je     4035e1 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_.cold+0x18>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4035d3:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  4035d8:	48 8d 70 01          	lea    0x1(%rax),%rsi
  4035dc:	e8 5f fc ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  4035e1:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
	if (!_M_is_local())
  4035e6:	48 39 ef             	cmp    %rbp,%rdi
  4035e9:	74 0e                	je     4035f9 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_.cold+0x30>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4035eb:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  4035f0:	48 8d 70 01          	lea    0x1(%rax),%rsi
  4035f4:	e8 47 fc ff ff       	call   403240 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  4035f9:	4c 89 e7             	mov    %r12,%rdi
  4035fc:	e8 af fe ff ff       	call   4034b0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
  403601:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  403606:	4c 39 f7             	cmp    %r14,%rdi
  403609:	74 0e                	je     403619 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_.cold+0x50>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  40360b:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  403610:	48 8d 70 01          	lea    0x1(%rax),%rsi
	::operator delete(__p
  403614:	e8 27 fc ff ff       	call   403240 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  403619:	48 89 ef             	mov    %rbp,%rdi
  40361c:	e8 8f fe ff ff       	call   4034b0 <_Unwind_Resume@plt>

0000000000403621 <main.cold>:
      { return _M_dataplus._M_p; }
  403621:	48 8b bc 24 50 01 00 	mov    0x150(%rsp),%rdi
  403628:	00 
	if (!_M_is_local())
  403629:	4c 39 f7             	cmp    %r14,%rdi
  40362c:	0f 85 6f 03 00 00    	jne    4039a1 <main.cold+0x380>
				{
					elapsedtime_text -= sf::seconds(.001f);
					if (typedtext.getSize() > 0)
					{
						text.setString(text.getString() + typedtext[0]);
						typedtext = typedtext.toAnsiString().substr(1);
  403632:	48 89 ef             	mov    %rbp,%rdi
  403635:	e8 16 fd ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
      { return _M_dataplus._M_p; }
  40363a:	48 8b bc 24 30 01 00 	mov    0x130(%rsp),%rdi
  403641:	00 
	if (!_M_is_local())
  403642:	48 8d 84 24 40 01 00 	lea    0x140(%rsp),%rax
  403649:	00 
  40364a:	48 39 c7             	cmp    %rax,%rdi
  40364d:	74 11                	je     403660 <main.cold+0x3f>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  40364f:	48 8b 84 24 40 01 00 	mov    0x140(%rsp),%rax
  403656:	00 
  403657:	48 8d 70 01          	lea    0x1(%rax),%rsi
	::operator delete(__p
  40365b:	e8 e0 fb ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403660:	48 8b bc 24 10 01 00 	mov    0x110(%rsp),%rdi
  403667:	00 
	if (!_M_is_local())
  403668:	48 8d 84 24 20 01 00 	lea    0x120(%rsp),%rax
  40366f:	00 
  403670:	48 39 c7             	cmp    %rax,%rdi
  403673:	74 11                	je     403686 <main.cold+0x65>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403675:	48 8b 84 24 20 01 00 	mov    0x120(%rsp),%rax
  40367c:	00 
  40367d:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403681:	e8 ba fb ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403686:	48 8b bc 24 f0 00 00 	mov    0xf0(%rsp),%rdi
  40368d:	00 
	if (!_M_is_local())
  40368e:	48 8d 84 24 00 01 00 	lea    0x100(%rsp),%rax
  403695:	00 
  403696:	48 39 c7             	cmp    %rax,%rdi
  403699:	74 15                	je     4036b0 <main.cold+0x8f>
  40369b:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  4036a2:	00 
  4036a3:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4036aa:	00 
  4036ab:	e8 90 fb ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  4036b0:	48 8b bc 24 d0 00 00 	mov    0xd0(%rsp),%rdi
  4036b7:	00 
	if (!_M_is_local())
  4036b8:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
  4036bf:	00 
  4036c0:	48 39 c7             	cmp    %rax,%rdi
  4036c3:	0f 85 ee 02 00 00    	jne    4039b7 <main.cold+0x396>
	}

	

	//close(fd);
}
  4036c9:	48 8d bc 24 90 02 00 	lea    0x290(%rsp),%rdi
  4036d0:	00 
  4036d1:	e8 aa fc ff ff       	call   403380 <_ZN2sf5MusicD1Ev@plt>
  4036d6:	48 8d bc 24 00 1f 00 	lea    0x1f00(%rsp),%rdi
  4036dd:	00 
  4036de:	e8 8d 49 00 00       	call   408070 <_ZN2sf4TextD1Ev>
  4036e3:	48 8d bc 24 90 1d 00 	lea    0x1d90(%rsp),%rdi
  4036ea:	00 
  4036eb:	e8 80 49 00 00       	call   408070 <_ZN2sf4TextD1Ev>
  4036f0:	48 8d bc 24 20 1c 00 	lea    0x1c20(%rsp),%rdi
  4036f7:	00 
  4036f8:	e8 73 49 00 00       	call   408070 <_ZN2sf4TextD1Ev>
  4036fd:	48 8d bc 24 00 02 00 	lea    0x200(%rsp),%rdi
  403704:	00 
  403705:	48 89 dd             	mov    %rbx,%rbp
  403708:	e8 73 fb ff ff       	call   403280 <_ZN2sf4FontD1Ev@plt>
{
////////////////////////////////////////////////////////////
/// \brief Specialized shape representing a circle
///
////////////////////////////////////////////////////////////
class SFML_GRAPHICS_API CircleShape : public Shape
  40370d:	48 c7 04 24 28 bd 40 	movq   $0x40bd28,(%rsp)
  403714:	00 
  403715:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  40371b:	48 8d bc 24 c0 1a 00 	lea    0x1ac0(%rsp),%rdi
  403722:	00 
  403723:	66 49 0f 6e c4       	movq   %r12,%xmm0
  403728:	0f 16 04 24          	movhps (%rsp),%xmm0
  40372c:	0f 29 84 24 c0 1a 00 	movaps %xmm0,0x1ac0(%rsp)
  403733:	00 
  403734:	e8 27 f9 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  403739:	66 49 0f 6e c4       	movq   %r12,%xmm0
  40373e:	48 8d bc 24 60 19 00 	lea    0x1960(%rsp),%rdi
  403745:	00 
  403746:	0f 16 04 24          	movhps (%rsp),%xmm0
  40374a:	0f 29 84 24 60 19 00 	movaps %xmm0,0x1960(%rsp)
  403751:	00 
  403752:	e8 09 f9 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  403757:	66 49 0f 6e c4       	movq   %r12,%xmm0
  40375c:	48 8d bc 24 00 18 00 	lea    0x1800(%rsp),%rdi
  403763:	00 
  403764:	0f 16 04 24          	movhps (%rsp),%xmm0
  403768:	0f 29 84 24 00 18 00 	movaps %xmm0,0x1800(%rsp)
  40376f:	00 
  403770:	e8 eb f8 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  403775:	66 49 0f 6e c4       	movq   %r12,%xmm0
  40377a:	48 8d bc 24 a0 16 00 	lea    0x16a0(%rsp),%rdi
  403781:	00 
  403782:	0f 16 04 24          	movhps (%rsp),%xmm0
  403786:	0f 29 84 24 a0 16 00 	movaps %xmm0,0x16a0(%rsp)
  40378d:	00 
  40378e:	e8 cd f8 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  403793:	66 49 0f 6e c4       	movq   %r12,%xmm0
  403798:	48 8d bc 24 40 15 00 	lea    0x1540(%rsp),%rdi
  40379f:	00 
  4037a0:	0f 16 04 24          	movhps (%rsp),%xmm0
  4037a4:	0f 29 84 24 40 15 00 	movaps %xmm0,0x1540(%rsp)
  4037ab:	00 
  4037ac:	e8 af f8 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4037b1:	66 49 0f 6e c4       	movq   %r12,%xmm0
  4037b6:	48 8d bc 24 e0 13 00 	lea    0x13e0(%rsp),%rdi
  4037bd:	00 
  4037be:	0f 16 04 24          	movhps (%rsp),%xmm0
  4037c2:	0f 29 84 24 e0 13 00 	movaps %xmm0,0x13e0(%rsp)
  4037c9:	00 
  4037ca:	e8 91 f8 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4037cf:	66 49 0f 6e c4       	movq   %r12,%xmm0
  4037d4:	48 8d bc 24 80 12 00 	lea    0x1280(%rsp),%rdi
  4037db:	00 
  4037dc:	0f 16 04 24          	movhps (%rsp),%xmm0
  4037e0:	0f 29 84 24 80 12 00 	movaps %xmm0,0x1280(%rsp)
  4037e7:	00 
  4037e8:	e8 73 f8 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4037ed:	66 49 0f 6e c4       	movq   %r12,%xmm0
  4037f2:	48 8d bc 24 20 11 00 	lea    0x1120(%rsp),%rdi
  4037f9:	00 
  4037fa:	0f 16 04 24          	movhps (%rsp),%xmm0
  4037fe:	0f 29 84 24 20 11 00 	movaps %xmm0,0x1120(%rsp)
  403805:	00 
  403806:	e8 55 f8 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  40380b:	66 49 0f 6e c4       	movq   %r12,%xmm0
  403810:	48 8d bc 24 c0 0f 00 	lea    0xfc0(%rsp),%rdi
  403817:	00 
  403818:	0f 16 04 24          	movhps (%rsp),%xmm0
  40381c:	0f 29 84 24 c0 0f 00 	movaps %xmm0,0xfc0(%rsp)
  403823:	00 
  403824:	e8 37 f8 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  403829:	66 49 0f 6e c4       	movq   %r12,%xmm0
  40382e:	48 8d bc 24 60 0e 00 	lea    0xe60(%rsp),%rdi
  403835:	00 
  403836:	0f 16 04 24          	movhps (%rsp),%xmm0
  40383a:	0f 29 84 24 60 0e 00 	movaps %xmm0,0xe60(%rsp)
  403841:	00 
  403842:	e8 19 f8 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  403847:	66 49 0f 6e c4       	movq   %r12,%xmm0
  40384c:	48 8d bc 24 00 0d 00 	lea    0xd00(%rsp),%rdi
  403853:	00 
  403854:	0f 16 04 24          	movhps (%rsp),%xmm0
  403858:	0f 29 84 24 00 0d 00 	movaps %xmm0,0xd00(%rsp)
  40385f:	00 
  403860:	e8 fb f7 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  403865:	66 49 0f 6e c4       	movq   %r12,%xmm0
  40386a:	48 8d bc 24 a0 0b 00 	lea    0xba0(%rsp),%rdi
  403871:	00 
  403872:	0f 16 04 24          	movhps (%rsp),%xmm0
  403876:	0f 29 84 24 a0 0b 00 	movaps %xmm0,0xba0(%rsp)
  40387d:	00 
  40387e:	e8 dd f7 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  403883:	66 49 0f 6e c4       	movq   %r12,%xmm0
  403888:	48 8d bc 24 40 0a 00 	lea    0xa40(%rsp),%rdi
  40388f:	00 
  403890:	0f 16 04 24          	movhps (%rsp),%xmm0
  403894:	0f 29 84 24 40 0a 00 	movaps %xmm0,0xa40(%rsp)
  40389b:	00 
  40389c:	e8 bf f7 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4038a1:	66 49 0f 6e c4       	movq   %r12,%xmm0
  4038a6:	48 8d bc 24 e0 08 00 	lea    0x8e0(%rsp),%rdi
  4038ad:	00 
  4038ae:	0f 16 04 24          	movhps (%rsp),%xmm0
  4038b2:	0f 29 84 24 e0 08 00 	movaps %xmm0,0x8e0(%rsp)
  4038b9:	00 
  4038ba:	e8 a1 f7 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4038bf:	66 49 0f 6e c4       	movq   %r12,%xmm0
  4038c4:	48 8d bc 24 80 07 00 	lea    0x780(%rsp),%rdi
  4038cb:	00 
  4038cc:	0f 16 04 24          	movhps (%rsp),%xmm0
  4038d0:	0f 29 84 24 80 07 00 	movaps %xmm0,0x780(%rsp)
  4038d7:	00 
  4038d8:	e8 83 f7 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4038dd:	66 49 0f 6e c4       	movq   %r12,%xmm0
  4038e2:	48 8d bc 24 20 06 00 	lea    0x620(%rsp),%rdi
  4038e9:	00 
  4038ea:	0f 16 04 24          	movhps (%rsp),%xmm0
  4038ee:	0f 29 84 24 20 06 00 	movaps %xmm0,0x620(%rsp)
  4038f5:	00 
  4038f6:	e8 65 f7 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4038fb:	66 49 0f 6e c4       	movq   %r12,%xmm0
  403900:	48 8d bc 24 c0 04 00 	lea    0x4c0(%rsp),%rdi
  403907:	00 
  403908:	0f 16 04 24          	movhps (%rsp),%xmm0
  40390c:	0f 29 84 24 c0 04 00 	movaps %xmm0,0x4c0(%rsp)
  403913:	00 
  403914:	e8 47 f7 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  403919:	66 49 0f 6e c4       	movq   %r12,%xmm0
  40391e:	48 8d bc 24 60 03 00 	lea    0x360(%rsp),%rdi
  403925:	00 
  403926:	0f 16 04 24          	movhps (%rsp),%xmm0
  40392a:	0f 29 84 24 60 03 00 	movaps %xmm0,0x360(%rsp)
  403931:	00 
  403932:	e8 29 f7 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  403937:	48 8d bc 24 70 20 00 	lea    0x2070(%rsp),%rdi
  40393e:	00 
  40393f:	e8 3c fb ff ff       	call   403480 <_ZN2sf12RenderWindowD1Ev@plt>
  403944:	48 89 ef             	mov    %rbp,%rdi
  403947:	e8 64 fb ff ff       	call   4034b0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
  40394c:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  403953:	00 
	if (!_M_is_local())
  403954:	48 3b 3c 24          	cmp    (%rsp),%rdi
  403958:	74 15                	je     40396f <main.cold+0x34e>
  40395a:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  403961:	00 
  403962:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403969:	00 
  40396a:	e8 d1 f8 ff ff       	call   403240 <_ZdlPvm@plt>
							typedtext.insert(0, "BOOM!!!");
  40396f:	4c 89 f7             	mov    %r14,%rdi
  403972:	e8 d9 f9 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
  403977:	e9 be fc ff ff       	jmp    40363a <main.cold+0x19>
      { return _M_dataplus._M_p; }
  40397c:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  403983:	00 
	if (!_M_is_local())
  403984:	48 3b 3c 24          	cmp    (%rsp),%rdi
  403988:	74 e5                	je     40396f <main.cold+0x34e>
  40398a:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  403991:	00 
  403992:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403999:	00 
  40399a:	e8 a1 f8 ff ff       	call   403240 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  40399f:	eb ce                	jmp    40396f <main.cold+0x34e>
  4039a1:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  4039a8:	00 
  4039a9:	48 8d 70 01          	lea    0x1(%rax),%rsi
  4039ad:	e8 8e f8 ff ff       	call   403240 <_ZdlPvm@plt>
  4039b2:	e9 7b fc ff ff       	jmp    403632 <main.cold+0x11>
  4039b7:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  4039be:	00 
  4039bf:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4039c6:	00 
  4039c7:	e8 74 f8 ff ff       	call   403240 <_ZdlPvm@plt>
  4039cc:	e9 f8 fc ff ff       	jmp    4036c9 <main.cold+0xa8>
      { return _M_dataplus._M_p; }
  4039d1:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  4039d8:	00 
	if (!_M_is_local())
  4039d9:	48 3b 3c 24          	cmp    (%rsp),%rdi
  4039dd:	74 15                	je     4039f4 <main.cold+0x3d3>
  4039df:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  4039e6:	00 
  4039e7:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4039ee:	00 
  4039ef:	e8 4c f8 ff ff       	call   403240 <_ZdlPvm@plt>
					typedtext.insert(0, "Quarta fase");
  4039f4:	4c 89 ef             	mov    %r13,%rdi
  4039f7:	e8 54 f9 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
  4039fc:	e9 39 fc ff ff       	jmp    40363a <main.cold+0x19>
      { return _M_dataplus._M_p; }
  403a01:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  403a08:	00 
	if (!_M_is_local())
  403a09:	48 8d 84 24 a0 01 00 	lea    0x1a0(%rsp),%rax
  403a10:	00 
  403a11:	48 39 c7             	cmp    %rax,%rdi
  403a14:	74 de                	je     4039f4 <main.cold+0x3d3>
  403a16:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  403a1d:	00 
  403a1e:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403a25:	00 
  403a26:	e8 15 f8 ff ff       	call   403240 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403a2b:	eb c7                	jmp    4039f4 <main.cold+0x3d3>
      { return _M_dataplus._M_p; }
  403a2d:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  403a34:	00 
	if (!_M_is_local())
  403a35:	48 3b 3c 24          	cmp    (%rsp),%rdi
  403a39:	74 b9                	je     4039f4 <main.cold+0x3d3>
  403a3b:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  403a42:	00 
  403a43:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403a4a:	00 
  403a4b:	e8 f0 f7 ff ff       	call   403240 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403a50:	eb a2                	jmp    4039f4 <main.cold+0x3d3>
      { return _M_dataplus._M_p; }
  403a52:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  403a59:	00 
	if (!_M_is_local())
  403a5a:	48 8d 84 24 a0 01 00 	lea    0x1a0(%rsp),%rax
  403a61:	00 
  403a62:	48 39 c7             	cmp    %rax,%rdi
  403a65:	74 8d                	je     4039f4 <main.cold+0x3d3>
  403a67:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  403a6e:	00 
  403a6f:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403a76:	00 
  403a77:	e8 c4 f7 ff ff       	call   403240 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403a7c:	e9 73 ff ff ff       	jmp    4039f4 <main.cold+0x3d3>
      { return _M_dataplus._M_p; }
  403a81:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  403a88:	00 
	if (!_M_is_local())
  403a89:	48 3b 3c 24          	cmp    (%rsp),%rdi
  403a8d:	74 15                	je     403aa4 <main.cold+0x483>
  403a8f:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  403a96:	00 
  403a97:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403a9e:	00 
  403a9f:	e8 9c f7 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403aa4:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  403aab:	00 
	if (!_M_is_local())
  403aac:	4c 39 ff             	cmp    %r15,%rdi
  403aaf:	74 11                	je     403ac2 <main.cold+0x4a1>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403ab1:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  403ab8:	00 
  403ab9:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403abd:	e8 7e f7 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403ac2:	48 8b bc 24 50 01 00 	mov    0x150(%rsp),%rdi
  403ac9:	00 
	if (!_M_is_local())
  403aca:	48 8d 84 24 60 01 00 	lea    0x160(%rsp),%rax
  403ad1:	00 
  403ad2:	48 39 c7             	cmp    %rax,%rdi
  403ad5:	74 11                	je     403ae8 <main.cold+0x4c7>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403ad7:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  403ade:	00 
  403adf:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403ae3:	e8 58 f7 ff ff       	call   403240 <_ZdlPvm@plt>
						typedtext = typedtext.toAnsiString().substr(1);
  403ae8:	4c 89 f7             	mov    %r14,%rdi
  403aeb:	e8 60 f8 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
  403af0:	e9 3d fb ff ff       	jmp    403632 <main.cold+0x11>
      { return _M_dataplus._M_p; }
  403af5:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  403afc:	00 
	if (!_M_is_local())
  403afd:	48 8d 84 24 a0 01 00 	lea    0x1a0(%rsp),%rax
  403b04:	00 
  403b05:	48 39 c7             	cmp    %rax,%rdi
  403b08:	74 15                	je     403b1f <main.cold+0x4fe>
  403b0a:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  403b11:	00 
  403b12:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403b19:	00 
  403b1a:	e8 21 f7 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403b1f:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  403b26:	00 
	if (!_M_is_local())
  403b27:	48 8d 84 24 80 01 00 	lea    0x180(%rsp),%rax
  403b2e:	00 
  403b2f:	48 39 c7             	cmp    %rax,%rdi
  403b32:	0f 84 02 fb ff ff    	je     40363a <main.cold+0x19>
  403b38:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  403b3f:	00 
  403b40:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403b47:	00 
  403b48:	e8 f3 f6 ff ff       	call   403240 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403b4d:	e9 e8 fa ff ff       	jmp    40363a <main.cold+0x19>
      { return _M_dataplus._M_p; }
  403b52:	48 8b bc 24 00 1f 00 	mov    0x1f00(%rsp),%rdi
  403b59:	00 
	if (!_M_is_local())
  403b5a:	48 8d 84 24 10 1f 00 	lea    0x1f10(%rsp),%rax
  403b61:	00 
  403b62:	48 39 c7             	cmp    %rax,%rdi
  403b65:	74 15                	je     403b7c <main.cold+0x55b>
  403b67:	48 8b 84 24 10 1f 00 	mov    0x1f10(%rsp),%rax
  403b6e:	00 
  403b6f:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403b76:	00 
  403b77:	e8 c4 f6 ff ff       	call   403240 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  403b7c:	48 8d bc 24 20 1c 00 	lea    0x1c20(%rsp),%rdi
  403b83:	00 
  403b84:	e8 c7 f7 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
  403b89:	48 89 ef             	mov    %rbp,%rdi
  403b8c:	e8 1f f9 ff ff       	call   4034b0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
  403b91:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  403b98:	00 
	if (!_M_is_local())
  403b99:	48 8d 84 24 a0 01 00 	lea    0x1a0(%rsp),%rax
  403ba0:	00 
  403ba1:	48 39 c7             	cmp    %rax,%rdi
  403ba4:	0f 84 4a fe ff ff    	je     4039f4 <main.cold+0x3d3>
	::operator delete(__p
  403baa:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  403bb1:	00 
  403bb2:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403bb9:	00 
  403bba:	e8 81 f6 ff ff       	call   403240 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403bbf:	e9 30 fe ff ff       	jmp    4039f4 <main.cold+0x3d3>
      { return _M_dataplus._M_p; }
  403bc4:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  403bcb:	00 
	if (!_M_is_local())
  403bcc:	48 3b 3c 24          	cmp    (%rsp),%rdi
  403bd0:	0f 84 1e fe ff ff    	je     4039f4 <main.cold+0x3d3>
  403bd6:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  403bdd:	00 
  403bde:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403be5:	00 
  403be6:	e8 55 f6 ff ff       	call   403240 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403beb:	e9 04 fe ff ff       	jmp    4039f4 <main.cold+0x3d3>
      { return _M_dataplus._M_p; }
  403bf0:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  403bf7:	00 
	if (!_M_is_local())
  403bf8:	48 8d 84 24 a0 01 00 	lea    0x1a0(%rsp),%rax
  403bff:	00 
  403c00:	48 39 c7             	cmp    %rax,%rdi
  403c03:	74 15                	je     403c1a <main.cold+0x5f9>
  403c05:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  403c0c:	00 
  403c0d:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403c14:	00 
  403c15:	e8 26 f6 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403c1a:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  403c21:	00 
	if (!_M_is_local())
  403c22:	4c 39 ff             	cmp    %r15,%rdi
  403c25:	74 11                	je     403c38 <main.cold+0x617>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403c27:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  403c2e:	00 
  403c2f:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403c33:	e8 08 f6 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403c38:	48 8b bc 24 50 01 00 	mov    0x150(%rsp),%rdi
  403c3f:	00 
	if (!_M_is_local())
  403c40:	4c 39 f7             	cmp    %r14,%rdi
  403c43:	0f 84 e9 f9 ff ff    	je     403632 <main.cold+0x11>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403c49:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  403c50:	00 
  403c51:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403c55:	e8 e6 f5 ff ff       	call   403240 <_ZdlPvm@plt>
  403c5a:	e9 d3 f9 ff ff       	jmp    403632 <main.cold+0x11>
      { return _M_dataplus._M_p; }
  403c5f:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  403c66:	00 
	if (!_M_is_local())
  403c67:	48 3b 3c 24          	cmp    (%rsp),%rdi
  403c6b:	0f 84 83 fd ff ff    	je     4039f4 <main.cold+0x3d3>
  403c71:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  403c78:	00 
  403c79:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403c80:	00 
  403c81:	e8 ba f5 ff ff       	call   403240 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403c86:	e9 69 fd ff ff       	jmp    4039f4 <main.cold+0x3d3>
      { return _M_dataplus._M_p; }
  403c8b:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  403c92:	00 
	if (!_M_is_local())
  403c93:	48 8d 84 24 a0 01 00 	lea    0x1a0(%rsp),%rax
  403c9a:	00 
  403c9b:	48 39 c7             	cmp    %rax,%rdi
  403c9e:	0f 84 7b fe ff ff    	je     403b1f <main.cold+0x4fe>
  403ca4:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  403cab:	00 
  403cac:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403cb3:	00 
  403cb4:	e8 87 f5 ff ff       	call   403240 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403cb9:	e9 61 fe ff ff       	jmp    403b1f <main.cold+0x4fe>
      { return _M_dataplus._M_p; }
  403cbe:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  403cc5:	00 
	if (!_M_is_local())
  403cc6:	48 3b 3c 24          	cmp    (%rsp),%rdi
  403cca:	74 15                	je     403ce1 <main.cold+0x6c0>
  403ccc:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  403cd3:	00 
  403cd4:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403cdb:	00 
  403cdc:	e8 5f f5 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403ce1:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  403ce8:	00 
	if (!_M_is_local())
  403ce9:	4c 39 ff             	cmp    %r15,%rdi
  403cec:	74 11                	je     403cff <main.cold+0x6de>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403cee:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  403cf5:	00 
  403cf6:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403cfa:	e8 41 f5 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403cff:	48 8b bc 24 50 01 00 	mov    0x150(%rsp),%rdi
  403d06:	00 
	if (!_M_is_local())
  403d07:	48 8d 84 24 60 01 00 	lea    0x160(%rsp),%rax
  403d0e:	00 
  403d0f:	48 39 c7             	cmp    %rax,%rdi
  403d12:	0f 84 d0 fd ff ff    	je     403ae8 <main.cold+0x4c7>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403d18:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  403d1f:	00 
  403d20:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403d24:	e8 17 f5 ff ff       	call   403240 <_ZdlPvm@plt>
  403d29:	e9 ba fd ff ff       	jmp    403ae8 <main.cold+0x4c7>
      { return _M_dataplus._M_p; }
  403d2e:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  403d35:	00 
	if (!_M_is_local())
  403d36:	48 3b 3c 24          	cmp    (%rsp),%rdi
  403d3a:	74 15                	je     403d51 <main.cold+0x730>
  403d3c:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  403d43:	00 
  403d44:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403d4b:	00 
  403d4c:	e8 ef f4 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403d51:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  403d58:	00 
	if (!_M_is_local())
  403d59:	4c 39 ff             	cmp    %r15,%rdi
  403d5c:	74 11                	je     403d6f <main.cold+0x74e>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403d5e:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  403d65:	00 
  403d66:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403d6a:	e8 d1 f4 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403d6f:	48 8b bc 24 50 01 00 	mov    0x150(%rsp),%rdi
  403d76:	00 
	if (!_M_is_local())
  403d77:	48 8d 84 24 60 01 00 	lea    0x160(%rsp),%rax
  403d7e:	00 
  403d7f:	48 39 c7             	cmp    %rax,%rdi
  403d82:	0f 84 60 fd ff ff    	je     403ae8 <main.cold+0x4c7>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403d88:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  403d8f:	00 
  403d90:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403d94:	e8 a7 f4 ff ff       	call   403240 <_ZdlPvm@plt>
  403d99:	e9 4a fd ff ff       	jmp    403ae8 <main.cold+0x4c7>
      { return _M_dataplus._M_p; }
  403d9e:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  403da5:	00 
	if (!_M_is_local())
  403da6:	48 8d 84 24 a0 01 00 	lea    0x1a0(%rsp),%rax
  403dad:	00 
  403dae:	48 39 c7             	cmp    %rax,%rdi
  403db1:	0f 84 68 fd ff ff    	je     403b1f <main.cold+0x4fe>
  403db7:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  403dbe:	00 
  403dbf:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403dc6:	00 
  403dc7:	e8 74 f4 ff ff       	call   403240 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403dcc:	e9 4e fd ff ff       	jmp    403b1f <main.cold+0x4fe>
      { return _M_dataplus._M_p; }
  403dd1:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  403dd8:	00 
	if (!_M_is_local())
  403dd9:	48 3b 3c 24          	cmp    (%rsp),%rdi
  403ddd:	74 15                	je     403df4 <main.cold+0x7d3>
  403ddf:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  403de6:	00 
  403de7:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403dee:	00 
  403def:	e8 4c f4 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403df4:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  403dfb:	00 
	if (!_M_is_local())
  403dfc:	4c 39 ff             	cmp    %r15,%rdi
  403dff:	74 11                	je     403e12 <main.cold+0x7f1>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403e01:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  403e08:	00 
  403e09:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403e0d:	e8 2e f4 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403e12:	48 8b bc 24 50 01 00 	mov    0x150(%rsp),%rdi
  403e19:	00 
	if (!_M_is_local())
  403e1a:	48 8d 84 24 60 01 00 	lea    0x160(%rsp),%rax
  403e21:	00 
  403e22:	48 39 c7             	cmp    %rax,%rdi
  403e25:	0f 84 bd fc ff ff    	je     403ae8 <main.cold+0x4c7>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403e2b:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  403e32:	00 
  403e33:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403e37:	e8 04 f4 ff ff       	call   403240 <_ZdlPvm@plt>
  403e3c:	e9 a7 fc ff ff       	jmp    403ae8 <main.cold+0x4c7>
      { return _M_dataplus._M_p; }
  403e41:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  403e48:	00 
	if (!_M_is_local())
  403e49:	48 8d 84 24 a0 01 00 	lea    0x1a0(%rsp),%rax
  403e50:	00 
  403e51:	48 39 c7             	cmp    %rax,%rdi
  403e54:	0f 84 15 fb ff ff    	je     40396f <main.cold+0x34e>
  403e5a:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  403e61:	00 
  403e62:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403e69:	00 
  403e6a:	e8 d1 f3 ff ff       	call   403240 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403e6f:	e9 fb fa ff ff       	jmp    40396f <main.cold+0x34e>
  403e74:	48 8d bc 24 b0 01 00 	lea    0x1b0(%rsp),%rdi
  403e7b:	00 
  403e7c:	e8 cf f4 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
  403e81:	e9 2a f8 ff ff       	jmp    4036b0 <main.cold+0x8f>
      { return _M_dataplus._M_p; }
  403e86:	48 8b bc 24 00 1f 00 	mov    0x1f00(%rsp),%rdi
  403e8d:	00 
	if (!_M_is_local())
  403e8e:	48 39 ef             	cmp    %rbp,%rdi
  403e91:	0f 84 66 f8 ff ff    	je     4036fd <main.cold+0xdc>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403e97:	48 8b 84 24 10 1f 00 	mov    0x1f10(%rsp),%rax
  403e9e:	00 
  403e9f:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403ea3:	e8 98 f3 ff ff       	call   403240 <_ZdlPvm@plt>
  403ea8:	e9 50 f8 ff ff       	jmp    4036fd <main.cold+0xdc>
      { return _M_dataplus._M_p; }
  403ead:	48 8b bc 24 b0 01 00 	mov    0x1b0(%rsp),%rdi
  403eb4:	00 
	if (!_M_is_local())
  403eb5:	48 8d 84 24 c0 01 00 	lea    0x1c0(%rsp),%rax
  403ebc:	00 
  403ebd:	48 39 c7             	cmp    %rax,%rdi
  403ec0:	0f 84 03 f8 ff ff    	je     4036c9 <main.cold+0xa8>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403ec6:	48 8b 84 24 c0 01 00 	mov    0x1c0(%rsp),%rax
  403ecd:	00 
  403ece:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403ed2:	e8 69 f3 ff ff       	call   403240 <_ZdlPvm@plt>
  403ed7:	e9 ed f7 ff ff       	jmp    4036c9 <main.cold+0xa8>
      { return _M_dataplus._M_p; }
  403edc:	48 8b bc 24 90 02 00 	mov    0x290(%rsp),%rdi
  403ee3:	00 
	if (!_M_is_local())
  403ee4:	48 8d 84 24 a0 02 00 	lea    0x2a0(%rsp),%rax
  403eeb:	00 
  403eec:	48 39 c7             	cmp    %rax,%rdi
  403eef:	74 15                	je     403f06 <main.cold+0x8e5>
  403ef1:	48 8b 84 24 a0 02 00 	mov    0x2a0(%rsp),%rax
  403ef8:	00 
  403ef9:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403f00:	00 
  403f01:	e8 3a f3 ff ff       	call   403240 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  403f06:	48 8d bc 24 b0 01 00 	lea    0x1b0(%rsp),%rdi
  403f0d:	00 
  403f0e:	e8 3d f4 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
  403f13:	e9 cb f7 ff ff       	jmp    4036e3 <main.cold+0xc2>
      { return _M_dataplus._M_p; }
  403f18:	48 8b bc 24 00 1f 00 	mov    0x1f00(%rsp),%rdi
  403f1f:	00 
	if (!_M_is_local())
  403f20:	48 39 ef             	cmp    %rbp,%rdi
  403f23:	74 15                	je     403f3a <main.cold+0x919>
	::operator delete(__p
  403f25:	48 8b 84 24 10 1f 00 	mov    0x1f10(%rsp),%rax
  403f2c:	00 
  403f2d:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403f34:	00 
  403f35:	e8 06 f3 ff ff       	call   403240 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  403f3a:	48 8d bc 24 90 1d 00 	lea    0x1d90(%rsp),%rdi
  403f41:	00 
  403f42:	e8 09 f4 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
  403f47:	e9 b1 f7 ff ff       	jmp    4036fd <main.cold+0xdc>
      { return _M_dataplus._M_p; }
  403f4c:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  403f53:	00 
	if (!_M_is_local())
  403f54:	48 3b 3c 24          	cmp    (%rsp),%rdi
  403f58:	74 15                	je     403f6f <main.cold+0x94e>
	::operator delete(__p
  403f5a:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  403f61:	00 
  403f62:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403f69:	00 
  403f6a:	e8 d1 f2 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403f6f:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  403f76:	00 
	if (!_M_is_local())
  403f77:	4c 39 ff             	cmp    %r15,%rdi
  403f7a:	74 11                	je     403f8d <main.cold+0x96c>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403f7c:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  403f83:	00 
  403f84:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403f88:	e8 b3 f2 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403f8d:	48 8b bc 24 50 01 00 	mov    0x150(%rsp),%rdi
  403f94:	00 
	if (!_M_is_local())
  403f95:	48 8d 84 24 60 01 00 	lea    0x160(%rsp),%rax
  403f9c:	00 
  403f9d:	48 39 c7             	cmp    %rax,%rdi
  403fa0:	0f 84 42 fb ff ff    	je     403ae8 <main.cold+0x4c7>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403fa6:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  403fad:	00 
  403fae:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403fb2:	e8 89 f2 ff ff       	call   403240 <_ZdlPvm@plt>
  403fb7:	e9 2c fb ff ff       	jmp    403ae8 <main.cold+0x4c7>
      { return _M_dataplus._M_p; }
  403fbc:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  403fc3:	00 
	if (!_M_is_local())
  403fc4:	48 8d 84 24 a0 01 00 	lea    0x1a0(%rsp),%rax
  403fcb:	00 
  403fcc:	48 39 c7             	cmp    %rax,%rdi
  403fcf:	0f 84 4a fb ff ff    	je     403b1f <main.cold+0x4fe>
  403fd5:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  403fdc:	00 
  403fdd:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403fe4:	00 
  403fe5:	e8 56 f2 ff ff       	call   403240 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403fea:	e9 30 fb ff ff       	jmp    403b1f <main.cold+0x4fe>
      { return _M_dataplus._M_p; }
  403fef:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  403ff6:	00 
	if (!_M_is_local())
  403ff7:	48 3b 3c 24          	cmp    (%rsp),%rdi
  403ffb:	0f 84 f3 f9 ff ff    	je     4039f4 <main.cold+0x3d3>
  404001:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  404008:	00 
  404009:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  404010:	00 
  404011:	e8 2a f2 ff ff       	call   403240 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  404016:	e9 d9 f9 ff ff       	jmp    4039f4 <main.cold+0x3d3>
  40401b:	48 8d bc 24 b0 01 00 	lea    0x1b0(%rsp),%rdi
  404022:	00 
  404023:	e8 28 f3 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
  404028:	e9 9c f6 ff ff       	jmp    4036c9 <main.cold+0xa8>
      { return _M_dataplus._M_p; }
  40402d:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  404034:	00 
	if (!_M_is_local())
  404035:	48 8d 84 24 a0 01 00 	lea    0x1a0(%rsp),%rax
  40403c:	00 
  40403d:	48 39 c7             	cmp    %rax,%rdi
  404040:	0f 84 d9 fa ff ff    	je     403b1f <main.cold+0x4fe>
  404046:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  40404d:	00 
  40404e:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  404055:	00 
  404056:	e8 e5 f1 ff ff       	call   403240 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  40405b:	e9 bf fa ff ff       	jmp    403b1f <main.cold+0x4fe>

0000000000404060 <_GLOBAL__sub_I__Z17char_to_stringbitB5cxx11c>:
}
  404060:	48 83 ec 08          	sub    $0x8,%rsp
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  ///@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
  404064:	bf ad c4 40 00       	mov    $0x40c4ad,%edi
  404069:	e8 52 f3 ff ff       	call   4033c0 <_ZNSt8ios_base4InitC1Ev@plt>
  40406e:	ba 08 90 40 00       	mov    $0x409008,%edx
  404073:	be ad c4 40 00       	mov    $0x40c4ad,%esi
  404078:	bf 10 35 40 00       	mov    $0x403510,%edi
  40407d:	48 83 c4 08          	add    $0x8,%rsp
  404081:	e9 9a f1 ff ff       	jmp    403220 <__cxa_atexit@plt>
  404086:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  40408d:	00 00 00 

0000000000404090 <main>:
{
  404090:	41 57                	push   %r15
  404092:	41 56                	push   %r14
  404094:	41 55                	push   %r13
  404096:	41 54                	push   %r12
  404098:	55                   	push   %rbp
  404099:	53                   	push   %rbx
  40409a:	48 89 f3             	mov    %rsi,%rbx
  40409d:	48 81 ec 88 22 00 00 	sub    $0x2288,%rsp
	if(argc < 2){
  4040a4:	83 ff 01             	cmp    $0x1,%edi
  4040a7:	0f 8e b6 2a 00 00    	jle    406b63 <main+0x2ad3>
	if((fd = open(argv[1], O_RDWR)) < 0){
  4040ad:	48 8b 7e 08          	mov    0x8(%rsi),%rdi
  4040b1:	31 c0                	xor    %eax,%eax
  4040b3:	be 02 00 00 00       	mov    $0x2,%esi
  4040b8:	e8 f3 f0 ff ff       	call   4031b0 <open@plt>
  4040bd:	89 44 24 20          	mov    %eax,0x20(%rsp)
  4040c1:	85 c0                	test   %eax,%eax
  4040c3:	0f 88 73 2b 00 00    	js     406c3c <main+0x2bac>
	sf::VideoMode videomode(800, 600);
  4040c9:	ba 58 02 00 00       	mov    $0x258,%edx
  4040ce:	be 20 03 00 00       	mov    $0x320,%esi
  4040d3:	b9 20 00 00 00       	mov    $0x20,%ecx
  4040d8:	48 8d bc 24 94 00 00 	lea    0x94(%rsp),%rdi
  4040df:	00 
  4040e0:	e8 db f0 ff ff       	call   4031c0 <_ZN2sf9VideoModeC1Ejjj@plt>
    /// \param attributes   Attribute flags of the context
    /// \param sRgb         sRGB capable framebuffer
    ///
    ////////////////////////////////////////////////////////////
    explicit ContextSettings(unsigned int depth = 0, unsigned int stencil = 0, unsigned int antialiasing = 0, unsigned int major = 1, unsigned int minor = 1, unsigned int attributes = Default, bool sRgb = false) :
    depthBits        (depth),
  4040e5:	66 0f 6f 05 03 54 00 	movdqa 0x5403(%rip),%xmm0        # 4094f0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xf0>
  4040ec:	00 
    stencilBits      (stencil),
    antialiasingLevel(antialiasing),
    majorVersion     (major),
    minorVersion     (minor),
  4040ed:	48 8b 05 e4 53 00 00 	mov    0x53e4(%rip),%rax        # 4094d8 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xd8>
	sf::RenderWindow window(videomode, "Project IHS", sf::Style::Titlebar | sf::Style::Default); //close button and not resizable
  4040f4:	48 8d bc 24 20 1c 00 	lea    0x1c20(%rsp),%rdi
  4040fb:	00 
    attributeFlags   (attributes),
    sRgbCapable      (sRgb)
  4040fc:	c6 84 24 a8 1d 00 00 	movb   $0x0,0x1da8(%rsp)
  404103:	00 
    minorVersion     (minor),
  404104:	48 89 84 24 a0 1d 00 	mov    %rax,0x1da0(%rsp)
  40410b:	00 
    depthBits        (depth),
  40410c:	0f 29 84 24 90 1d 00 	movaps %xmm0,0x1d90(%rsp)
  404113:	00 
  404114:	e8 e7 f3 ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
  404119:	48 8d 94 24 20 1c 00 	lea    0x1c20(%rsp),%rdx
  404120:	00 
  404121:	be 9a 90 40 00       	mov    $0x40909a,%esi
  404126:	48 8d bc 24 00 1f 00 	lea    0x1f00(%rsp),%rdi
  40412d:	00 
  40412e:	e8 cd ef ff ff       	call   403100 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  404133:	48 8b b4 24 94 00 00 	mov    0x94(%rsp),%rsi
  40413a:	00 
  40413b:	8b 94 24 9c 00 00 00 	mov    0x9c(%rsp),%edx
  404142:	4c 8d 8c 24 90 1d 00 	lea    0x1d90(%rsp),%r9
  404149:	00 
  40414a:	41 b8 07 00 00 00    	mov    $0x7,%r8d
  404150:	48 8d 8c 24 00 1f 00 	lea    0x1f00(%rsp),%rcx
  404157:	00 
  404158:	48 8d bc 24 70 20 00 	lea    0x2070(%rsp),%rdi
  40415f:	00 
  404160:	e8 2b f2 ff ff       	call   403390 <_ZN2sf12RenderWindowC1ENS_9VideoModeERKNS_6StringEjRKNS_15ContextSettingsE@plt>
      { return _M_dataplus._M_p; }
  404165:	48 8b bc 24 00 1f 00 	mov    0x1f00(%rsp),%rdi
  40416c:	00 
	if (!_M_is_local())
  40416d:	48 8d ac 24 10 1f 00 	lea    0x1f10(%rsp),%rbp
  404174:	00 
  404175:	48 39 ef             	cmp    %rbp,%rdi
  404178:	74 15                	je     40418f <main+0xff>
  40417a:	48 8b 84 24 10 1f 00 	mov    0x1f10(%rsp),%rax
  404181:	00 
  404182:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  404189:	00 
  40418a:	e8 b1 f0 ff ff       	call   403240 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  40418f:	48 8d bc 24 20 1c 00 	lea    0x1c20(%rsp),%rdi
  404196:	00 
  404197:	e8 b4 f1 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
	sf::CircleShape square1(30, 4);
  40419c:	f3 0f 10 05 7c 53 00 	movss  0x537c(%rip),%xmm0        # 409520 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x120>
  4041a3:	00 
  4041a4:	be 04 00 00 00       	mov    $0x4,%esi
  4041a9:	48 8d bc 24 60 03 00 	lea    0x360(%rsp),%rdi
  4041b0:	00 
  4041b1:	e8 2a f0 ff ff       	call   4031e0 <_ZN2sf11CircleShapeC1Efm@plt>
	square1.setFillColor(sf::Color::Magenta);
  4041b6:	be 90 c4 40 00       	mov    $0x40c490,%esi
  4041bb:	48 8d bc 24 60 03 00 	lea    0x360(%rsp),%rdi
  4041c2:	00 
  4041c3:	e8 08 f3 ff ff       	call   4034d0 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square1.setPosition(20.f, 50.f);
  4041c8:	f3 0f 10 0d 54 53 00 	movss  0x5354(%rip),%xmm1        # 409524 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x124>
  4041cf:	00 
  4041d0:	f3 0f 10 05 50 53 00 	movss  0x5350(%rip),%xmm0        # 409528 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x128>
  4041d7:	00 
  4041d8:	48 8d bc 24 68 03 00 	lea    0x368(%rsp),%rdi
  4041df:	00 
  4041e0:	e8 6b ef ff ff       	call   403150 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square2(30, 4);
  4041e5:	f3 0f 10 05 33 53 00 	movss  0x5333(%rip),%xmm0        # 409520 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x120>
  4041ec:	00 
  4041ed:	be 04 00 00 00       	mov    $0x4,%esi
  4041f2:	48 8d bc 24 c0 04 00 	lea    0x4c0(%rsp),%rdi
  4041f9:	00 
  4041fa:	e8 e1 ef ff ff       	call   4031e0 <_ZN2sf11CircleShapeC1Efm@plt>
	square2.setFillColor(sf::Color::Magenta);
  4041ff:	be 90 c4 40 00       	mov    $0x40c490,%esi
  404204:	48 8d bc 24 c0 04 00 	lea    0x4c0(%rsp),%rdi
  40420b:	00 
  40420c:	e8 bf f2 ff ff       	call   4034d0 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square2.setPosition(100.f, 50.f);
  404211:	f3 0f 10 0d 0b 53 00 	movss  0x530b(%rip),%xmm1        # 409524 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x124>
  404218:	00 
  404219:	f3 0f 10 05 0b 53 00 	movss  0x530b(%rip),%xmm0        # 40952c <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x12c>
  404220:	00 
  404221:	48 8d bc 24 c8 04 00 	lea    0x4c8(%rsp),%rdi
  404228:	00 
  404229:	e8 22 ef ff ff       	call   403150 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square3(30, 4);
  40422e:	f3 0f 10 05 ea 52 00 	movss  0x52ea(%rip),%xmm0        # 409520 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x120>
  404235:	00 
  404236:	be 04 00 00 00       	mov    $0x4,%esi
  40423b:	48 8d bc 24 20 06 00 	lea    0x620(%rsp),%rdi
  404242:	00 
  404243:	e8 98 ef ff ff       	call   4031e0 <_ZN2sf11CircleShapeC1Efm@plt>
	square3.setFillColor(sf::Color::Blue);
  404248:	be a8 c4 40 00       	mov    $0x40c4a8,%esi
  40424d:	48 8d bc 24 20 06 00 	lea    0x620(%rsp),%rdi
  404254:	00 
  404255:	e8 76 f2 ff ff       	call   4034d0 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square3.setPosition(180.f, 50.f);
  40425a:	f3 0f 10 0d c2 52 00 	movss  0x52c2(%rip),%xmm1        # 409524 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x124>
  404261:	00 
  404262:	f3 0f 10 05 c6 52 00 	movss  0x52c6(%rip),%xmm0        # 409530 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  404269:	00 
  40426a:	48 8d bc 24 28 06 00 	lea    0x628(%rsp),%rdi
  404271:	00 
  404272:	e8 d9 ee ff ff       	call   403150 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square4(30, 4);
  404277:	f3 0f 10 05 a1 52 00 	movss  0x52a1(%rip),%xmm0        # 409520 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x120>
  40427e:	00 
  40427f:	be 04 00 00 00       	mov    $0x4,%esi
  404284:	48 8d bc 24 80 07 00 	lea    0x780(%rsp),%rdi
  40428b:	00 
  40428c:	e8 4f ef ff ff       	call   4031e0 <_ZN2sf11CircleShapeC1Efm@plt>
	square4.setFillColor(sf::Color::Magenta);
  404291:	be 90 c4 40 00       	mov    $0x40c490,%esi
  404296:	48 8d bc 24 80 07 00 	lea    0x780(%rsp),%rdi
  40429d:	00 
  40429e:	e8 2d f2 ff ff       	call   4034d0 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square4.setPosition(20.f, 120.f);
  4042a3:	f3 0f 10 0d 89 52 00 	movss  0x5289(%rip),%xmm1        # 409534 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x134>
  4042aa:	00 
  4042ab:	f3 0f 10 05 75 52 00 	movss  0x5275(%rip),%xmm0        # 409528 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x128>
  4042b2:	00 
  4042b3:	48 8d bc 24 88 07 00 	lea    0x788(%rsp),%rdi
  4042ba:	00 
  4042bb:	e8 90 ee ff ff       	call   403150 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square5(30, 4);
  4042c0:	f3 0f 10 05 58 52 00 	movss  0x5258(%rip),%xmm0        # 409520 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x120>
  4042c7:	00 
  4042c8:	be 04 00 00 00       	mov    $0x4,%esi
  4042cd:	48 8d bc 24 e0 08 00 	lea    0x8e0(%rsp),%rdi
  4042d4:	00 
  4042d5:	e8 06 ef ff ff       	call   4031e0 <_ZN2sf11CircleShapeC1Efm@plt>
	square5.setFillColor(sf::Color::Blue);
  4042da:	be a8 c4 40 00       	mov    $0x40c4a8,%esi
  4042df:	48 8d bc 24 e0 08 00 	lea    0x8e0(%rsp),%rdi
  4042e6:	00 
  4042e7:	e8 e4 f1 ff ff       	call   4034d0 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square5.setPosition(100.f, 120.f);
  4042ec:	f3 0f 10 0d 40 52 00 	movss  0x5240(%rip),%xmm1        # 409534 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x134>
  4042f3:	00 
  4042f4:	f3 0f 10 05 30 52 00 	movss  0x5230(%rip),%xmm0        # 40952c <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x12c>
  4042fb:	00 
  4042fc:	48 8d bc 24 e8 08 00 	lea    0x8e8(%rsp),%rdi
  404303:	00 
  404304:	e8 47 ee ff ff       	call   403150 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square6(30, 4);
  404309:	f3 0f 10 05 0f 52 00 	movss  0x520f(%rip),%xmm0        # 409520 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x120>
  404310:	00 
  404311:	be 04 00 00 00       	mov    $0x4,%esi
  404316:	48 8d bc 24 40 0a 00 	lea    0xa40(%rsp),%rdi
  40431d:	00 
  40431e:	e8 bd ee ff ff       	call   4031e0 <_ZN2sf11CircleShapeC1Efm@plt>
	square6.setFillColor(sf::Color::Magenta);
  404323:	be 90 c4 40 00       	mov    $0x40c490,%esi
  404328:	48 8d bc 24 40 0a 00 	lea    0xa40(%rsp),%rdi
  40432f:	00 
  404330:	e8 9b f1 ff ff       	call   4034d0 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square6.setPosition(180.f, 120.f);
  404335:	f3 0f 10 0d f7 51 00 	movss  0x51f7(%rip),%xmm1        # 409534 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x134>
  40433c:	00 
  40433d:	f3 0f 10 05 eb 51 00 	movss  0x51eb(%rip),%xmm0        # 409530 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  404344:	00 
  404345:	48 8d bc 24 48 0a 00 	lea    0xa48(%rsp),%rdi
  40434c:	00 
  40434d:	e8 fe ed ff ff       	call   403150 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square7(30, 4);
  404352:	f3 0f 10 05 c6 51 00 	movss  0x51c6(%rip),%xmm0        # 409520 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x120>
  404359:	00 
  40435a:	be 04 00 00 00       	mov    $0x4,%esi
  40435f:	48 8d bc 24 a0 0b 00 	lea    0xba0(%rsp),%rdi
  404366:	00 
  404367:	e8 74 ee ff ff       	call   4031e0 <_ZN2sf11CircleShapeC1Efm@plt>
	square7.setFillColor(sf::Color::Blue);
  40436c:	be a8 c4 40 00       	mov    $0x40c4a8,%esi
  404371:	48 8d bc 24 a0 0b 00 	lea    0xba0(%rsp),%rdi
  404378:	00 
  404379:	e8 52 f1 ff ff       	call   4034d0 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square7.setPosition(20.f, 190.f);
  40437e:	f3 0f 10 0d b2 51 00 	movss  0x51b2(%rip),%xmm1        # 409538 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x138>
  404385:	00 
  404386:	f3 0f 10 05 9a 51 00 	movss  0x519a(%rip),%xmm0        # 409528 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x128>
  40438d:	00 
  40438e:	48 8d bc 24 a8 0b 00 	lea    0xba8(%rsp),%rdi
  404395:	00 
  404396:	e8 b5 ed ff ff       	call   403150 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square8(30, 4);
  40439b:	f3 0f 10 05 7d 51 00 	movss  0x517d(%rip),%xmm0        # 409520 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x120>
  4043a2:	00 
  4043a3:	be 04 00 00 00       	mov    $0x4,%esi
  4043a8:	48 8d bc 24 00 0d 00 	lea    0xd00(%rsp),%rdi
  4043af:	00 
  4043b0:	e8 2b ee ff ff       	call   4031e0 <_ZN2sf11CircleShapeC1Efm@plt>
	square8.setFillColor(sf::Color::Magenta);
  4043b5:	be 90 c4 40 00       	mov    $0x40c490,%esi
  4043ba:	48 8d bc 24 00 0d 00 	lea    0xd00(%rsp),%rdi
  4043c1:	00 
  4043c2:	e8 09 f1 ff ff       	call   4034d0 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square8.setPosition(100.f, 190.f);
  4043c7:	f3 0f 10 0d 69 51 00 	movss  0x5169(%rip),%xmm1        # 409538 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x138>
  4043ce:	00 
  4043cf:	f3 0f 10 05 55 51 00 	movss  0x5155(%rip),%xmm0        # 40952c <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x12c>
  4043d6:	00 
  4043d7:	48 8d bc 24 08 0d 00 	lea    0xd08(%rsp),%rdi
  4043de:	00 
  4043df:	e8 6c ed ff ff       	call   403150 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square9(30, 4);
  4043e4:	f3 0f 10 05 34 51 00 	movss  0x5134(%rip),%xmm0        # 409520 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x120>
  4043eb:	00 
  4043ec:	be 04 00 00 00       	mov    $0x4,%esi
  4043f1:	48 8d bc 24 60 0e 00 	lea    0xe60(%rsp),%rdi
  4043f8:	00 
  4043f9:	e8 e2 ed ff ff       	call   4031e0 <_ZN2sf11CircleShapeC1Efm@plt>
	square9.setFillColor(sf::Color::Blue);
  4043fe:	be a8 c4 40 00       	mov    $0x40c4a8,%esi
  404403:	48 8d bc 24 60 0e 00 	lea    0xe60(%rsp),%rdi
  40440a:	00 
  40440b:	e8 c0 f0 ff ff       	call   4034d0 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square9.setPosition(180.f, 190.f);
  404410:	f3 0f 10 0d 20 51 00 	movss  0x5120(%rip),%xmm1        # 409538 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x138>
  404417:	00 
  404418:	f3 0f 10 05 10 51 00 	movss  0x5110(%rip),%xmm0        # 409530 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  40441f:	00 
  404420:	48 8d bc 24 68 0e 00 	lea    0xe68(%rsp),%rdi
  404427:	00 
  404428:	e8 23 ed ff ff       	call   403150 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square10(30, 4);
  40442d:	f3 0f 10 05 eb 50 00 	movss  0x50eb(%rip),%xmm0        # 409520 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x120>
  404434:	00 
  404435:	be 04 00 00 00       	mov    $0x4,%esi
  40443a:	48 8d bc 24 c0 0f 00 	lea    0xfc0(%rsp),%rdi
  404441:	00 
  404442:	e8 99 ed ff ff       	call   4031e0 <_ZN2sf11CircleShapeC1Efm@plt>
	square10.setFillColor(sf::Color::Magenta);
  404447:	be 90 c4 40 00       	mov    $0x40c490,%esi
  40444c:	48 8d bc 24 c0 0f 00 	lea    0xfc0(%rsp),%rdi
  404453:	00 
  404454:	e8 77 f0 ff ff       	call   4034d0 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square10.setPosition(20.f, 260.f);
  404459:	f3 0f 10 0d db 50 00 	movss  0x50db(%rip),%xmm1        # 40953c <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x13c>
  404460:	00 
  404461:	f3 0f 10 05 bf 50 00 	movss  0x50bf(%rip),%xmm0        # 409528 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x128>
  404468:	00 
  404469:	48 8d bc 24 c8 0f 00 	lea    0xfc8(%rsp),%rdi
  404470:	00 
  404471:	e8 da ec ff ff       	call   403150 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square11(30, 4);
  404476:	f3 0f 10 05 a2 50 00 	movss  0x50a2(%rip),%xmm0        # 409520 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x120>
  40447d:	00 
  40447e:	be 04 00 00 00       	mov    $0x4,%esi
  404483:	48 8d bc 24 20 11 00 	lea    0x1120(%rsp),%rdi
  40448a:	00 
  40448b:	e8 50 ed ff ff       	call   4031e0 <_ZN2sf11CircleShapeC1Efm@plt>
	square11.setFillColor(sf::Color::Magenta);
  404490:	be 90 c4 40 00       	mov    $0x40c490,%esi
  404495:	48 8d bc 24 20 11 00 	lea    0x1120(%rsp),%rdi
  40449c:	00 
  40449d:	e8 2e f0 ff ff       	call   4034d0 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square11.setPosition(100.f, 260.f);
  4044a2:	f3 0f 10 0d 92 50 00 	movss  0x5092(%rip),%xmm1        # 40953c <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x13c>
  4044a9:	00 
  4044aa:	f3 0f 10 05 7a 50 00 	movss  0x507a(%rip),%xmm0        # 40952c <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x12c>
  4044b1:	00 
  4044b2:	48 8d bc 24 28 11 00 	lea    0x1128(%rsp),%rdi
  4044b9:	00 
  4044ba:	e8 91 ec ff ff       	call   403150 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square12(30, 4);
  4044bf:	f3 0f 10 05 59 50 00 	movss  0x5059(%rip),%xmm0        # 409520 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x120>
  4044c6:	00 
  4044c7:	be 04 00 00 00       	mov    $0x4,%esi
  4044cc:	48 8d bc 24 80 12 00 	lea    0x1280(%rsp),%rdi
  4044d3:	00 
  4044d4:	e8 07 ed ff ff       	call   4031e0 <_ZN2sf11CircleShapeC1Efm@plt>
	square12.setFillColor(sf::Color::Magenta);
  4044d9:	be 90 c4 40 00       	mov    $0x40c490,%esi
  4044de:	48 8d bc 24 80 12 00 	lea    0x1280(%rsp),%rdi
  4044e5:	00 
  4044e6:	e8 e5 ef ff ff       	call   4034d0 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square12.setPosition(180.f, 260.f);
  4044eb:	f3 0f 10 0d 49 50 00 	movss  0x5049(%rip),%xmm1        # 40953c <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x13c>
  4044f2:	00 
  4044f3:	f3 0f 10 05 35 50 00 	movss  0x5035(%rip),%xmm0        # 409530 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  4044fa:	00 
  4044fb:	48 8d bc 24 88 12 00 	lea    0x1288(%rsp),%rdi
  404502:	00 
  404503:	e8 48 ec ff ff       	call   403150 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square13(30, 4);
  404508:	f3 0f 10 05 10 50 00 	movss  0x5010(%rip),%xmm0        # 409520 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x120>
  40450f:	00 
  404510:	be 04 00 00 00       	mov    $0x4,%esi
  404515:	48 8d bc 24 e0 13 00 	lea    0x13e0(%rsp),%rdi
  40451c:	00 
  40451d:	e8 be ec ff ff       	call   4031e0 <_ZN2sf11CircleShapeC1Efm@plt>
	square13.setFillColor(sf::Color::Magenta);
  404522:	be 90 c4 40 00       	mov    $0x40c490,%esi
  404527:	48 8d bc 24 e0 13 00 	lea    0x13e0(%rsp),%rdi
  40452e:	00 
  40452f:	e8 9c ef ff ff       	call   4034d0 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square13.setPosition(20.f, 330.f);
  404534:	f3 0f 10 0d 04 50 00 	movss  0x5004(%rip),%xmm1        # 409540 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x140>
  40453b:	00 
  40453c:	f3 0f 10 05 e4 4f 00 	movss  0x4fe4(%rip),%xmm0        # 409528 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x128>
  404543:	00 
  404544:	48 8d bc 24 e8 13 00 	lea    0x13e8(%rsp),%rdi
  40454b:	00 
  40454c:	e8 ff eb ff ff       	call   403150 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square14(30, 4);
  404551:	f3 0f 10 05 c7 4f 00 	movss  0x4fc7(%rip),%xmm0        # 409520 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x120>
  404558:	00 
  404559:	be 04 00 00 00       	mov    $0x4,%esi
  40455e:	48 8d bc 24 40 15 00 	lea    0x1540(%rsp),%rdi
  404565:	00 
  404566:	e8 75 ec ff ff       	call   4031e0 <_ZN2sf11CircleShapeC1Efm@plt>
	square14.setFillColor(sf::Color::Blue);
  40456b:	be a8 c4 40 00       	mov    $0x40c4a8,%esi
  404570:	48 8d bc 24 40 15 00 	lea    0x1540(%rsp),%rdi
  404577:	00 
  404578:	e8 53 ef ff ff       	call   4034d0 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square14.setPosition(100.f, 330.f);
  40457d:	f3 0f 10 0d bb 4f 00 	movss  0x4fbb(%rip),%xmm1        # 409540 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x140>
  404584:	00 
  404585:	f3 0f 10 05 9f 4f 00 	movss  0x4f9f(%rip),%xmm0        # 40952c <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x12c>
  40458c:	00 
  40458d:	48 8d bc 24 48 15 00 	lea    0x1548(%rsp),%rdi
  404594:	00 
  404595:	e8 b6 eb ff ff       	call   403150 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square15(30, 4);
  40459a:	f3 0f 10 05 7e 4f 00 	movss  0x4f7e(%rip),%xmm0        # 409520 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x120>
  4045a1:	00 
  4045a2:	be 04 00 00 00       	mov    $0x4,%esi
  4045a7:	48 8d bc 24 a0 16 00 	lea    0x16a0(%rsp),%rdi
  4045ae:	00 
  4045af:	e8 2c ec ff ff       	call   4031e0 <_ZN2sf11CircleShapeC1Efm@plt>
	square15.setFillColor(sf::Color::Magenta);
  4045b4:	be 90 c4 40 00       	mov    $0x40c490,%esi
  4045b9:	48 8d bc 24 a0 16 00 	lea    0x16a0(%rsp),%rdi
  4045c0:	00 
  4045c1:	e8 0a ef ff ff       	call   4034d0 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square15.setPosition(180.f, 330.f);
  4045c6:	f3 0f 10 0d 72 4f 00 	movss  0x4f72(%rip),%xmm1        # 409540 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x140>
  4045cd:	00 
  4045ce:	f3 0f 10 05 5a 4f 00 	movss  0x4f5a(%rip),%xmm0        # 409530 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  4045d5:	00 
  4045d6:	48 8d bc 24 a8 16 00 	lea    0x16a8(%rsp),%rdi
  4045dd:	00 
  4045de:	e8 6d eb ff ff       	call   403150 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square16(30, 4);
  4045e3:	f3 0f 10 05 35 4f 00 	movss  0x4f35(%rip),%xmm0        # 409520 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x120>
  4045ea:	00 
  4045eb:	be 04 00 00 00       	mov    $0x4,%esi
  4045f0:	48 8d bc 24 00 18 00 	lea    0x1800(%rsp),%rdi
  4045f7:	00 
  4045f8:	e8 e3 eb ff ff       	call   4031e0 <_ZN2sf11CircleShapeC1Efm@plt>
	square16.setFillColor(sf::Color::Blue);
  4045fd:	be a8 c4 40 00       	mov    $0x40c4a8,%esi
  404602:	48 8d bc 24 00 18 00 	lea    0x1800(%rsp),%rdi
  404609:	00 
  40460a:	e8 c1 ee ff ff       	call   4034d0 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square16.setPosition(20.f, 400.f);
  40460f:	f3 0f 10 0d 2d 4f 00 	movss  0x4f2d(%rip),%xmm1        # 409544 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x144>
  404616:	00 
  404617:	f3 0f 10 05 09 4f 00 	movss  0x4f09(%rip),%xmm0        # 409528 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x128>
  40461e:	00 
  40461f:	48 8d bc 24 08 18 00 	lea    0x1808(%rsp),%rdi
  404626:	00 
  404627:	e8 24 eb ff ff       	call   403150 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square17(30, 4);
  40462c:	f3 0f 10 05 ec 4e 00 	movss  0x4eec(%rip),%xmm0        # 409520 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x120>
  404633:	00 
  404634:	be 04 00 00 00       	mov    $0x4,%esi
  404639:	48 8d bc 24 60 19 00 	lea    0x1960(%rsp),%rdi
  404640:	00 
  404641:	e8 9a eb ff ff       	call   4031e0 <_ZN2sf11CircleShapeC1Efm@plt>
	square17.setFillColor(sf::Color::Magenta);
  404646:	be 90 c4 40 00       	mov    $0x40c490,%esi
  40464b:	48 8d bc 24 60 19 00 	lea    0x1960(%rsp),%rdi
  404652:	00 
  404653:	e8 78 ee ff ff       	call   4034d0 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square17.setPosition(100.f, 400.f);
  404658:	f3 0f 10 0d e4 4e 00 	movss  0x4ee4(%rip),%xmm1        # 409544 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x144>
  40465f:	00 
  404660:	f3 0f 10 05 c4 4e 00 	movss  0x4ec4(%rip),%xmm0        # 40952c <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x12c>
  404667:	00 
  404668:	48 8d bc 24 68 19 00 	lea    0x1968(%rsp),%rdi
  40466f:	00 
  404670:	e8 db ea ff ff       	call   403150 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square18(30, 4);
  404675:	f3 0f 10 05 a3 4e 00 	movss  0x4ea3(%rip),%xmm0        # 409520 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x120>
  40467c:	00 
  40467d:	be 04 00 00 00       	mov    $0x4,%esi
  404682:	48 8d bc 24 c0 1a 00 	lea    0x1ac0(%rsp),%rdi
  404689:	00 
  40468a:	e8 51 eb ff ff       	call   4031e0 <_ZN2sf11CircleShapeC1Efm@plt>
	square18.setFillColor(sf::Color::Blue);
  40468f:	be a8 c4 40 00       	mov    $0x40c4a8,%esi
  404694:	48 8d bc 24 c0 1a 00 	lea    0x1ac0(%rsp),%rdi
  40469b:	00 
  40469c:	e8 2f ee ff ff       	call   4034d0 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square18.setPosition(180.f, 400.f);
  4046a1:	f3 0f 10 0d 9b 4e 00 	movss  0x4e9b(%rip),%xmm1        # 409544 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x144>
  4046a8:	00 
  4046a9:	f3 0f 10 05 7f 4e 00 	movss  0x4e7f(%rip),%xmm0        # 409530 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  4046b0:	00 
  4046b1:	48 8d bc 24 c8 1a 00 	lea    0x1ac8(%rsp),%rdi
  4046b8:	00 
  4046b9:	e8 92 ea ff ff       	call   403150 <_ZN2sf13Transformable11setPositionEff@plt>
	window.setFramerateLimit(12);
  4046be:	be 0c 00 00 00       	mov    $0xc,%esi
  4046c3:	48 8d bc 24 70 20 00 	lea    0x2070(%rsp),%rdi
  4046ca:	00 
  4046cb:	e8 10 ec ff ff       	call   4032e0 <_ZN2sf6Window17setFramerateLimitEj@plt>
	sf::Font font;
  4046d0:	48 8d bc 24 00 02 00 	lea    0x200(%rsp),%rdi
  4046d7:	00 
  4046d8:	e8 e3 e9 ff ff       	call   4030c0 <_ZN2sf4FontC1Ev@plt>
	font.loadFromFile("/home/de2i-150/Desktop/Projeto-IHS/IHS-Project/ihs-project-layout/app/fonts/Hack-Regular.ttf");
  4046dd:	48 8d 94 24 90 1d 00 	lea    0x1d90(%rsp),%rdx
  4046e4:	00 
  4046e5:	be 18 92 40 00       	mov    $0x409218,%esi
  4046ea:	48 8d bc 24 00 1f 00 	lea    0x1f00(%rsp),%rdi
  4046f1:	00 
  4046f2:	e8 c9 38 00 00       	call   407fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
  4046f7:	48 8d b4 24 00 1f 00 	lea    0x1f00(%rsp),%rsi
  4046fe:	00 
  4046ff:	48 8d bc 24 00 02 00 	lea    0x200(%rsp),%rdi
  404706:	00 
  404707:	e8 24 eb ff ff       	call   403230 <_ZN2sf4Font12loadFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>
      { return _M_dataplus._M_p; }
  40470c:	48 8b bc 24 00 1f 00 	mov    0x1f00(%rsp),%rdi
  404713:	00 
	if (!_M_is_local())
  404714:	48 39 ef             	cmp    %rbp,%rdi
  404717:	74 11                	je     40472a <main+0x69a>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  404719:	48 8b 84 24 10 1f 00 	mov    0x1f10(%rsp),%rax
  404720:	00 
  404721:	48 8d 70 01          	lea    0x1(%rax),%rsi
	::operator delete(__p
  404725:	e8 16 eb ff ff       	call   403240 <_ZdlPvm@plt>
	sf::Text text("", font, 30);
  40472a:	48 8d bc 24 90 1d 00 	lea    0x1d90(%rsp),%rdi
  404731:	00 
  404732:	e8 c9 ed ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
  404737:	48 8d 94 24 90 1d 00 	lea    0x1d90(%rsp),%rdx
  40473e:	00 
  40473f:	be 25 91 40 00       	mov    $0x409125,%esi
  404744:	48 8d bc 24 00 1f 00 	lea    0x1f00(%rsp),%rdi
  40474b:	00 
  40474c:	e8 af e9 ff ff       	call   403100 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  404751:	b9 1e 00 00 00       	mov    $0x1e,%ecx
  404756:	48 8d 94 24 00 02 00 	lea    0x200(%rsp),%rdx
  40475d:	00 
  40475e:	48 8d b4 24 00 1f 00 	lea    0x1f00(%rsp),%rsi
  404765:	00 
  404766:	48 8d bc 24 20 1c 00 	lea    0x1c20(%rsp),%rdi
  40476d:	00 
  40476e:	e8 9d ea ff ff       	call   403210 <_ZN2sf4TextC1ERKNS_6StringERKNS_4FontEj@plt>
      { return _M_dataplus._M_p; }
  404773:	48 8b bc 24 00 1f 00 	mov    0x1f00(%rsp),%rdi
  40477a:	00 
	if (!_M_is_local())
  40477b:	48 39 ef             	cmp    %rbp,%rdi
  40477e:	74 15                	je     404795 <main+0x705>
  404780:	48 8b 84 24 10 1f 00 	mov    0x1f10(%rsp),%rax
  404787:	00 
  404788:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  40478f:	00 
  404790:	e8 ab ea ff ff       	call   403240 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  404795:	48 8d bc 24 90 1d 00 	lea    0x1d90(%rsp),%rdi
  40479c:	00 
  40479d:	e8 ae eb ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
	text.setFillColor(sf::Color(14, 107, 14));
  4047a2:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  4047a8:	b9 0e 00 00 00       	mov    $0xe,%ecx
  4047ad:	ba 6b 00 00 00       	mov    $0x6b,%edx
  4047b2:	be 0e 00 00 00       	mov    $0xe,%esi
  4047b7:	48 8d bc 24 00 1f 00 	lea    0x1f00(%rsp),%rdi
  4047be:	00 
  4047bf:	e8 4c e9 ff ff       	call   403110 <_ZN2sf5ColorC1Ehhhh@plt>
  4047c4:	48 8d b4 24 00 1f 00 	lea    0x1f00(%rsp),%rsi
  4047cb:	00 
  4047cc:	48 8d bc 24 20 1c 00 	lea    0x1c20(%rsp),%rdi
  4047d3:	00 
  4047d4:	e8 07 ed ff ff       	call   4034e0 <_ZN2sf4Text12setFillColorERKNS_5ColorE@plt>
	sf::Text timer_text;
  4047d9:	48 8d bc 24 90 1d 00 	lea    0x1d90(%rsp),%rdi
  4047e0:	00 
  4047e1:	e8 8a ea ff ff       	call   403270 <_ZN2sf4TextC1Ev@plt>
	timer_text.setFont(font);
  4047e6:	48 8d b4 24 00 02 00 	lea    0x200(%rsp),%rsi
  4047ed:	00 
  4047ee:	48 8d bc 24 90 1d 00 	lea    0x1d90(%rsp),%rdi
  4047f5:	00 
  4047f6:	e8 f5 ea ff ff       	call   4032f0 <_ZN2sf4Text7setFontERKNS_4FontE@plt>
	timer_text.setPosition(200, 200);
  4047fb:	f3 0f 10 0d 45 4d 00 	movss  0x4d45(%rip),%xmm1        # 409548 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x148>
  404802:	00 
  404803:	48 8d bc 24 98 1d 00 	lea    0x1d98(%rsp),%rdi
  40480a:	00 
  40480b:	0f 28 c1             	movaps %xmm1,%xmm0
  40480e:	e8 3d e9 ff ff       	call   403150 <_ZN2sf13Transformable11setPositionEff@plt>
	timer_text.setCharacterSize(30);
  404813:	be 1e 00 00 00       	mov    $0x1e,%esi
  404818:	48 8d bc 24 90 1d 00 	lea    0x1d90(%rsp),%rdi
  40481f:	00 
  404820:	e8 0b eb ff ff       	call   403330 <_ZN2sf4Text16setCharacterSizeEj@plt>
	timer_text.setFillColor(sf::Color::White);
  404825:	be c0 c2 40 00       	mov    $0x40c2c0,%esi
  40482a:	48 8d bc 24 90 1d 00 	lea    0x1d90(%rsp),%rdi
  404831:	00 
  404832:	e8 a9 ec ff ff       	call   4034e0 <_ZN2sf4Text12setFillColorERKNS_5ColorE@plt>
	sf::Text challenge1_text("", font, 30);
  404837:	48 8d bc 24 b0 01 00 	lea    0x1b0(%rsp),%rdi
  40483e:	00 
  40483f:	e8 bc ec ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
  404844:	48 8d 94 24 b0 01 00 	lea    0x1b0(%rsp),%rdx
  40484b:	00 
  40484c:	be 25 91 40 00       	mov    $0x409125,%esi
  404851:	48 8d bc 24 90 02 00 	lea    0x290(%rsp),%rdi
  404858:	00 
  404859:	e8 a2 e8 ff ff       	call   403100 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  40485e:	b9 1e 00 00 00       	mov    $0x1e,%ecx
  404863:	48 8d 94 24 00 02 00 	lea    0x200(%rsp),%rdx
  40486a:	00 
  40486b:	48 8d b4 24 90 02 00 	lea    0x290(%rsp),%rsi
  404872:	00 
  404873:	48 8d bc 24 00 1f 00 	lea    0x1f00(%rsp),%rdi
  40487a:	00 
  40487b:	e8 90 e9 ff ff       	call   403210 <_ZN2sf4TextC1ERKNS_6StringERKNS_4FontEj@plt>
      { return _M_dataplus._M_p; }
  404880:	48 8b bc 24 90 02 00 	mov    0x290(%rsp),%rdi
  404887:	00 
	if (!_M_is_local())
  404888:	48 8d 84 24 a0 02 00 	lea    0x2a0(%rsp),%rax
  40488f:	00 
  404890:	48 39 c7             	cmp    %rax,%rdi
  404893:	74 15                	je     4048aa <main+0x81a>
	::operator delete(__p
  404895:	48 8b 84 24 a0 02 00 	mov    0x2a0(%rsp),%rax
  40489c:	00 
  40489d:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4048a4:	00 
  4048a5:	e8 96 e9 ff ff       	call   403240 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  4048aa:	48 8d bc 24 b0 01 00 	lea    0x1b0(%rsp),%rdi
  4048b1:	00 
  4048b2:	e8 99 ea ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
	challenge1_text.setFillColor(sf::Color(14, 107, 14));
  4048b7:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  4048bd:	b9 0e 00 00 00       	mov    $0xe,%ecx
  4048c2:	ba 6b 00 00 00       	mov    $0x6b,%edx
  4048c7:	be 0e 00 00 00       	mov    $0xe,%esi
  4048cc:	48 8d bc 24 90 02 00 	lea    0x290(%rsp),%rdi
  4048d3:	00 
  4048d4:	e8 37 e8 ff ff       	call   403110 <_ZN2sf5ColorC1Ehhhh@plt>
  4048d9:	48 8d b4 24 90 02 00 	lea    0x290(%rsp),%rsi
  4048e0:	00 
  4048e1:	48 8d bc 24 00 1f 00 	lea    0x1f00(%rsp),%rdi
  4048e8:	00 
  4048e9:	e8 f2 eb ff ff       	call   4034e0 <_ZN2sf4Text12setFillColorERKNS_5ColorE@plt>
	sf::Music typing;
  4048ee:	48 8d bc 24 90 02 00 	lea    0x290(%rsp),%rdi
  4048f5:	00 
  4048f6:	e8 75 e7 ff ff       	call   403070 <_ZN2sf5MusicC1Ev@plt>
	if (!typing.openFromFile("/home/de2i-150/Desktop/Projeto-IHS/IHS-Project/ihs-project-layout/app/assets/sounds/typing.ogg"))
  4048fb:	48 8d 94 24 90 01 00 	lea    0x190(%rsp),%rdx
  404902:	00 
  404903:	be 78 92 40 00       	mov    $0x409278,%esi
  404908:	48 8d bc 24 b0 01 00 	lea    0x1b0(%rsp),%rdi
  40490f:	00 
  404910:	e8 ab 36 00 00       	call   407fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
  404915:	48 8d b4 24 b0 01 00 	lea    0x1b0(%rsp),%rsi
  40491c:	00 
  40491d:	48 8d bc 24 90 02 00 	lea    0x290(%rsp),%rdi
  404924:	00 
  404925:	e8 66 e7 ff ff       	call   403090 <_ZN2sf5Music12openFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>
      { return _M_dataplus._M_p; }
  40492a:	48 8b bc 24 b0 01 00 	mov    0x1b0(%rsp),%rdi
  404931:	00 
  404932:	89 c3                	mov    %eax,%ebx
	if (!_M_is_local())
  404934:	48 8d 84 24 c0 01 00 	lea    0x1c0(%rsp),%rax
  40493b:	00 
  40493c:	48 39 c7             	cmp    %rax,%rdi
  40493f:	74 11                	je     404952 <main+0x8c2>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  404941:	48 8b 84 24 c0 01 00 	mov    0x1c0(%rsp),%rax
  404948:	00 
  404949:	48 8d 70 01          	lea    0x1(%rax),%rsi
	::operator delete(__p
  40494d:	e8 ee e8 ff ff       	call   403240 <_ZdlPvm@plt>
  404952:	84 db                	test   %bl,%bl
  404954:	0f 84 5a 1c 00 00    	je     4065b4 <main+0x2524>
	sf::String typedtext = "Ola, vejo que voce encontrou minha caixa...\n\nEspero (ou nao) que voce consiga completar\nos desafios que preparei para hoje.\n\nMas cuidado com o tempo e tente nao perder\na cabeca!!\n\nASS ?";
  40495a:	48 8d bc 24 b0 01 00 	lea    0x1b0(%rsp),%rdi
  404961:	00 
  404962:	e8 99 eb ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
  404967:	48 8d 94 24 b0 01 00 	lea    0x1b0(%rsp),%rdx
  40496e:	00 
  40496f:	be f8 92 40 00       	mov    $0x4092f8,%esi
  404974:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  40497b:	00 
  40497c:	e8 7f e7 ff ff       	call   403100 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  404981:	48 8d bc 24 b0 01 00 	lea    0x1b0(%rsp),%rdi
  404988:	00 
  404989:	e8 c2 e9 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
	sf::String challenge1_string = "Voce deveria saber matematica";
  40498e:	48 8d bc 24 b0 01 00 	lea    0x1b0(%rsp),%rdi
  404995:	00 
  404996:	e8 65 eb ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
  40499b:	48 8d 94 24 b0 01 00 	lea    0x1b0(%rsp),%rdx
  4049a2:	00 
  4049a3:	be a6 90 40 00       	mov    $0x4090a6,%esi
  4049a8:	48 8d bc 24 f0 00 00 	lea    0xf0(%rsp),%rdi
  4049af:	00 
  4049b0:	e8 4b e7 ff ff       	call   403100 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  4049b5:	48 8d bc 24 b0 01 00 	lea    0x1b0(%rsp),%rdi
  4049bc:	00 
  4049bd:	e8 8e e9 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
	sf::Clock clock_text;
  4049c2:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  4049c7:	e8 54 e9 ff ff       	call   403320 <_ZN2sf5ClockC1Ev@plt>
	sf::Time elapsedtime_text;
  4049cc:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  4049d1:	e8 7a e6 ff ff       	call   403050 <_ZN2sf4TimeC1Ev@plt>
	sf::Clock temp_clock;
  4049d6:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  4049db:	e8 40 e9 ff ff       	call   403320 <_ZN2sf5ClockC1Ev@plt>
	sf::Time temp_time;
  4049e0:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  4049e5:	e8 66 e6 ff ff       	call   403050 <_ZN2sf4TimeC1Ev@plt>
	sf::Clock clock_bomb;
  4049ea:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  4049ef:	e8 2c e9 ff ff       	call   403320 <_ZN2sf5ClockC1Ev@plt>
	sf::Time time_bomb;
  4049f4:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  4049fb:	00 
  4049fc:	e8 4f e6 ff ff       	call   403050 <_ZN2sf4TimeC1Ev@plt>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  404a01:	48 8d 84 24 20 01 00 	lea    0x120(%rsp),%rax
  404a08:	00 
      { _M_string_length = __length; }
  404a09:	48 c7 84 24 18 01 00 	movq   $0x0,0x118(%rsp)
  404a10:	00 00 00 00 00 
	unsigned int oldSwitches = 0x0AA15;
  404a15:	bb 15 aa 00 00       	mov    $0xaa15,%ebx
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  404a1a:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  404a21:	00 
  404a22:	48 8d 84 24 40 01 00 	lea    0x140(%rsp),%rax
  404a29:	00 
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { __c1 = __c2; }
  404a2a:	c6 84 24 20 01 00 00 	movb   $0x0,0x120(%rsp)
  404a31:	00 
  404a32:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
  404a39:	00 
      { _M_string_length = __length; }
  404a3a:	48 c7 84 24 38 01 00 	movq   $0x0,0x138(%rsp)
  404a41:	00 00 00 00 00 
  404a46:	c6 84 24 40 01 00 00 	movb   $0x0,0x140(%rsp)
  404a4d:	00 
	int flag = 1;
  404a4e:	c7 44 24 38 01 00 00 	movl   $0x1,0x38(%rsp)
  404a55:	00 
	unsigned int switches = 0x00000;
  404a56:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%rsp)
  404a5d:	00 
	int screen = 0;
  404a5e:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%rsp)
  404a65:	00 
  404a66:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  404a6d:	00 00 00 
	while (window.isOpen())
  404a70:	48 8d bc 24 70 20 00 	lea    0x2070(%rsp),%rdi
  404a77:	00 
  404a78:	e8 e3 e7 ff ff       	call   403260 <_ZNK2sf6Window6isOpenEv@plt>
  404a7d:	84 c0                	test   %al,%al
  404a7f:	75 1e                	jne    404a9f <main+0xa0f>
  404a81:	e9 c5 17 00 00       	jmp    40624b <main+0x21bb>
  404a86:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  404a8d:	00 00 00 
			if (event.type == sf::Event::Closed)
  404a90:	8b 94 24 b0 00 00 00 	mov    0xb0(%rsp),%edx
  404a97:	85 d2                	test   %edx,%edx
  404a99:	0f 84 b1 02 00 00    	je     404d50 <main+0xcc0>
		while (window.pollEvent(event))
  404a9f:	48 8d b4 24 b0 00 00 	lea    0xb0(%rsp),%rsi
  404aa6:	00 
  404aa7:	48 8d bc 24 70 20 00 	lea    0x2070(%rsp),%rdi
  404aae:	00 
  404aaf:	e8 4c e7 ff ff       	call   403200 <_ZN2sf6Window9pollEventERNS_5EventE@plt>
  404ab4:	84 c0                	test   %al,%al
  404ab6:	75 d8                	jne    404a90 <main+0xa00>
		window.clear();
  404ab8:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  404abe:	31 c9                	xor    %ecx,%ecx
  404ac0:	31 d2                	xor    %edx,%edx
  404ac2:	31 f6                	xor    %esi,%esi
  404ac4:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  404acb:	00 
  404acc:	e8 3f e6 ff ff       	call   403110 <_ZN2sf5ColorC1Ehhhh@plt>
  404ad1:	48 8d b4 24 90 01 00 	lea    0x190(%rsp),%rsi
  404ad8:	00 
  404ad9:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  404ae0:	00 
  404ae1:	e8 ba e6 ff ff       	call   4031a0 <_ZN2sf12RenderTarget5clearERKNS_5ColorE@plt>
		if(screen == 0){
  404ae6:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  404aea:	85 c0                	test   %eax,%eax
  404aec:	0f 84 7e 0c 00 00    	je     405770 <main+0x16e0>
		if (screen != 1 && screen != 6)
  404af2:	83 f8 01             	cmp    $0x1,%eax
  404af5:	0f 84 3e 02 00 00    	je     404d39 <main+0xca9>
  404afb:	83 f8 06             	cmp    $0x6,%eax
  404afe:	0f 84 35 02 00 00    	je     404d39 <main+0xca9>
			time_bomb = clock_bomb.getElapsedTime();
  404b04:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  404b09:	e8 d2 e8 ff ff       	call   4033e0 <_ZNK2sf5Clock14getElapsedTimeEv@plt>
			seconds = 300 - time_bomb.asSeconds();
  404b0e:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  404b15:	00 
			time_bomb = clock_bomb.getElapsedTime();
  404b16:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  404b1d:	00 
			seconds = 300 - time_bomb.asSeconds();
  404b1e:	e8 4d e9 ff ff       	call   403470 <_ZNK2sf4Time9asSecondsEv@plt>
  404b23:	0f 28 c8             	movaps %xmm0,%xmm1
  404b26:	f3 0f 10 05 1e 4a 00 	movss  0x4a1e(%rip),%xmm0        # 40954c <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x14c>
  404b2d:	00 
			int_to_string(fd, seconds, min_string, sec_string);
  404b2e:	8b 7c 24 20          	mov    0x20(%rsp),%edi
  404b32:	48 8d 8c 24 10 01 00 	lea    0x110(%rsp),%rcx
  404b39:	00 
  404b3a:	48 8d 94 24 30 01 00 	lea    0x130(%rsp),%rdx
  404b41:	00 
			seconds = 300 - time_bomb.asSeconds();
  404b42:	f3 0f 5c c1          	subss  %xmm1,%xmm0
  404b46:	f3 48 0f 2c c0       	cvttss2si %xmm0,%rax
  404b4b:	89 c6                	mov    %eax,%esi
  404b4d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
			int_to_string(fd, seconds, min_string, sec_string);
  404b52:	e8 69 2b 00 00       	call   4076c0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
			timer_text.setString(min_string + ":" + sec_string);
  404b57:	48 8d ac 24 a0 00 00 	lea    0xa0(%rsp),%rbp
  404b5e:	00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  404b5f:	4c 8d b4 24 60 01 00 	lea    0x160(%rsp),%r14
  404b66:	00 
  404b67:	48 89 ef             	mov    %rbp,%rdi
  404b6a:	e8 91 e9 ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
      { return _M_dataplus._M_p; }
  404b6f:	4c 8b ac 24 30 01 00 	mov    0x130(%rsp),%r13
  404b76:	00 

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      length() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
  404b77:	4c 8b a4 24 38 01 00 	mov    0x138(%rsp),%r12
  404b7e:	00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  404b7f:	4c 89 b4 24 50 01 00 	mov    %r14,0x150(%rsp)
  404b86:	00 
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
  404b87:	4c 89 e8             	mov    %r13,%rax
  404b8a:	4c 01 e0             	add    %r12,%rax
  404b8d:	74 09                	je     404b98 <main+0xb08>
  404b8f:	4d 85 ed             	test   %r13,%r13
  404b92:	0f 84 a8 21 00 00    	je     406d40 <main+0x2cb0>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
  404b98:	4c 89 a4 24 90 01 00 	mov    %r12,0x190(%rsp)
  404b9f:	00 

	if (__dnew > size_type(_S_local_capacity))
  404ba0:	49 83 fc 0f          	cmp    $0xf,%r12
  404ba4:	0f 87 65 1f 00 00    	ja     406b0f <main+0x2a7f>
	if (__n == 1)
  404baa:	49 83 fc 01          	cmp    $0x1,%r12
  404bae:	0f 85 82 19 00 00    	jne    406536 <main+0x24a6>
  404bb4:	41 0f b6 45 00       	movzbl 0x0(%r13),%eax
  404bb9:	88 84 24 60 01 00 00 	mov    %al,0x160(%rsp)
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
  404bc0:	48 8b 84 24 90 01 00 	mov    0x190(%rsp),%rax
  404bc7:	00 
  404bc8:	48 8b 94 24 50 01 00 	mov    0x150(%rsp),%rdx
  404bcf:	00 
      { _M_string_length = __length; }
  404bd0:	48 89 84 24 58 01 00 	mov    %rax,0x158(%rsp)
  404bd7:	00 
  404bd8:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
	if (this->max_size() - (this->size() - __n1) < __n2)
  404bdc:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
  404be3:	ff ff 3f 
  404be6:	48 39 84 24 58 01 00 	cmp    %rax,0x158(%rsp)
  404bed:	00 
  404bee:	0f 84 5b 21 00 00    	je     406d4f <main+0x2cbf>
      append(const _CharT* __s)
      {
	__glibcxx_requires_string(__s);
	const size_type __n = traits_type::length(__s);
	_M_check_length(size_type(0), __n, "basic_string::append");
	return _M_append(__s, __n);
  404bf4:	4c 8d a4 24 50 01 00 	lea    0x150(%rsp),%r12
  404bfb:	00 
  404bfc:	ba 01 00 00 00       	mov    $0x1,%edx
  404c01:	be d9 90 40 00       	mov    $0x4090d9,%esi
  404c06:	4c 89 e7             	mov    %r12,%rdi
  404c09:	e8 92 e4 ff ff       	call   4030a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
      { return _M_append(__str._M_data(), __str.size()); }
  404c0e:	48 8b 94 24 18 01 00 	mov    0x118(%rsp),%rdx
  404c15:	00 
  404c16:	48 8b b4 24 10 01 00 	mov    0x110(%rsp),%rsi
  404c1d:	00 
  404c1e:	4c 89 e7             	mov    %r12,%rdi
  404c21:	e8 7a e4 ff ff       	call   4030a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  404c26:	4c 8d bc 24 80 01 00 	lea    0x180(%rsp),%r15
  404c2d:	00 
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  404c2e:	48 8d 50 10          	lea    0x10(%rax),%rdx
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  404c32:	4c 89 bc 24 70 01 00 	mov    %r15,0x170(%rsp)
  404c39:	00 
      { return _M_dataplus._M_p; }
  404c3a:	48 8b 08             	mov    (%rax),%rcx
	if (__str._M_is_local())
  404c3d:	48 39 d1             	cmp    %rdx,%rcx
  404c40:	0f 84 0b 1f 00 00    	je     406b51 <main+0x2ac1>
      { _M_dataplus._M_p = __p; }
  404c46:	48 89 8c 24 70 01 00 	mov    %rcx,0x170(%rsp)
  404c4d:	00 
	    _M_capacity(__str._M_allocated_capacity);
  404c4e:	48 8b 48 10          	mov    0x10(%rax),%rcx
      { _M_allocated_capacity = __capacity; }
  404c52:	48 89 8c 24 80 01 00 	mov    %rcx,0x180(%rsp)
  404c59:	00 
      { return _M_string_length; }
  404c5a:	48 8b 48 08          	mov    0x8(%rax),%rcx
  404c5e:	4c 8d ac 24 70 01 00 	lea    0x170(%rsp),%r13
  404c65:	00 
  404c66:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  404c6d:	00 
  404c6e:	4c 89 ee             	mov    %r13,%rsi
      { _M_string_length = __length; }
  404c71:	48 89 8c 24 78 01 00 	mov    %rcx,0x178(%rsp)
  404c78:	00 
      { _M_dataplus._M_p = __p; }
  404c79:	48 89 10             	mov    %rdx,(%rax)
  404c7c:	48 89 ea             	mov    %rbp,%rdx
      { _M_string_length = __length; }
  404c7f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  404c86:	00 
  404c87:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  404c8b:	e8 20 e4 ff ff       	call   4030b0 <_ZN2sf6StringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6locale@plt>
  404c90:	48 8d b4 24 90 01 00 	lea    0x190(%rsp),%rsi
  404c97:	00 
  404c98:	48 8d bc 24 90 1d 00 	lea    0x1d90(%rsp),%rdi
  404c9f:	00 
  404ca0:	e8 fb e7 ff ff       	call   4034a0 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  404ca5:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  404cac:	00 
	if (!_M_is_local())
  404cad:	48 8d 84 24 a0 01 00 	lea    0x1a0(%rsp),%rax
  404cb4:	00 
  404cb5:	48 89 04 24          	mov    %rax,(%rsp)
  404cb9:	48 39 c7             	cmp    %rax,%rdi
  404cbc:	74 15                	je     404cd3 <main+0xc43>
  404cbe:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  404cc5:	00 
  404cc6:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  404ccd:	00 
  404cce:	e8 6d e5 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  404cd3:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  404cda:	00 
	if (!_M_is_local())
  404cdb:	4c 39 ff             	cmp    %r15,%rdi
  404cde:	74 11                	je     404cf1 <main+0xc61>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  404ce0:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  404ce7:	00 
  404ce8:	48 8d 70 01          	lea    0x1(%rax),%rsi
  404cec:	e8 4f e5 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  404cf1:	48 8b bc 24 50 01 00 	mov    0x150(%rsp),%rdi
  404cf8:	00 
	if (!_M_is_local())
  404cf9:	4c 39 f7             	cmp    %r14,%rdi
  404cfc:	74 11                	je     404d0f <main+0xc7f>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  404cfe:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  404d05:	00 
  404d06:	48 8d 70 01          	lea    0x1(%rax),%rsi
  404d0a:	e8 31 e5 ff ff       	call   403240 <_ZdlPvm@plt>
  404d0f:	48 89 ef             	mov    %rbp,%rdi
  404d12:	e8 39 e6 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
			window.draw(timer_text);
  404d17:	ba e0 c2 40 00       	mov    $0x40c2e0,%edx
  404d1c:	48 8d b4 24 90 1d 00 	lea    0x1d90(%rsp),%rsi
  404d23:	00 
  404d24:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  404d2b:	00 
  404d2c:	e8 ff e6 ff ff       	call   403430 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
			if (seconds <= 0)
  404d31:	8b 44 24 28          	mov    0x28(%rsp),%eax
  404d35:	85 c0                	test   %eax,%eax
  404d37:	74 29                	je     404d62 <main+0xcd2>
		switch (screen) {
  404d39:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  404d3d:	83 f8 06             	cmp    $0x6,%eax
  404d40:	0f 87 74 01 00 00    	ja     404eba <main+0xe2a>
  404d46:	ff 24 c5 90 91 40 00 	jmp    *0x409190(,%rax,8)
  404d4d:	0f 1f 00             	nopl   (%rax)
				window.close();
  404d50:	48 8d bc 24 70 20 00 	lea    0x2070(%rsp),%rdi
  404d57:	00 
  404d58:	e8 93 e7 ff ff       	call   4034f0 <_ZN2sf6Window5closeEv@plt>
  404d5d:	e9 3d fd ff ff       	jmp    404a9f <main+0xa0f>
				text.setString("");
  404d62:	4c 89 ef             	mov    %r13,%rdi
  404d65:	e8 96 e7 ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
  404d6a:	4c 89 ea             	mov    %r13,%rdx
  404d6d:	be 25 91 40 00       	mov    $0x409125,%esi
  404d72:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  404d79:	00 
  404d7a:	e8 81 e3 ff ff       	call   403100 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  404d7f:	48 8d b4 24 90 01 00 	lea    0x190(%rsp),%rsi
  404d86:	00 
  404d87:	48 8d bc 24 20 1c 00 	lea    0x1c20(%rsp),%rdi
  404d8e:	00 
  404d8f:	e8 0c e7 ff ff       	call   4034a0 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  404d94:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  404d9b:	00 
	if (!_M_is_local())
  404d9c:	48 3b 3c 24          	cmp    (%rsp),%rdi
  404da0:	74 15                	je     404db7 <main+0xd27>
  404da2:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  404da9:	00 
  404daa:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  404db1:	00 
  404db2:	e8 89 e4 ff ff       	call   403240 <_ZdlPvm@plt>
  404db7:	4c 89 ef             	mov    %r13,%rdi
  404dba:	e8 91 e5 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
				typedtext.insert(0, "BOOM!!!");
  404dbf:	4c 89 ef             	mov    %r13,%rdi
  404dc2:	e8 39 e7 ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
  404dc7:	4c 89 ea             	mov    %r13,%rdx
  404dca:	be db 90 40 00       	mov    $0x4090db,%esi
  404dcf:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  404dd6:	00 
  404dd7:	e8 24 e3 ff ff       	call   403100 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  404ddc:	48 8d 94 24 90 01 00 	lea    0x190(%rsp),%rdx
  404de3:	00 
  404de4:	31 f6                	xor    %esi,%esi
  404de6:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  404ded:	00 
  404dee:	e8 dd e3 ff ff       	call   4031d0 <_ZN2sf6String6insertEmRKS0_@plt>
      { return _M_dataplus._M_p; }
  404df3:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  404dfa:	00 
	if (!_M_is_local())
  404dfb:	48 3b 3c 24          	cmp    (%rsp),%rdi
  404dff:	74 15                	je     404e16 <main+0xd86>
  404e01:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  404e08:	00 
  404e09:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  404e10:	00 
  404e11:	e8 2a e4 ff ff       	call   403240 <_ZdlPvm@plt>
  404e16:	4c 89 ef             	mov    %r13,%rdi
  404e19:	e8 32 e5 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
				clock_text.restart();
  404e1e:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  404e23:	e8 e8 e5 ff ff       	call   403410 <_ZN2sf5Clock7restartEv@plt>
				elapsedtime_text += clock_text.restart();
  404e28:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  404e2d:	e8 de e5 ff ff       	call   403410 <_ZN2sf5Clock7restartEv@plt>
  404e32:	48 89 c6             	mov    %rax,%rsi
  404e35:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  404e3a:	e8 c1 e5 ff ff       	call   403400 <_ZN2sfpLERNS_4TimeES0_@plt>
  404e3f:	44 8b 2d 12 47 00 00 	mov    0x4712(%rip),%r13d        # 409558 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x158>
  404e46:	eb 35                	jmp    404e7d <main+0xded>
  404e48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  404e4f:	00 
					elapsedtime_text -= sf::seconds(.1f);
  404e50:	66 41 0f 6e c5       	movd   %r13d,%xmm0
  404e55:	e8 16 e3 ff ff       	call   403170 <_ZN2sf7secondsEf@plt>
  404e5a:	48 89 c6             	mov    %rax,%rsi
  404e5d:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  404e62:	e8 d9 e5 ff ff       	call   403440 <_ZN2sfmIERNS_4TimeES0_@plt>
					if (typedtext.getSize() > 0)
  404e67:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  404e6e:	00 
  404e6f:	e8 3c e5 ff ff       	call   4033b0 <_ZNK2sf6String7getSizeEv@plt>
  404e74:	48 85 c0             	test   %rax,%rax
  404e77:	0f 85 f8 0c 00 00    	jne    405b75 <main+0x1ae5>
				while (elapsedtime_text >= sf::seconds(.1f))
  404e7d:	66 41 0f 6e c5       	movd   %r13d,%xmm0
  404e82:	e8 e9 e2 ff ff       	call   403170 <_ZN2sf7secondsEf@plt>
  404e87:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  404e8c:	48 89 c6             	mov    %rax,%rsi
  404e8f:	e8 3c e4 ff ff       	call   4032d0 <_ZN2sfgeENS_4TimeES0_@plt>
  404e94:	84 c0                	test   %al,%al
  404e96:	75 b8                	jne    404e50 <main+0xdc0>
				window.draw(text);
  404e98:	ba e0 c2 40 00       	mov    $0x40c2e0,%edx
  404e9d:	48 8d b4 24 20 1c 00 	lea    0x1c20(%rsp),%rsi
  404ea4:	00 
  404ea5:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  404eac:	00 
  404ead:	e8 7e e5 ff ff       	call   403430 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
  404eb2:	c7 44 24 1c 06 00 00 	movl   $0x6,0x1c(%rsp)
  404eb9:	00 
		window.display();
  404eba:	48 8d bc 24 70 20 00 	lea    0x2070(%rsp),%rdi
  404ec1:	00 
  404ec2:	e8 49 e4 ff ff       	call   403310 <_ZN2sf6Window7displayEv@plt>
  404ec7:	e9 a4 fb ff ff       	jmp    404a70 <main+0x9e0>
				elapsedtime_text += clock_text.restart();
  404ecc:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  404ed1:	e8 3a e5 ff ff       	call   403410 <_ZN2sf5Clock7restartEv@plt>
  404ed6:	48 89 c6             	mov    %rax,%rsi
  404ed9:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  404ede:	e8 1d e5 ff ff       	call   403400 <_ZN2sfpLERNS_4TimeES0_@plt>
  404ee3:	44 8b 2d 6e 46 00 00 	mov    0x466e(%rip),%r13d        # 409558 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x158>
  404eea:	eb 31                	jmp    404f1d <main+0xe8d>
  404eec:	0f 1f 40 00          	nopl   0x0(%rax)
					elapsedtime_text -= sf::seconds(.1f);
  404ef0:	66 41 0f 6e c5       	movd   %r13d,%xmm0
  404ef5:	e8 76 e2 ff ff       	call   403170 <_ZN2sf7secondsEf@plt>
  404efa:	48 89 c6             	mov    %rax,%rsi
  404efd:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  404f02:	e8 39 e5 ff ff       	call   403440 <_ZN2sfmIERNS_4TimeES0_@plt>
					if (typedtext.getSize() > 0)
  404f07:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  404f0e:	00 
  404f0f:	e8 9c e4 ff ff       	call   4033b0 <_ZNK2sf6String7getSizeEv@plt>
  404f14:	48 85 c0             	test   %rax,%rax
  404f17:	0f 85 81 11 00 00    	jne    40609e <main+0x200e>
				while (elapsedtime_text >= sf::seconds(.1f))
  404f1d:	66 41 0f 6e c5       	movd   %r13d,%xmm0
  404f22:	e8 49 e2 ff ff       	call   403170 <_ZN2sf7secondsEf@plt>
  404f27:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  404f2c:	48 89 c6             	mov    %rax,%rsi
  404f2f:	e8 9c e3 ff ff       	call   4032d0 <_ZN2sfgeENS_4TimeES0_@plt>
  404f34:	84 c0                	test   %al,%al
  404f36:	75 b8                	jne    404ef0 <main+0xe60>
				window.draw(text);
  404f38:	ba e0 c2 40 00       	mov    $0x40c2e0,%edx
  404f3d:	48 8d b4 24 20 1c 00 	lea    0x1c20(%rsp),%rsi
  404f44:	00 
  404f45:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  404f4c:	00 
  404f4d:	e8 de e4 ff ff       	call   403430 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				switches = readSwitch(fd, switches);
  404f52:	8b 44 24 24          	mov    0x24(%rsp),%eax
	ioctl(fd, RD_SWITCHES);
  404f56:	44 8b 7c 24 20       	mov    0x20(%rsp),%r15d
  404f5b:	be 61 61 00 00       	mov    $0x6161,%esi
  404f60:	89 84 24 88 00 00 00 	mov    %eax,0x88(%rsp)
  404f67:	44 89 ff             	mov    %r15d,%edi
  404f6a:	31 c0                	xor    %eax,%eax
  404f6c:	e8 cf e3 ff ff       	call   403340 <ioctl@plt>
	read(fd, &data, 3);
  404f71:	ba 03 00 00 00       	mov    $0x3,%edx
  404f76:	48 8d b4 24 88 00 00 	lea    0x88(%rsp),%rsi
  404f7d:	00 
  404f7e:	44 89 ff             	mov    %r15d,%edi
  404f81:	e8 ea e3 ff ff       	call   403370 <read@plt>
	return data;
  404f86:	44 8b bc 24 88 00 00 	mov    0x88(%rsp),%r15d
  404f8d:	00 
				printf("mask: %p\n", mask);
  404f8e:	bf 1c 91 40 00       	mov    $0x40911c,%edi
  404f93:	31 c0                	xor    %eax,%eax
				unsigned int mask = switches ^ oldSwitches;
  404f95:	44 89 fd             	mov    %r15d,%ebp
	return data;
  404f98:	44 89 7c 24 24       	mov    %r15d,0x24(%rsp)
				unsigned int mask = switches ^ oldSwitches;
  404f9d:	31 dd                	xor    %ebx,%ebp
				printf("mask: %p\n", mask);
  404f9f:	89 ee                	mov    %ebp,%esi
  404fa1:	e8 9a e0 ff ff       	call   403040 <printf@plt>
				if(mask != 0){
  404fa6:	44 39 fb             	cmp    %r15d,%ebx
  404fa9:	0f 85 59 16 00 00    	jne    406608 <main+0x2578>
				if (switches == 0x3FFFF)
  404faf:	81 7c 24 24 ff ff 03 	cmpl   $0x3ffff,0x24(%rsp)
  404fb6:	00 
  404fb7:	0f 85 fd fe ff ff    	jne    404eba <main+0xe2a>
					window.clear(sf::Color::Green);
  404fbd:	be 48 c3 40 00       	mov    $0x40c348,%esi
  404fc2:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  404fc9:	00 
  404fca:	e8 d1 e1 ff ff       	call   4031a0 <_ZN2sf12RenderTarget5clearERKNS_5ColorE@plt>
  404fcf:	e9 e6 fe ff ff       	jmp    404eba <main+0xe2a>
				int seqGreenLeds[4] = {16, 4, 64, 1}; // 2^4, 2^2, 2^6, 2^0
  404fd4:	66 0f 6f 25 24 45 00 	movdqa 0x4524(%rip),%xmm4        # 409500 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x100>
  404fdb:	00 
				temp_time = temp_clock.getElapsedTime();
  404fdc:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
				int seqGreenLeds[4] = {16, 4, 64, 1}; // 2^4, 2^2, 2^6, 2^0
  404fe1:	0f 29 a4 24 a0 00 00 	movaps %xmm4,0xa0(%rsp)
  404fe8:	00 
				temp_time = temp_clock.getElapsedTime();
  404fe9:	e8 f2 e3 ff ff       	call   4033e0 <_ZNK2sf5Clock14getElapsedTimeEv@plt>
				if(temp_time >= sf::seconds(1.5f) && i < 4 && flag){
  404fee:	f3 0f 10 05 66 45 00 	movss  0x4566(%rip),%xmm0        # 40955c <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x15c>
  404ff5:	00 
				temp_time = temp_clock.getElapsedTime();
  404ff6:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
				if(temp_time >= sf::seconds(1.5f) && i < 4 && flag){
  404ffb:	e8 70 e1 ff ff       	call   403170 <_ZN2sf7secondsEf@plt>
  405000:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  405005:	48 89 c6             	mov    %rax,%rsi
  405008:	e8 c3 e2 ff ff       	call   4032d0 <_ZN2sfgeENS_4TimeES0_@plt>
  40500d:	0f b6 54 24 38       	movzbl 0x38(%rsp),%edx
  405012:	84 c0                	test   %al,%al
  405014:	0f 85 2d 15 00 00    	jne    406547 <main+0x24b7>
				else if (i >= 4 && flag && temp_time >= sf::seconds(1.5f)){
  40501a:	83 7c 24 3c 03       	cmpl   $0x3,0x3c(%rsp)
  40501f:	7e 08                	jle    405029 <main+0xf99>
  405021:	84 d2                	test   %dl,%dl
  405023:	0f 85 53 1b 00 00    	jne    406b7c <main+0x2aec>
				int answer[4] = {0xB, 0xD, 0x7, 0xE}; // 11, 13, 7, 14
  405029:	8b 44 24 34          	mov    0x34(%rsp),%eax
	ioctl(fd, RD_PBUTTONS);
  40502d:	44 8b 7c 24 20       	mov    0x20(%rsp),%r15d
  405032:	be 62 61 00 00       	mov    $0x6162,%esi
				int answer[4] = {0xB, 0xD, 0x7, 0xE}; // 11, 13, 7, 14
  405037:	66 0f 6f 2d d1 44 00 	movdqa 0x44d1(%rip),%xmm5        # 409510 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x110>
  40503e:	00 
  40503f:	89 84 24 90 01 00 00 	mov    %eax,0x190(%rsp)
	ioctl(fd, RD_PBUTTONS);
  405046:	44 89 ff             	mov    %r15d,%edi
  405049:	31 c0                	xor    %eax,%eax
				int answer[4] = {0xB, 0xD, 0x7, 0xE}; // 11, 13, 7, 14
  40504b:	0f 29 ac 24 50 01 00 	movaps %xmm5,0x150(%rsp)
  405052:	00 
	ioctl(fd, RD_PBUTTONS);
  405053:	e8 e8 e2 ff ff       	call   403340 <ioctl@plt>
	read(fd, &data, 1);
  405058:	ba 01 00 00 00       	mov    $0x1,%edx
  40505d:	48 8d b4 24 90 01 00 	lea    0x190(%rsp),%rsi
  405064:	00 
  405065:	44 89 ff             	mov    %r15d,%edi
  405068:	e8 03 e3 ff ff       	call   403370 <read@plt>
	return data;
  40506d:	8b 84 24 90 01 00 00 	mov    0x190(%rsp),%eax
  405074:	89 44 24 34          	mov    %eax,0x34(%rsp)
				if(button != 0xF && button != old_button && j < 4){
  405078:	83 f8 0f             	cmp    $0xf,%eax
  40507b:	0f 84 7e 1a 00 00    	je     406aff <main+0x2a6f>
  405081:	83 7c 24 30 04       	cmpl   $0x4,0x30(%rsp)
  405086:	0f 85 59 1a 00 00    	jne    406ae5 <main+0x2a55>
					sprintf(str, "%d %d %d %d", input[3], input[2], input[1], input[0]);
  40508c:	8b 94 24 7c 01 00 00 	mov    0x17c(%rsp),%edx
  405093:	31 ed                	xor    %ebp,%ebp
  405095:	be 33 91 40 00       	mov    $0x409133,%esi
  40509a:	31 c0                	xor    %eax,%eax
  40509c:	44 8b 8c 24 70 01 00 	mov    0x170(%rsp),%r9d
  4050a3:	00 
  4050a4:	44 8b 84 24 74 01 00 	mov    0x174(%rsp),%r8d
  4050ab:	00 
  4050ac:	48 89 ef             	mov    %rbp,%rdi
					text.setString(str);
  4050af:	4c 8d b4 24 88 00 00 	lea    0x88(%rsp),%r14
  4050b6:	00 
					sprintf(str, "%d %d %d %d", input[3], input[2], input[1], input[0]);
  4050b7:	8b 8c 24 78 01 00 00 	mov    0x178(%rsp),%ecx
  4050be:	e8 bd df ff ff       	call   403080 <sprintf@plt>
					text.setString(str);
  4050c3:	4c 89 f7             	mov    %r14,%rdi
  4050c6:	e8 35 e4 ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
  4050cb:	4c 89 f2             	mov    %r14,%rdx
  4050ce:	48 89 ee             	mov    %rbp,%rsi
  4050d1:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  4050d8:	00 
  4050d9:	e8 22 e0 ff ff       	call   403100 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  4050de:	48 8d b4 24 90 01 00 	lea    0x190(%rsp),%rsi
  4050e5:	00 
  4050e6:	48 8d bc 24 20 1c 00 	lea    0x1c20(%rsp),%rdi
  4050ed:	00 
  4050ee:	e8 ad e3 ff ff       	call   4034a0 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  4050f3:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  4050fa:	00 
	if (!_M_is_local())
  4050fb:	48 8d 84 24 a0 01 00 	lea    0x1a0(%rsp),%rax
  405102:	00 
  405103:	48 89 04 24          	mov    %rax,(%rsp)
  405107:	48 39 c7             	cmp    %rax,%rdi
  40510a:	74 15                	je     405121 <main+0x1091>
  40510c:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  405113:	00 
  405114:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  40511b:	00 
  40511c:	e8 1f e1 ff ff       	call   403240 <_ZdlPvm@plt>
  405121:	4c 89 f7             	mov    %r14,%rdi
  405124:	e8 27 e2 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
					window.draw(text);
  405129:	ba e0 c2 40 00       	mov    $0x40c2e0,%edx
  40512e:	48 8d b4 24 20 1c 00 	lea    0x1c20(%rsp),%rsi
  405135:	00 
  405136:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  40513d:	00 
  40513e:	e8 ed e2 ff ff       	call   403430 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
					window.display();
  405143:	48 8d bc 24 70 20 00 	lea    0x2070(%rsp),%rdi
  40514a:	00 
  40514b:	e8 c0 e1 ff ff       	call   403310 <_ZN2sf6Window7displayEv@plt>
  405150:	31 c0                	xor    %eax,%eax
  405152:	4c 8d a4 24 50 01 00 	lea    0x150(%rsp),%r12
  405159:	00 
  40515a:	4c 8d ac 24 70 01 00 	lea    0x170(%rsp),%r13
  405161:	00 
						if(answer[k] != input[k]){
  405162:	41 8b 4c 05 00       	mov    0x0(%r13,%rax,1),%ecx
  405167:	41 39 0c 04          	cmp    %ecx,(%r12,%rax,1)
  40516b:	0f 85 ec 1a 00 00    	jne    406c5d <main+0x2bcd>
					for (int k = 0; k < 4; k++){
  405171:	48 83 c0 04          	add    $0x4,%rax
  405175:	48 83 f8 10          	cmp    $0x10,%rax
  405179:	75 e7                	jne    405162 <main+0x10d2>
  40517b:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  40517f:	89 44 24 30          	mov    %eax,0x30(%rsp)
  405183:	e9 32 fd ff ff       	jmp    404eba <main+0xe2a>
				elapsedtime_text += clock_text.restart();
  405188:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  40518d:	e8 7e e2 ff ff       	call   403410 <_ZN2sf5Clock7restartEv@plt>
  405192:	48 89 c6             	mov    %rax,%rsi
  405195:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  40519a:	e8 61 e2 ff ff       	call   403400 <_ZN2sfpLERNS_4TimeES0_@plt>
  40519f:	44 8b 2d b2 43 00 00 	mov    0x43b2(%rip),%r13d        # 409558 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x158>
  4051a6:	eb 35                	jmp    4051dd <main+0x114d>
  4051a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4051af:	00 
					elapsedtime_text -= sf::seconds(.1f);
  4051b0:	66 41 0f 6e c5       	movd   %r13d,%xmm0
  4051b5:	e8 b6 df ff ff       	call   403170 <_ZN2sf7secondsEf@plt>
  4051ba:	48 89 c6             	mov    %rax,%rsi
  4051bd:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  4051c2:	e8 79 e2 ff ff       	call   403440 <_ZN2sfmIERNS_4TimeES0_@plt>
					if (typedtext.getSize() > 0)
  4051c7:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  4051ce:	00 
  4051cf:	e8 dc e1 ff ff       	call   4033b0 <_ZNK2sf6String7getSizeEv@plt>
  4051d4:	48 85 c0             	test   %rax,%rax
  4051d7:	0f 85 14 0d 00 00    	jne    405ef1 <main+0x1e61>
				while (elapsedtime_text >= sf::seconds(.1f))
  4051dd:	66 41 0f 6e c5       	movd   %r13d,%xmm0
  4051e2:	e8 89 df ff ff       	call   403170 <_ZN2sf7secondsEf@plt>
  4051e7:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  4051ec:	48 89 c6             	mov    %rax,%rsi
  4051ef:	e8 dc e0 ff ff       	call   4032d0 <_ZN2sfgeENS_4TimeES0_@plt>
  4051f4:	84 c0                	test   %al,%al
  4051f6:	75 b8                	jne    4051b0 <main+0x1120>
				window.draw(text);
  4051f8:	ba e0 c2 40 00       	mov    $0x40c2e0,%edx
  4051fd:	48 8d b4 24 20 1c 00 	lea    0x1c20(%rsp),%rsi
  405204:	00 
  405205:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  40520c:	00 
  40520d:	e8 1e e2 ff ff       	call   403430 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square1);
  405212:	ba e0 c2 40 00       	mov    $0x40c2e0,%edx
  405217:	48 8d b4 24 60 03 00 	lea    0x360(%rsp),%rsi
  40521e:	00 
  40521f:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  405226:	00 
  405227:	e8 04 e2 ff ff       	call   403430 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square2);
  40522c:	ba e0 c2 40 00       	mov    $0x40c2e0,%edx
  405231:	48 8d b4 24 c0 04 00 	lea    0x4c0(%rsp),%rsi
  405238:	00 
  405239:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  405240:	00 
  405241:	e8 ea e1 ff ff       	call   403430 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square3);
  405246:	ba e0 c2 40 00       	mov    $0x40c2e0,%edx
  40524b:	48 8d b4 24 20 06 00 	lea    0x620(%rsp),%rsi
  405252:	00 
  405253:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  40525a:	00 
  40525b:	e8 d0 e1 ff ff       	call   403430 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square4);
  405260:	ba e0 c2 40 00       	mov    $0x40c2e0,%edx
  405265:	48 8d b4 24 80 07 00 	lea    0x780(%rsp),%rsi
  40526c:	00 
  40526d:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  405274:	00 
  405275:	e8 b6 e1 ff ff       	call   403430 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square5);
  40527a:	ba e0 c2 40 00       	mov    $0x40c2e0,%edx
  40527f:	48 8d b4 24 e0 08 00 	lea    0x8e0(%rsp),%rsi
  405286:	00 
  405287:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  40528e:	00 
  40528f:	e8 9c e1 ff ff       	call   403430 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square6);
  405294:	ba e0 c2 40 00       	mov    $0x40c2e0,%edx
  405299:	48 8d b4 24 40 0a 00 	lea    0xa40(%rsp),%rsi
  4052a0:	00 
  4052a1:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  4052a8:	00 
  4052a9:	e8 82 e1 ff ff       	call   403430 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square7);
  4052ae:	ba e0 c2 40 00       	mov    $0x40c2e0,%edx
  4052b3:	48 8d b4 24 a0 0b 00 	lea    0xba0(%rsp),%rsi
  4052ba:	00 
  4052bb:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  4052c2:	00 
  4052c3:	e8 68 e1 ff ff       	call   403430 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square8);
  4052c8:	ba e0 c2 40 00       	mov    $0x40c2e0,%edx
  4052cd:	48 8d b4 24 00 0d 00 	lea    0xd00(%rsp),%rsi
  4052d4:	00 
  4052d5:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  4052dc:	00 
  4052dd:	e8 4e e1 ff ff       	call   403430 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square9);
  4052e2:	ba e0 c2 40 00       	mov    $0x40c2e0,%edx
  4052e7:	48 8d b4 24 60 0e 00 	lea    0xe60(%rsp),%rsi
  4052ee:	00 
  4052ef:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  4052f6:	00 
  4052f7:	e8 34 e1 ff ff       	call   403430 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square10);
  4052fc:	ba e0 c2 40 00       	mov    $0x40c2e0,%edx
  405301:	48 8d b4 24 c0 0f 00 	lea    0xfc0(%rsp),%rsi
  405308:	00 
  405309:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  405310:	00 
  405311:	e8 1a e1 ff ff       	call   403430 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square11);
  405316:	ba e0 c2 40 00       	mov    $0x40c2e0,%edx
  40531b:	48 8d b4 24 20 11 00 	lea    0x1120(%rsp),%rsi
  405322:	00 
  405323:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  40532a:	00 
  40532b:	e8 00 e1 ff ff       	call   403430 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square12);
  405330:	ba e0 c2 40 00       	mov    $0x40c2e0,%edx
  405335:	48 8d b4 24 80 12 00 	lea    0x1280(%rsp),%rsi
  40533c:	00 
  40533d:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  405344:	00 
  405345:	e8 e6 e0 ff ff       	call   403430 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square13);
  40534a:	ba e0 c2 40 00       	mov    $0x40c2e0,%edx
  40534f:	48 8d b4 24 e0 13 00 	lea    0x13e0(%rsp),%rsi
  405356:	00 
  405357:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  40535e:	00 
  40535f:	e8 cc e0 ff ff       	call   403430 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square14);
  405364:	ba e0 c2 40 00       	mov    $0x40c2e0,%edx
  405369:	48 8d b4 24 40 15 00 	lea    0x1540(%rsp),%rsi
  405370:	00 
  405371:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  405378:	00 
  405379:	e8 b2 e0 ff ff       	call   403430 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square15);
  40537e:	ba e0 c2 40 00       	mov    $0x40c2e0,%edx
  405383:	48 8d b4 24 a0 16 00 	lea    0x16a0(%rsp),%rsi
  40538a:	00 
  40538b:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  405392:	00 
  405393:	e8 98 e0 ff ff       	call   403430 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square16);
  405398:	ba e0 c2 40 00       	mov    $0x40c2e0,%edx
  40539d:	48 8d b4 24 00 18 00 	lea    0x1800(%rsp),%rsi
  4053a4:	00 
  4053a5:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  4053ac:	00 
  4053ad:	e8 7e e0 ff ff       	call   403430 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square17);
  4053b2:	ba e0 c2 40 00       	mov    $0x40c2e0,%edx
  4053b7:	48 8d b4 24 60 19 00 	lea    0x1960(%rsp),%rsi
  4053be:	00 
  4053bf:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  4053c6:	00 
  4053c7:	e8 64 e0 ff ff       	call   403430 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square18);
  4053cc:	ba e0 c2 40 00       	mov    $0x40c2e0,%edx
  4053d1:	48 8d b4 24 c0 1a 00 	lea    0x1ac0(%rsp),%rsi
  4053d8:	00 
  4053d9:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  4053e0:	00 
  4053e1:	e8 4a e0 ff ff       	call   403430 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				switches = readSwitch(fd, switches);
  4053e6:	8b 44 24 24          	mov    0x24(%rsp),%eax
	ioctl(fd, RD_SWITCHES);
  4053ea:	44 8b 7c 24 20       	mov    0x20(%rsp),%r15d
  4053ef:	be 61 61 00 00       	mov    $0x6161,%esi
  4053f4:	89 44 24 4c          	mov    %eax,0x4c(%rsp)
  4053f8:	44 89 ff             	mov    %r15d,%edi
  4053fb:	31 c0                	xor    %eax,%eax
  4053fd:	e8 3e df ff ff       	call   403340 <ioctl@plt>
	read(fd, &data, 3);
  405402:	ba 03 00 00 00       	mov    $0x3,%edx
  405407:	48 8d 74 24 4c       	lea    0x4c(%rsp),%rsi
  40540c:	44 89 ff             	mov    %r15d,%edi
  40540f:	e8 5c df ff ff       	call   403370 <read@plt>
	return data;
  405414:	44 8b 74 24 4c       	mov    0x4c(%rsp),%r14d
	ioctl(fd, WR_RED_LEDS);
  405419:	be 65 61 00 00       	mov    $0x6165,%esi
  40541e:	44 89 ff             	mov    %r15d,%edi
  405421:	31 c0                	xor    %eax,%eax
	return data;
  405423:	44 89 74 24 24       	mov    %r14d,0x24(%rsp)
				writeRedLed(fd, switches);
  405428:	44 89 74 24 50       	mov    %r14d,0x50(%rsp)
	ioctl(fd, WR_RED_LEDS);
  40542d:	e8 0e df ff ff       	call   403340 <ioctl@plt>
	write(fd, &data, sizeof(data));
  405432:	ba 04 00 00 00       	mov    $0x4,%edx
  405437:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi
  40543c:	44 89 ff             	mov    %r15d,%edi
  40543f:	e8 ac dc ff ff       	call   4030f0 <write@plt>
				if(switches == 0x0AA15){
  405444:	41 81 fe 15 aa 00 00 	cmp    $0xaa15,%r14d
  40544b:	0f 85 69 fa ff ff    	jne    404eba <main+0xe2a>
					text.setString("");
  405451:	4c 8d ac 24 70 01 00 	lea    0x170(%rsp),%r13
  405458:	00 
  405459:	4c 89 ef             	mov    %r13,%rdi
  40545c:	e8 9f e0 ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
  405461:	4c 89 ea             	mov    %r13,%rdx
  405464:	be 25 91 40 00       	mov    $0x409125,%esi
  405469:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  405470:	00 
  405471:	e8 8a dc ff ff       	call   403100 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  405476:	48 8d b4 24 90 01 00 	lea    0x190(%rsp),%rsi
  40547d:	00 
  40547e:	48 8d bc 24 20 1c 00 	lea    0x1c20(%rsp),%rdi
  405485:	00 
  405486:	e8 15 e0 ff ff       	call   4034a0 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  40548b:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  405492:	00 
	if (!_M_is_local())
  405493:	48 8d 84 24 a0 01 00 	lea    0x1a0(%rsp),%rax
  40549a:	00 
  40549b:	48 89 04 24          	mov    %rax,(%rsp)
  40549f:	48 39 c7             	cmp    %rax,%rdi
  4054a2:	74 15                	je     4054b9 <main+0x1429>
  4054a4:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  4054ab:	00 
  4054ac:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4054b3:	00 
  4054b4:	e8 87 dd ff ff       	call   403240 <_ZdlPvm@plt>
  4054b9:	4c 89 ef             	mov    %r13,%rdi
  4054bc:	e8 8f de ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
					typedtext.insert(0, "Quarta fase");
  4054c1:	4c 89 ef             	mov    %r13,%rdi
  4054c4:	e8 37 e0 ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
  4054c9:	4c 89 ea             	mov    %r13,%rdx
  4054cc:	be 10 91 40 00       	mov    $0x409110,%esi
  4054d1:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  4054d8:	00 
  4054d9:	e8 22 dc ff ff       	call   403100 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  4054de:	48 8d 94 24 90 01 00 	lea    0x190(%rsp),%rdx
  4054e5:	00 
  4054e6:	31 f6                	xor    %esi,%esi
  4054e8:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  4054ef:	00 
  4054f0:	e8 db dc ff ff       	call   4031d0 <_ZN2sf6String6insertEmRKS0_@plt>
      { return _M_dataplus._M_p; }
  4054f5:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  4054fc:	00 
	if (!_M_is_local())
  4054fd:	48 3b 3c 24          	cmp    (%rsp),%rdi
  405501:	74 15                	je     405518 <main+0x1488>
  405503:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  40550a:	00 
  40550b:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405512:	00 
  405513:	e8 28 dd ff ff       	call   403240 <_ZdlPvm@plt>
  405518:	4c 89 ef             	mov    %r13,%rdi
  40551b:	e8 30 de ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
					temp_clock.restart();
  405520:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  405525:	e8 e6 de ff ff       	call   403410 <_ZN2sf5Clock7restartEv@plt>
	ioctl(fd, WR_GREEN_LEDS);
  40552a:	44 8b 7c 24 20       	mov    0x20(%rsp),%r15d
  40552f:	be 66 61 00 00       	mov    $0x6166,%esi
  405534:	31 c0                	xor    %eax,%eax
  405536:	c7 44 24 54 00 00 00 	movl   $0x0,0x54(%rsp)
  40553d:	00 
  40553e:	44 89 ff             	mov    %r15d,%edi
  405541:	e8 fa dd ff ff       	call   403340 <ioctl@plt>
	write(fd, &data, sizeof(data));
  405546:	ba 04 00 00 00       	mov    $0x4,%edx
  40554b:	48 8d 74 24 54       	lea    0x54(%rsp),%rsi
  405550:	44 89 ff             	mov    %r15d,%edi
  405553:	e8 98 db ff ff       	call   4030f0 <write@plt>
					flag = 1;
  405558:	c7 44 24 38 01 00 00 	movl   $0x1,0x38(%rsp)
  40555f:	00 
					i = 0;
  405560:	c7 44 24 3c 00 00 00 	movl   $0x0,0x3c(%rsp)
  405567:	00 
					screen = 4;
  405568:	c7 44 24 1c 04 00 00 	movl   $0x4,0x1c(%rsp)
  40556f:	00 
  405570:	e9 45 f9 ff ff       	jmp    404eba <main+0xe2a>
				elapsedtime_text += clock_text.restart();
  405575:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  40557a:	e8 91 de ff ff       	call   403410 <_ZN2sf5Clock7restartEv@plt>
  40557f:	48 89 c6             	mov    %rax,%rsi
  405582:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  405587:	e8 74 de ff ff       	call   403400 <_ZN2sfpLERNS_4TimeES0_@plt>
  40558c:	44 8b 2d c5 3f 00 00 	mov    0x3fc5(%rip),%r13d        # 409558 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x158>
  405593:	eb 30                	jmp    4055c5 <main+0x1535>
  405595:	0f 1f 00             	nopl   (%rax)
					elapsedtime_text -= sf::seconds(.1f);
  405598:	66 41 0f 6e c5       	movd   %r13d,%xmm0
  40559d:	e8 ce db ff ff       	call   403170 <_ZN2sf7secondsEf@plt>
  4055a2:	48 89 c6             	mov    %rax,%rsi
  4055a5:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  4055aa:	e8 91 de ff ff       	call   403440 <_ZN2sfmIERNS_4TimeES0_@plt>
					if (typedtext.getSize() > 0)
  4055af:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  4055b6:	00 
  4055b7:	e8 f4 dd ff ff       	call   4033b0 <_ZNK2sf6String7getSizeEv@plt>
  4055bc:	48 85 c0             	test   %rax,%rax
  4055bf:	0f 85 7f 07 00 00    	jne    405d44 <main+0x1cb4>
				while (elapsedtime_text >= sf::seconds(.1f))
  4055c5:	66 41 0f 6e c5       	movd   %r13d,%xmm0
  4055ca:	e8 a1 db ff ff       	call   403170 <_ZN2sf7secondsEf@plt>
  4055cf:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  4055d4:	48 89 c6             	mov    %rax,%rsi
  4055d7:	e8 f4 dc ff ff       	call   4032d0 <_ZN2sfgeENS_4TimeES0_@plt>
  4055dc:	84 c0                	test   %al,%al
  4055de:	75 b8                	jne    405598 <main+0x1508>
				window.draw(text);
  4055e0:	ba e0 c2 40 00       	mov    $0x40c2e0,%edx
  4055e5:	48 8d b4 24 20 1c 00 	lea    0x1c20(%rsp),%rsi
  4055ec:	00 
  4055ed:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  4055f4:	00 
  4055f5:	e8 36 de ff ff       	call   403430 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
	ioctl(fd, WR_R_DISPLAY);
  4055fa:	44 8b 74 24 20       	mov    0x20(%rsp),%r14d
  4055ff:	be 64 61 00 00       	mov    $0x6164,%esi
  405604:	31 c0                	xor    %eax,%eax
  405606:	c7 44 24 44 82 b0 c0 	movl   $0xc0c0b082,0x44(%rsp)
  40560d:	c0 
  40560e:	44 89 f7             	mov    %r14d,%edi
  405611:	e8 2a dd ff ff       	call   403340 <ioctl@plt>
	write(fd, &data, sizeof(data));
  405616:	ba 04 00 00 00       	mov    $0x4,%edx
  40561b:	48 8d 74 24 44       	lea    0x44(%rsp),%rsi
  405620:	44 89 f7             	mov    %r14d,%edi
  405623:	e8 c8 da ff ff       	call   4030f0 <write@plt>
				switches = readSwitch(fd, switches);
  405628:	8b 44 24 24          	mov    0x24(%rsp),%eax
	ioctl(fd, RD_SWITCHES);
  40562c:	be 61 61 00 00       	mov    $0x6161,%esi
  405631:	44 89 f7             	mov    %r14d,%edi
  405634:	89 44 24 48          	mov    %eax,0x48(%rsp)
  405638:	31 c0                	xor    %eax,%eax
  40563a:	e8 01 dd ff ff       	call   403340 <ioctl@plt>
	read(fd, &data, 3);
  40563f:	ba 03 00 00 00       	mov    $0x3,%edx
  405644:	48 8d 74 24 48       	lea    0x48(%rsp),%rsi
  405649:	44 89 f7             	mov    %r14d,%edi
  40564c:	e8 1f dd ff ff       	call   403370 <read@plt>
	return data;
  405651:	8b 44 24 48          	mov    0x48(%rsp),%eax
  405655:	89 44 24 24          	mov    %eax,0x24(%rsp)
				if (switches == 0x24) // 36 em hexa
  405659:	83 f8 24             	cmp    $0x24,%eax
  40565c:	0f 85 58 f8 ff ff    	jne    404eba <main+0xe2a>
					text.setString("");
  405662:	4c 8d ac 24 70 01 00 	lea    0x170(%rsp),%r13
  405669:	00 
  40566a:	4c 89 ef             	mov    %r13,%rdi
  40566d:	e8 8e de ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
  405672:	4c 89 ea             	mov    %r13,%rdx
  405675:	be 25 91 40 00       	mov    $0x409125,%esi
  40567a:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  405681:	00 
  405682:	e8 79 da ff ff       	call   403100 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  405687:	48 8d b4 24 90 01 00 	lea    0x190(%rsp),%rsi
  40568e:	00 
  40568f:	48 8d bc 24 20 1c 00 	lea    0x1c20(%rsp),%rdi
  405696:	00 
  405697:	e8 04 de ff ff       	call   4034a0 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  40569c:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  4056a3:	00 
	if (!_M_is_local())
  4056a4:	48 8d 84 24 a0 01 00 	lea    0x1a0(%rsp),%rax
  4056ab:	00 
  4056ac:	48 89 04 24          	mov    %rax,(%rsp)
  4056b0:	48 39 c7             	cmp    %rax,%rdi
  4056b3:	74 15                	je     4056ca <main+0x163a>
  4056b5:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  4056bc:	00 
  4056bd:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4056c4:	00 
  4056c5:	e8 76 db ff ff       	call   403240 <_ZdlPvm@plt>
  4056ca:	4c 89 ef             	mov    %r13,%rdi
  4056cd:	e8 7e dc ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
					typedtext.insert(0, "Isso faz algum sentido?");
  4056d2:	4c 89 ef             	mov    %r13,%rdi
  4056d5:	e8 26 de ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
  4056da:	4c 89 ea             	mov    %r13,%rdx
  4056dd:	be f8 90 40 00       	mov    $0x4090f8,%esi
  4056e2:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  4056e9:	00 
  4056ea:	e8 11 da ff ff       	call   403100 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  4056ef:	48 8d 94 24 90 01 00 	lea    0x190(%rsp),%rdx
  4056f6:	00 
  4056f7:	31 f6                	xor    %esi,%esi
  4056f9:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  405700:	00 
  405701:	e8 ca da ff ff       	call   4031d0 <_ZN2sf6String6insertEmRKS0_@plt>
      { return _M_dataplus._M_p; }
  405706:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  40570d:	00 
	if (!_M_is_local())
  40570e:	48 3b 3c 24          	cmp    (%rsp),%rdi
  405712:	74 15                	je     405729 <main+0x1699>
  405714:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  40571b:	00 
  40571c:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405723:	00 
  405724:	e8 17 db ff ff       	call   403240 <_ZdlPvm@plt>
  405729:	4c 89 ef             	mov    %r13,%rdi
  40572c:	e8 1f dc ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
					window.clear();
  405731:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  405737:	31 c9                	xor    %ecx,%ecx
  405739:	31 d2                	xor    %edx,%edx
  40573b:	31 f6                	xor    %esi,%esi
  40573d:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  405744:	00 
  405745:	e8 c6 d9 ff ff       	call   403110 <_ZN2sf5ColorC1Ehhhh@plt>
  40574a:	48 8d b4 24 90 01 00 	lea    0x190(%rsp),%rsi
  405751:	00 
  405752:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  405759:	00 
  40575a:	e8 41 da ff ff       	call   4031a0 <_ZN2sf12RenderTarget5clearERKNS_5ColorE@plt>
					screen = 3;
  40575f:	c7 44 24 1c 03 00 00 	movl   $0x3,0x1c(%rsp)
  405766:	00 
  405767:	e9 4e f7 ff ff       	jmp    404eba <main+0xe2a>
  40576c:	0f 1f 40 00          	nopl   0x0(%rax)
			typing.play();
  405770:	48 8d bc 24 90 02 00 	lea    0x290(%rsp),%rdi
  405777:	00 
  405778:	e8 a3 dc ff ff       	call   403420 <_ZN2sf11SoundStream4playEv@plt>
				elapsedtime_text += clock_text.restart();
  40577d:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  405782:	e8 89 dc ff ff       	call   403410 <_ZN2sf5Clock7restartEv@plt>
  405787:	48 89 c6             	mov    %rax,%rsi
  40578a:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  40578f:	e8 6c dc ff ff       	call   403400 <_ZN2sfpLERNS_4TimeES0_@plt>
  405794:	c7 44 24 1c 01 00 00 	movl   $0x1,0x1c(%rsp)
  40579b:	00 
  40579c:	0f 1f 40 00          	nopl   0x0(%rax)
				while (elapsedtime_text >= sf::seconds(.001f))
  4057a0:	f3 0f 10 05 a8 3d 00 	movss  0x3da8(%rip),%xmm0        # 409550 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x150>
  4057a7:	00 
  4057a8:	e8 c3 d9 ff ff       	call   403170 <_ZN2sf7secondsEf@plt>
  4057ad:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  4057b2:	48 89 c6             	mov    %rax,%rsi
  4057b5:	e8 16 db ff ff       	call   4032d0 <_ZN2sfgeENS_4TimeES0_@plt>
  4057ba:	84 c0                	test   %al,%al
  4057bc:	0f 84 63 05 00 00    	je     405d25 <main+0x1c95>
					elapsedtime_text -= sf::seconds(.001f);
  4057c2:	f3 0f 10 05 86 3d 00 	movss  0x3d86(%rip),%xmm0        # 409550 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x150>
  4057c9:	00 
  4057ca:	e8 a1 d9 ff ff       	call   403170 <_ZN2sf7secondsEf@plt>
  4057cf:	48 89 c6             	mov    %rax,%rsi
  4057d2:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  4057d7:	e8 64 dc ff ff       	call   403440 <_ZN2sfmIERNS_4TimeES0_@plt>
					if (typedtext.getSize() > 0)
  4057dc:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  4057e3:	00 
  4057e4:	e8 c7 db ff ff       	call   4033b0 <_ZNK2sf6String7getSizeEv@plt>
  4057e9:	48 85 c0             	test   %rax,%rax
  4057ec:	0f 84 fe 01 00 00    	je     4059f0 <main+0x1960>
						text.setString(text.getString() + typedtext[0]);
  4057f2:	31 f6                	xor    %esi,%esi
  4057f4:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  4057fb:	00 
  4057fc:	e8 af da ff ff       	call   4032b0 <_ZN2sf6StringixEm@plt>
  405801:	4c 8d ac 24 70 01 00 	lea    0x170(%rsp),%r13
  405808:	00 
  405809:	8b 30                	mov    (%rax),%esi
  40580b:	4c 89 ef             	mov    %r13,%rdi
  40580e:	e8 bd d8 ff ff       	call   4030d0 <_ZN2sf6StringC1Ej@plt>
  405813:	48 8d bc 24 20 1c 00 	lea    0x1c20(%rsp),%rdi
  40581a:	00 
  40581b:	e8 d0 db ff ff       	call   4033f0 <_ZNK2sf4Text9getStringEv@plt>
  405820:	48 89 c6             	mov    %rax,%rsi
  405823:	4c 89 ea             	mov    %r13,%rdx
  405826:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  40582d:	00 
  40582e:	e8 ad d8 ff ff       	call   4030e0 <_ZN2sfplERKNS_6StringES2_@plt>
  405833:	48 8d b4 24 90 01 00 	lea    0x190(%rsp),%rsi
  40583a:	00 
  40583b:	48 8d bc 24 20 1c 00 	lea    0x1c20(%rsp),%rdi
  405842:	00 
  405843:	e8 58 dc ff ff       	call   4034a0 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  405848:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  40584f:	00 
	if (!_M_is_local())
  405850:	48 8d 84 24 a0 01 00 	lea    0x1a0(%rsp),%rax
  405857:	00 
  405858:	48 89 04 24          	mov    %rax,(%rsp)
  40585c:	48 39 c7             	cmp    %rax,%rdi
  40585f:	74 15                	je     405876 <main+0x17e6>
  405861:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  405868:	00 
  405869:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405870:	00 
  405871:	e8 ca d9 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  405876:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  40587d:	00 
	if (!_M_is_local())
  40587e:	4c 8d bc 24 80 01 00 	lea    0x180(%rsp),%r15
  405885:	00 
  405886:	4c 39 ff             	cmp    %r15,%rdi
  405889:	74 15                	je     4058a0 <main+0x1810>
  40588b:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  405892:	00 
  405893:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  40589a:	00 
  40589b:	e8 a0 d9 ff ff       	call   403240 <_ZdlPvm@plt>
						typedtext = typedtext.toAnsiString().substr(1);
  4058a0:	48 8d ac 24 a0 00 00 	lea    0xa0(%rsp),%rbp
  4058a7:	00 
  4058a8:	4c 8d b4 24 88 00 00 	lea    0x88(%rsp),%r14
  4058af:	00 
  4058b0:	48 89 ef             	mov    %rbp,%rdi
  4058b3:	4c 8d a4 24 50 01 00 	lea    0x150(%rsp),%r12
  4058ba:	00 
  4058bb:	e8 40 dc ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
  4058c0:	4c 89 f7             	mov    %r14,%rdi
  4058c3:	e8 38 dc ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
  4058c8:	4c 89 f2             	mov    %r14,%rdx
  4058cb:	48 8d b4 24 d0 00 00 	lea    0xd0(%rsp),%rsi
  4058d2:	00 
  4058d3:	4c 89 e7             	mov    %r12,%rdi
  4058d6:	e8 b5 db ff ff       	call   403490 <_ZNK2sf6String12toAnsiStringB5cxx11ERKSt6locale@plt>
      { return _M_string_length; }
  4058db:	4c 8b a4 24 58 01 00 	mov    0x158(%rsp),%r12
  4058e2:	00 
	if (__pos > this->size())
  4058e3:	4d 85 e4             	test   %r12,%r12
  4058e6:	0f 84 6d 14 00 00    	je     406d59 <main+0x2cc9>
      { return _M_dataplus._M_p; }
  4058ec:	48 8b 84 24 50 01 00 	mov    0x150(%rsp),%rax
  4058f3:	00 
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
  4058f4:	49 83 ec 01          	sub    $0x1,%r12
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  4058f8:	4c 89 bc 24 70 01 00 	mov    %r15,0x170(%rsp)
  4058ff:	00 
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
  405900:	4c 89 a4 24 90 01 00 	mov    %r12,0x190(%rsp)
  405907:	00 
      { return _M_dataplus._M_p; }
  405908:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
	if (__dnew > size_type(_S_local_capacity))
  40590d:	49 83 fc 0f          	cmp    $0xf,%r12
  405911:	0f 87 0b 02 00 00    	ja     405b22 <main+0x1a92>
	if (__n == 1)
  405917:	49 83 fc 01          	cmp    $0x1,%r12
  40591b:	0f 85 f0 01 00 00    	jne    405b11 <main+0x1a81>
  405921:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  405925:	88 84 24 80 01 00 00 	mov    %al,0x180(%rsp)
  40592c:	4c 89 f8             	mov    %r15,%rax
      { _M_string_length = __length; }
  40592f:	4c 89 a4 24 78 01 00 	mov    %r12,0x178(%rsp)
  405936:	00 
  405937:	48 89 ea             	mov    %rbp,%rdx
  40593a:	4c 89 ee             	mov    %r13,%rsi
  40593d:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  405944:	00 
  405945:	42 c6 04 20 00       	movb   $0x0,(%rax,%r12,1)
  40594a:	e8 61 d7 ff ff       	call   4030b0 <_ZN2sf6StringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6locale@plt>
  40594f:	48 8d b4 24 90 01 00 	lea    0x190(%rsp),%rsi
  405956:	00 
  405957:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  40595e:	00 
  40595f:	e8 fc da ff ff       	call   403460 <_ZN2sf6StringaSERKS0_@plt>
      { return _M_dataplus._M_p; }
  405964:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  40596b:	00 
	if (!_M_is_local())
  40596c:	48 3b 3c 24          	cmp    (%rsp),%rdi
  405970:	74 15                	je     405987 <main+0x18f7>
  405972:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  405979:	00 
  40597a:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405981:	00 
  405982:	e8 b9 d8 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  405987:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  40598e:	00 
	if (!_M_is_local())
  40598f:	4c 39 ff             	cmp    %r15,%rdi
  405992:	74 11                	je     4059a5 <main+0x1915>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  405994:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  40599b:	00 
  40599c:	48 8d 70 01          	lea    0x1(%rax),%rsi
  4059a0:	e8 9b d8 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  4059a5:	48 8b bc 24 50 01 00 	mov    0x150(%rsp),%rdi
  4059ac:	00 
	if (!_M_is_local())
  4059ad:	48 8d 84 24 60 01 00 	lea    0x160(%rsp),%rax
  4059b4:	00 
  4059b5:	48 39 c7             	cmp    %rax,%rdi
  4059b8:	74 11                	je     4059cb <main+0x193b>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4059ba:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  4059c1:	00 
  4059c2:	48 8d 70 01          	lea    0x1(%rax),%rsi
  4059c6:	e8 75 d8 ff ff       	call   403240 <_ZdlPvm@plt>
  4059cb:	4c 89 f7             	mov    %r14,%rdi
  4059ce:	e8 7d d9 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
  4059d3:	48 89 ef             	mov    %rbp,%rdi
  4059d6:	e8 75 d9 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
						temp_clock.restart();
  4059db:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  4059e0:	e8 2b da ff ff       	call   403410 <_ZN2sf5Clock7restartEv@plt>
  4059e5:	e9 b6 fd ff ff       	jmp    4057a0 <main+0x1710>
  4059ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
						temp_time = temp_clock.getElapsedTime();
  4059f0:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  4059f5:	e8 e6 d9 ff ff       	call   4033e0 <_ZNK2sf5Clock14getElapsedTimeEv@plt>
						if (temp_time >= sf::seconds(5.0f))
  4059fa:	f3 0f 10 05 52 3b 00 	movss  0x3b52(%rip),%xmm0        # 409554 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x154>
  405a01:	00 
						temp_time = temp_clock.getElapsedTime();
  405a02:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
						if (temp_time >= sf::seconds(5.0f))
  405a07:	e8 64 d7 ff ff       	call   403170 <_ZN2sf7secondsEf@plt>
  405a0c:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  405a11:	48 89 c6             	mov    %rax,%rsi
  405a14:	e8 b7 d8 ff ff       	call   4032d0 <_ZN2sfgeENS_4TimeES0_@plt>
  405a19:	84 c0                	test   %al,%al
  405a1b:	0f 84 7f fd ff ff    	je     4057a0 <main+0x1710>
							text.setString("");
  405a21:	4c 8d ac 24 70 01 00 	lea    0x170(%rsp),%r13
  405a28:	00 
  405a29:	4c 89 ef             	mov    %r13,%rdi
  405a2c:	e8 cf da ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
  405a31:	4c 89 ea             	mov    %r13,%rdx
  405a34:	be 25 91 40 00       	mov    $0x409125,%esi
  405a39:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  405a40:	00 
  405a41:	e8 ba d6 ff ff       	call   403100 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  405a46:	48 8d b4 24 90 01 00 	lea    0x190(%rsp),%rsi
  405a4d:	00 
  405a4e:	48 8d bc 24 20 1c 00 	lea    0x1c20(%rsp),%rdi
  405a55:	00 
  405a56:	e8 45 da ff ff       	call   4034a0 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  405a5b:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  405a62:	00 
	if (!_M_is_local())
  405a63:	48 8d 84 24 a0 01 00 	lea    0x1a0(%rsp),%rax
  405a6a:	00 
  405a6b:	48 89 04 24          	mov    %rax,(%rsp)
  405a6f:	48 39 c7             	cmp    %rax,%rdi
  405a72:	74 15                	je     405a89 <main+0x19f9>
  405a74:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  405a7b:	00 
  405a7c:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405a83:	00 
  405a84:	e8 b7 d7 ff ff       	call   403240 <_ZdlPvm@plt>
  405a89:	4c 89 ef             	mov    %r13,%rdi
  405a8c:	e8 bf d8 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
							typedtext.insert(0, "Voce deveria saber matematica");
  405a91:	4c 89 ef             	mov    %r13,%rdi
  405a94:	e8 67 da ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
  405a99:	4c 89 ea             	mov    %r13,%rdx
  405a9c:	be a6 90 40 00       	mov    $0x4090a6,%esi
  405aa1:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  405aa8:	00 
  405aa9:	e8 52 d6 ff ff       	call   403100 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  405aae:	48 8d 94 24 90 01 00 	lea    0x190(%rsp),%rdx
  405ab5:	00 
  405ab6:	31 f6                	xor    %esi,%esi
  405ab8:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  405abf:	00 
  405ac0:	e8 0b d7 ff ff       	call   4031d0 <_ZN2sf6String6insertEmRKS0_@plt>
      { return _M_dataplus._M_p; }
  405ac5:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  405acc:	00 
	if (!_M_is_local())
  405acd:	48 3b 3c 24          	cmp    (%rsp),%rdi
  405ad1:	74 15                	je     405ae8 <main+0x1a58>
  405ad3:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  405ada:	00 
  405adb:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405ae2:	00 
  405ae3:	e8 58 d7 ff ff       	call   403240 <_ZdlPvm@plt>
  405ae8:	4c 89 ef             	mov    %r13,%rdi
  405aeb:	e8 60 d8 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
							clock_text.restart();
  405af0:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  405af5:	e8 16 d9 ff ff       	call   403410 <_ZN2sf5Clock7restartEv@plt>
							clock_bomb.restart();
  405afa:	48 8d 7c 24 78       	lea    0x78(%rsp),%rdi
  405aff:	e8 0c d9 ff ff       	call   403410 <_ZN2sf5Clock7restartEv@plt>
							screen = 2;
  405b04:	c7 44 24 1c 02 00 00 	movl   $0x2,0x1c(%rsp)
  405b0b:	00 
  405b0c:	e9 8f fc ff ff       	jmp    4057a0 <main+0x1710>
      }

      static _GLIBCXX20_CONSTEXPR char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
	if (__n == 0)
  405b11:	4d 85 e4             	test   %r12,%r12
  405b14:	0f 85 1e 12 00 00    	jne    406d38 <main+0x2ca8>
  405b1a:	4c 89 f8             	mov    %r15,%rax
  405b1d:	e9 0d fe ff ff       	jmp    40592f <main+0x189f>
	    _M_data(_M_create(__dnew, size_type(0)));
  405b22:	31 d2                	xor    %edx,%edx
  405b24:	48 8d b4 24 90 01 00 	lea    0x190(%rsp),%rsi
  405b2b:	00 
  405b2c:	4c 89 ef             	mov    %r13,%rdi
  405b2f:	e8 8c d9 ff ff       	call   4034c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
  405b34:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  405b3b:	00 
  405b3c:	48 89 c7             	mov    %rax,%rdi
      { _M_allocated_capacity = __capacity; }
  405b3f:	48 8b 84 24 90 01 00 	mov    0x190(%rsp),%rax
  405b46:	00 
  405b47:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  405b4e:	00 
	const _CharT* __start = __str._M_data()
  405b4f:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
	  return __s1;
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
  405b54:	4c 89 e2             	mov    %r12,%rdx
  405b57:	48 83 c6 01          	add    $0x1,%rsi
  405b5b:	e8 90 d6 ff ff       	call   4031f0 <memcpy@plt>
	_M_set_length(__dnew);
  405b60:	4c 8b a4 24 90 01 00 	mov    0x190(%rsp),%r12
  405b67:	00 
      { return _M_dataplus._M_p; }
  405b68:	48 8b 84 24 70 01 00 	mov    0x170(%rsp),%rax
  405b6f:	00 
  405b70:	e9 ba fd ff ff       	jmp    40592f <main+0x189f>
						text.setString(text.getString() + typedtext[0]);
  405b75:	31 f6                	xor    %esi,%esi
  405b77:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  405b7e:	00 
  405b7f:	e8 2c d7 ff ff       	call   4032b0 <_ZN2sf6StringixEm@plt>
  405b84:	8b 30                	mov    (%rax),%esi
  405b86:	48 8d bc 24 70 01 00 	lea    0x170(%rsp),%rdi
  405b8d:	00 
  405b8e:	e8 3d d5 ff ff       	call   4030d0 <_ZN2sf6StringC1Ej@plt>
  405b93:	48 8d bc 24 20 1c 00 	lea    0x1c20(%rsp),%rdi
  405b9a:	00 
  405b9b:	e8 50 d8 ff ff       	call   4033f0 <_ZNK2sf4Text9getStringEv@plt>
  405ba0:	48 89 c6             	mov    %rax,%rsi
  405ba3:	48 8d 94 24 70 01 00 	lea    0x170(%rsp),%rdx
  405baa:	00 
  405bab:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  405bb2:	00 
  405bb3:	e8 28 d5 ff ff       	call   4030e0 <_ZN2sfplERKNS_6StringES2_@plt>
  405bb8:	48 8d b4 24 90 01 00 	lea    0x190(%rsp),%rsi
  405bbf:	00 
  405bc0:	48 8d bc 24 20 1c 00 	lea    0x1c20(%rsp),%rdi
  405bc7:	00 
  405bc8:	e8 d3 d8 ff ff       	call   4034a0 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
  405bcd:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  405bd4:	00 
	if (!_M_is_local())
  405bd5:	48 8d 84 24 a0 01 00 	lea    0x1a0(%rsp),%rax
  405bdc:	00 
  405bdd:	48 89 04 24          	mov    %rax,(%rsp)
  405be1:	48 39 c7             	cmp    %rax,%rdi
  405be4:	74 15                	je     405bfb <main+0x1b6b>
  405be6:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  405bed:	00 
  405bee:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405bf5:	00 
  405bf6:	e8 45 d6 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  405bfb:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  405c02:	00 
	if (!_M_is_local())
  405c03:	4c 8d bc 24 80 01 00 	lea    0x180(%rsp),%r15
  405c0a:	00 
  405c0b:	4c 39 ff             	cmp    %r15,%rdi
  405c0e:	74 15                	je     405c25 <main+0x1b95>
  405c10:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  405c17:	00 
  405c18:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405c1f:	00 
  405c20:	e8 1b d6 ff ff       	call   403240 <_ZdlPvm@plt>
						typedtext = typedtext.toAnsiString().substr(1);
  405c25:	48 8d ac 24 a0 00 00 	lea    0xa0(%rsp),%rbp
  405c2c:	00 
  405c2d:	4c 8d b4 24 88 00 00 	lea    0x88(%rsp),%r14
  405c34:	00 
  405c35:	48 89 ef             	mov    %rbp,%rdi
  405c38:	4c 8d a4 24 50 01 00 	lea    0x150(%rsp),%r12
  405c3f:	00 
  405c40:	e8 bb d8 ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
  405c45:	4c 89 f7             	mov    %r14,%rdi
  405c48:	e8 b3 d8 ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
  405c4d:	4c 89 f2             	mov    %r14,%rdx
  405c50:	48 8d b4 24 d0 00 00 	lea    0xd0(%rsp),%rsi
  405c57:	00 
  405c58:	4c 89 e7             	mov    %r12,%rdi
  405c5b:	e8 30 d8 ff ff       	call   403490 <_ZNK2sf6String12toAnsiStringB5cxx11ERKSt6locale@plt>
  405c60:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
  405c67:	ba 01 00 00 00       	mov    $0x1,%edx
  405c6c:	4c 89 e6             	mov    %r12,%rsi
  405c6f:	48 8d bc 24 70 01 00 	lea    0x170(%rsp),%rdi
  405c76:	00 
  405c77:	e8 d4 d5 ff ff       	call   403250 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@plt>
  405c7c:	48 89 ea             	mov    %rbp,%rdx
  405c7f:	48 8d b4 24 70 01 00 	lea    0x170(%rsp),%rsi
  405c86:	00 
  405c87:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  405c8e:	00 
  405c8f:	e8 1c d4 ff ff       	call   4030b0 <_ZN2sf6StringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6locale@plt>
  405c94:	48 8d b4 24 90 01 00 	lea    0x190(%rsp),%rsi
  405c9b:	00 
  405c9c:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  405ca3:	00 
  405ca4:	e8 b7 d7 ff ff       	call   403460 <_ZN2sf6StringaSERKS0_@plt>
      { return _M_dataplus._M_p; }
  405ca9:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  405cb0:	00 
	if (!_M_is_local())
  405cb1:	48 3b 3c 24          	cmp    (%rsp),%rdi
  405cb5:	74 15                	je     405ccc <main+0x1c3c>
  405cb7:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  405cbe:	00 
  405cbf:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405cc6:	00 
  405cc7:	e8 74 d5 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  405ccc:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  405cd3:	00 
	if (!_M_is_local())
  405cd4:	4c 39 ff             	cmp    %r15,%rdi
  405cd7:	74 11                	je     405cea <main+0x1c5a>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  405cd9:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  405ce0:	00 
  405ce1:	48 8d 70 01          	lea    0x1(%rax),%rsi
  405ce5:	e8 56 d5 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  405cea:	48 8b bc 24 50 01 00 	mov    0x150(%rsp),%rdi
  405cf1:	00 
	if (!_M_is_local())
  405cf2:	48 8d 84 24 60 01 00 	lea    0x160(%rsp),%rax
  405cf9:	00 
  405cfa:	48 39 c7             	cmp    %rax,%rdi
  405cfd:	74 11                	je     405d10 <main+0x1c80>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  405cff:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  405d06:	00 
  405d07:	48 8d 70 01          	lea    0x1(%rax),%rsi
  405d0b:	e8 30 d5 ff ff       	call   403240 <_ZdlPvm@plt>
  405d10:	4c 89 f7             	mov    %r14,%rdi
  405d13:	e8 38 d6 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
  405d18:	48 89 ef             	mov    %rbp,%rdi
  405d1b:	e8 30 d6 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
  405d20:	e9 58 f1 ff ff       	jmp    404e7d <main+0xded>
				window.draw(text);
  405d25:	ba e0 c2 40 00       	mov    $0x40c2e0,%edx
  405d2a:	48 8d b4 24 20 1c 00 	lea    0x1c20(%rsp),%rsi
  405d31:	00 
  405d32:	48 8d bc 24 a0 20 00 	lea    0x20a0(%rsp),%rdi
  405d39:	00 
  405d3a:	e8 f1 d6 ff ff       	call   403430 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
  405d3f:	e9 76 f1 ff ff       	jmp    404eba <main+0xe2a>
						text.setString(text.getString() + typedtext[0]);
  405d44:	31 f6                	xor    %esi,%esi
  405d46:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  405d4d:	00 
  405d4e:	e8 5d d5 ff ff       	call   4032b0 <_ZN2sf6StringixEm@plt>
  405d53:	8b 30                	mov    (%rax),%esi
  405d55:	48 8d bc 24 70 01 00 	lea    0x170(%rsp),%rdi
  405d5c:	00 
  405d5d:	e8 6e d3 ff ff       	call   4030d0 <_ZN2sf6StringC1Ej@plt>
  405d62:	48 8d bc 24 20 1c 00 	lea    0x1c20(%rsp),%rdi
  405d69:	00 
  405d6a:	e8 81 d6 ff ff       	call   4033f0 <_ZNK2sf4Text9getStringEv@plt>
  405d6f:	48 89 c6             	mov    %rax,%rsi
  405d72:	48 8d 94 24 70 01 00 	lea    0x170(%rsp),%rdx
  405d79:	00 
  405d7a:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  405d81:	00 
  405d82:	e8 59 d3 ff ff       	call   4030e0 <_ZN2sfplERKNS_6StringES2_@plt>
  405d87:	48 8d b4 24 90 01 00 	lea    0x190(%rsp),%rsi
  405d8e:	00 
  405d8f:	48 8d bc 24 20 1c 00 	lea    0x1c20(%rsp),%rdi
  405d96:	00 
  405d97:	e8 04 d7 ff ff       	call   4034a0 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  405d9c:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  405da3:	00 
	if (!_M_is_local())
  405da4:	48 8d 84 24 a0 01 00 	lea    0x1a0(%rsp),%rax
  405dab:	00 
  405dac:	48 89 04 24          	mov    %rax,(%rsp)
  405db0:	48 39 c7             	cmp    %rax,%rdi
  405db3:	74 15                	je     405dca <main+0x1d3a>
  405db5:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  405dbc:	00 
  405dbd:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405dc4:	00 
  405dc5:	e8 76 d4 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  405dca:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  405dd1:	00 
	if (!_M_is_local())
  405dd2:	4c 8d bc 24 80 01 00 	lea    0x180(%rsp),%r15
  405dd9:	00 
  405dda:	4c 39 ff             	cmp    %r15,%rdi
  405ddd:	74 15                	je     405df4 <main+0x1d64>
  405ddf:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  405de6:	00 
  405de7:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405dee:	00 
  405def:	e8 4c d4 ff ff       	call   403240 <_ZdlPvm@plt>
						typedtext = typedtext.toAnsiString().substr(1);
  405df4:	48 8d ac 24 a0 00 00 	lea    0xa0(%rsp),%rbp
  405dfb:	00 
  405dfc:	4c 8d b4 24 88 00 00 	lea    0x88(%rsp),%r14
  405e03:	00 
  405e04:	48 89 ef             	mov    %rbp,%rdi
  405e07:	4c 8d a4 24 50 01 00 	lea    0x150(%rsp),%r12
  405e0e:	00 
  405e0f:	e8 ec d6 ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
  405e14:	4c 89 f7             	mov    %r14,%rdi
  405e17:	e8 e4 d6 ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
  405e1c:	4c 89 f2             	mov    %r14,%rdx
  405e1f:	48 8d b4 24 d0 00 00 	lea    0xd0(%rsp),%rsi
  405e26:	00 
  405e27:	4c 89 e7             	mov    %r12,%rdi
  405e2a:	e8 61 d6 ff ff       	call   403490 <_ZNK2sf6String12toAnsiStringB5cxx11ERKSt6locale@plt>
  405e2f:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
  405e33:	ba 01 00 00 00       	mov    $0x1,%edx
  405e38:	4c 89 e6             	mov    %r12,%rsi
  405e3b:	48 8d bc 24 70 01 00 	lea    0x170(%rsp),%rdi
  405e42:	00 
  405e43:	e8 08 d4 ff ff       	call   403250 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@plt>
  405e48:	48 89 ea             	mov    %rbp,%rdx
  405e4b:	48 8d b4 24 70 01 00 	lea    0x170(%rsp),%rsi
  405e52:	00 
  405e53:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  405e5a:	00 
  405e5b:	e8 50 d2 ff ff       	call   4030b0 <_ZN2sf6StringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6locale@plt>
  405e60:	48 8d b4 24 90 01 00 	lea    0x190(%rsp),%rsi
  405e67:	00 
  405e68:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  405e6f:	00 
  405e70:	e8 eb d5 ff ff       	call   403460 <_ZN2sf6StringaSERKS0_@plt>
      { return _M_dataplus._M_p; }
  405e75:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  405e7c:	00 
	if (!_M_is_local())
  405e7d:	48 3b 3c 24          	cmp    (%rsp),%rdi
  405e81:	74 15                	je     405e98 <main+0x1e08>
  405e83:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  405e8a:	00 
  405e8b:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405e92:	00 
  405e93:	e8 a8 d3 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  405e98:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  405e9f:	00 
	if (!_M_is_local())
  405ea0:	4c 39 ff             	cmp    %r15,%rdi
  405ea3:	74 11                	je     405eb6 <main+0x1e26>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  405ea5:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  405eac:	00 
  405ead:	48 8d 70 01          	lea    0x1(%rax),%rsi
  405eb1:	e8 8a d3 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  405eb6:	48 8b bc 24 50 01 00 	mov    0x150(%rsp),%rdi
  405ebd:	00 
	if (!_M_is_local())
  405ebe:	48 8d 84 24 60 01 00 	lea    0x160(%rsp),%rax
  405ec5:	00 
  405ec6:	48 39 c7             	cmp    %rax,%rdi
  405ec9:	74 11                	je     405edc <main+0x1e4c>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  405ecb:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  405ed2:	00 
  405ed3:	48 8d 70 01          	lea    0x1(%rax),%rsi
  405ed7:	e8 64 d3 ff ff       	call   403240 <_ZdlPvm@plt>
  405edc:	4c 89 f7             	mov    %r14,%rdi
  405edf:	e8 6c d4 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
  405ee4:	48 89 ef             	mov    %rbp,%rdi
  405ee7:	e8 64 d4 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
  405eec:	e9 d4 f6 ff ff       	jmp    4055c5 <main+0x1535>
						text.setString(text.getString() + typedtext[0]);
  405ef1:	31 f6                	xor    %esi,%esi
  405ef3:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  405efa:	00 
  405efb:	e8 b0 d3 ff ff       	call   4032b0 <_ZN2sf6StringixEm@plt>
  405f00:	8b 30                	mov    (%rax),%esi
  405f02:	48 8d bc 24 70 01 00 	lea    0x170(%rsp),%rdi
  405f09:	00 
  405f0a:	e8 c1 d1 ff ff       	call   4030d0 <_ZN2sf6StringC1Ej@plt>
  405f0f:	48 8d bc 24 20 1c 00 	lea    0x1c20(%rsp),%rdi
  405f16:	00 
  405f17:	e8 d4 d4 ff ff       	call   4033f0 <_ZNK2sf4Text9getStringEv@plt>
  405f1c:	48 89 c6             	mov    %rax,%rsi
  405f1f:	48 8d 94 24 70 01 00 	lea    0x170(%rsp),%rdx
  405f26:	00 
  405f27:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  405f2e:	00 
  405f2f:	e8 ac d1 ff ff       	call   4030e0 <_ZN2sfplERKNS_6StringES2_@plt>
  405f34:	48 8d b4 24 90 01 00 	lea    0x190(%rsp),%rsi
  405f3b:	00 
  405f3c:	48 8d bc 24 20 1c 00 	lea    0x1c20(%rsp),%rdi
  405f43:	00 
  405f44:	e8 57 d5 ff ff       	call   4034a0 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  405f49:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  405f50:	00 
	if (!_M_is_local())
  405f51:	48 8d 84 24 a0 01 00 	lea    0x1a0(%rsp),%rax
  405f58:	00 
  405f59:	48 89 04 24          	mov    %rax,(%rsp)
  405f5d:	48 39 c7             	cmp    %rax,%rdi
  405f60:	74 15                	je     405f77 <main+0x1ee7>
  405f62:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  405f69:	00 
  405f6a:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405f71:	00 
  405f72:	e8 c9 d2 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  405f77:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  405f7e:	00 
	if (!_M_is_local())
  405f7f:	4c 8d bc 24 80 01 00 	lea    0x180(%rsp),%r15
  405f86:	00 
  405f87:	4c 39 ff             	cmp    %r15,%rdi
  405f8a:	74 15                	je     405fa1 <main+0x1f11>
  405f8c:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  405f93:	00 
  405f94:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405f9b:	00 
  405f9c:	e8 9f d2 ff ff       	call   403240 <_ZdlPvm@plt>
						typedtext = typedtext.toAnsiString().substr(1);
  405fa1:	48 8d ac 24 a0 00 00 	lea    0xa0(%rsp),%rbp
  405fa8:	00 
  405fa9:	4c 8d b4 24 88 00 00 	lea    0x88(%rsp),%r14
  405fb0:	00 
  405fb1:	48 89 ef             	mov    %rbp,%rdi
  405fb4:	4c 8d a4 24 50 01 00 	lea    0x150(%rsp),%r12
  405fbb:	00 
  405fbc:	e8 3f d5 ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
  405fc1:	4c 89 f7             	mov    %r14,%rdi
  405fc4:	e8 37 d5 ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
  405fc9:	4c 89 f2             	mov    %r14,%rdx
  405fcc:	48 8d b4 24 d0 00 00 	lea    0xd0(%rsp),%rsi
  405fd3:	00 
  405fd4:	4c 89 e7             	mov    %r12,%rdi
  405fd7:	e8 b4 d4 ff ff       	call   403490 <_ZNK2sf6String12toAnsiStringB5cxx11ERKSt6locale@plt>
  405fdc:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
  405fe0:	ba 01 00 00 00       	mov    $0x1,%edx
  405fe5:	4c 89 e6             	mov    %r12,%rsi
  405fe8:	48 8d bc 24 70 01 00 	lea    0x170(%rsp),%rdi
  405fef:	00 
  405ff0:	e8 5b d2 ff ff       	call   403250 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@plt>
  405ff5:	48 89 ea             	mov    %rbp,%rdx
  405ff8:	48 8d b4 24 70 01 00 	lea    0x170(%rsp),%rsi
  405fff:	00 
  406000:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  406007:	00 
  406008:	e8 a3 d0 ff ff       	call   4030b0 <_ZN2sf6StringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6locale@plt>
  40600d:	48 8d b4 24 90 01 00 	lea    0x190(%rsp),%rsi
  406014:	00 
  406015:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  40601c:	00 
  40601d:	e8 3e d4 ff ff       	call   403460 <_ZN2sf6StringaSERKS0_@plt>
      { return _M_dataplus._M_p; }
  406022:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  406029:	00 
	if (!_M_is_local())
  40602a:	48 3b 3c 24          	cmp    (%rsp),%rdi
  40602e:	74 15                	je     406045 <main+0x1fb5>
  406030:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  406037:	00 
  406038:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  40603f:	00 
  406040:	e8 fb d1 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  406045:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  40604c:	00 
	if (!_M_is_local())
  40604d:	4c 39 ff             	cmp    %r15,%rdi
  406050:	74 11                	je     406063 <main+0x1fd3>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  406052:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  406059:	00 
  40605a:	48 8d 70 01          	lea    0x1(%rax),%rsi
  40605e:	e8 dd d1 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  406063:	48 8b bc 24 50 01 00 	mov    0x150(%rsp),%rdi
  40606a:	00 
	if (!_M_is_local())
  40606b:	48 8d 84 24 60 01 00 	lea    0x160(%rsp),%rax
  406072:	00 
  406073:	48 39 c7             	cmp    %rax,%rdi
  406076:	74 11                	je     406089 <main+0x1ff9>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  406078:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  40607f:	00 
  406080:	48 8d 70 01          	lea    0x1(%rax),%rsi
  406084:	e8 b7 d1 ff ff       	call   403240 <_ZdlPvm@plt>
  406089:	4c 89 f7             	mov    %r14,%rdi
  40608c:	e8 bf d2 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
  406091:	48 89 ef             	mov    %rbp,%rdi
  406094:	e8 b7 d2 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
  406099:	e9 3f f1 ff ff       	jmp    4051dd <main+0x114d>
						text.setString(text.getString() + typedtext[0]);
  40609e:	31 f6                	xor    %esi,%esi
  4060a0:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  4060a7:	00 
  4060a8:	e8 03 d2 ff ff       	call   4032b0 <_ZN2sf6StringixEm@plt>
  4060ad:	8b 30                	mov    (%rax),%esi
  4060af:	48 8d bc 24 70 01 00 	lea    0x170(%rsp),%rdi
  4060b6:	00 
  4060b7:	e8 14 d0 ff ff       	call   4030d0 <_ZN2sf6StringC1Ej@plt>
  4060bc:	48 8d bc 24 20 1c 00 	lea    0x1c20(%rsp),%rdi
  4060c3:	00 
  4060c4:	e8 27 d3 ff ff       	call   4033f0 <_ZNK2sf4Text9getStringEv@plt>
  4060c9:	48 89 c6             	mov    %rax,%rsi
  4060cc:	48 8d 94 24 70 01 00 	lea    0x170(%rsp),%rdx
  4060d3:	00 
  4060d4:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  4060db:	00 
  4060dc:	e8 ff cf ff ff       	call   4030e0 <_ZN2sfplERKNS_6StringES2_@plt>
  4060e1:	48 8d b4 24 90 01 00 	lea    0x190(%rsp),%rsi
  4060e8:	00 
  4060e9:	48 8d bc 24 20 1c 00 	lea    0x1c20(%rsp),%rdi
  4060f0:	00 
  4060f1:	e8 aa d3 ff ff       	call   4034a0 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  4060f6:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  4060fd:	00 
	if (!_M_is_local())
  4060fe:	48 8d 84 24 a0 01 00 	lea    0x1a0(%rsp),%rax
  406105:	00 
  406106:	48 89 04 24          	mov    %rax,(%rsp)
  40610a:	48 39 c7             	cmp    %rax,%rdi
  40610d:	74 15                	je     406124 <main+0x2094>
  40610f:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  406116:	00 
  406117:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  40611e:	00 
  40611f:	e8 1c d1 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  406124:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  40612b:	00 
	if (!_M_is_local())
  40612c:	4c 8d bc 24 80 01 00 	lea    0x180(%rsp),%r15
  406133:	00 
  406134:	4c 39 ff             	cmp    %r15,%rdi
  406137:	74 15                	je     40614e <main+0x20be>
  406139:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  406140:	00 
  406141:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  406148:	00 
  406149:	e8 f2 d0 ff ff       	call   403240 <_ZdlPvm@plt>
						typedtext = typedtext.toAnsiString().substr(1);
  40614e:	48 8d ac 24 a0 00 00 	lea    0xa0(%rsp),%rbp
  406155:	00 
  406156:	4c 8d b4 24 88 00 00 	lea    0x88(%rsp),%r14
  40615d:	00 
  40615e:	48 89 ef             	mov    %rbp,%rdi
  406161:	4c 8d a4 24 50 01 00 	lea    0x150(%rsp),%r12
  406168:	00 
  406169:	e8 92 d3 ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
  40616e:	4c 89 f7             	mov    %r14,%rdi
  406171:	e8 8a d3 ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
  406176:	4c 89 f2             	mov    %r14,%rdx
  406179:	48 8d b4 24 d0 00 00 	lea    0xd0(%rsp),%rsi
  406180:	00 
  406181:	4c 89 e7             	mov    %r12,%rdi
  406184:	e8 07 d3 ff ff       	call   403490 <_ZNK2sf6String12toAnsiStringB5cxx11ERKSt6locale@plt>
  406189:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
  40618d:	ba 01 00 00 00       	mov    $0x1,%edx
  406192:	4c 89 e6             	mov    %r12,%rsi
  406195:	48 8d bc 24 70 01 00 	lea    0x170(%rsp),%rdi
  40619c:	00 
  40619d:	e8 ae d0 ff ff       	call   403250 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@plt>
  4061a2:	48 89 ea             	mov    %rbp,%rdx
  4061a5:	48 8d b4 24 70 01 00 	lea    0x170(%rsp),%rsi
  4061ac:	00 
  4061ad:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  4061b4:	00 
  4061b5:	e8 f6 ce ff ff       	call   4030b0 <_ZN2sf6StringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6locale@plt>
  4061ba:	48 8d b4 24 90 01 00 	lea    0x190(%rsp),%rsi
  4061c1:	00 
  4061c2:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  4061c9:	00 
  4061ca:	e8 91 d2 ff ff       	call   403460 <_ZN2sf6StringaSERKS0_@plt>
      { return _M_dataplus._M_p; }
  4061cf:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  4061d6:	00 
	if (!_M_is_local())
  4061d7:	48 3b 3c 24          	cmp    (%rsp),%rdi
  4061db:	74 15                	je     4061f2 <main+0x2162>
  4061dd:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  4061e4:	00 
  4061e5:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4061ec:	00 
  4061ed:	e8 4e d0 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  4061f2:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  4061f9:	00 
	if (!_M_is_local())
  4061fa:	4c 39 ff             	cmp    %r15,%rdi
  4061fd:	74 11                	je     406210 <main+0x2180>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4061ff:	48 8b 84 24 80 01 00 	mov    0x180(%rsp),%rax
  406206:	00 
  406207:	48 8d 70 01          	lea    0x1(%rax),%rsi
  40620b:	e8 30 d0 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  406210:	48 8b bc 24 50 01 00 	mov    0x150(%rsp),%rdi
  406217:	00 
	if (!_M_is_local())
  406218:	48 8d 84 24 60 01 00 	lea    0x160(%rsp),%rax
  40621f:	00 
  406220:	48 39 c7             	cmp    %rax,%rdi
  406223:	74 11                	je     406236 <main+0x21a6>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  406225:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
  40622c:	00 
  40622d:	48 8d 70 01          	lea    0x1(%rax),%rsi
  406231:	e8 0a d0 ff ff       	call   403240 <_ZdlPvm@plt>
  406236:	4c 89 f7             	mov    %r14,%rdi
  406239:	e8 12 d1 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
  40623e:	48 89 ef             	mov    %rbp,%rdi
  406241:	e8 0a d1 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
  406246:	e9 d2 ec ff ff       	jmp    404f1d <main+0xe8d>
  40624b:	b8 f0 bc 40 00       	mov    $0x40bcf0,%eax
      { return _M_dataplus._M_p; }
  406250:	48 8b bc 24 30 01 00 	mov    0x130(%rsp),%rdi
  406257:	00 
  406258:	66 48 0f 6e d8       	movq   %rax,%xmm3
	if (!_M_is_local())
  40625d:	48 8d 84 24 40 01 00 	lea    0x140(%rsp),%rax
  406264:	00 
  406265:	0f 16 1d 7c 32 00 00 	movhps 0x327c(%rip),%xmm3        # 4094e8 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe8>
  40626c:	0f 29 1c 24          	movaps %xmm3,(%rsp)
  406270:	48 39 c7             	cmp    %rax,%rdi
  406273:	74 11                	je     406286 <main+0x21f6>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  406275:	48 8b 84 24 40 01 00 	mov    0x140(%rsp),%rax
  40627c:	00 
  40627d:	48 8d 70 01          	lea    0x1(%rax),%rsi
  406281:	e8 ba cf ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  406286:	48 8b bc 24 10 01 00 	mov    0x110(%rsp),%rdi
  40628d:	00 
	if (!_M_is_local())
  40628e:	48 8d 84 24 20 01 00 	lea    0x120(%rsp),%rax
  406295:	00 
  406296:	48 39 c7             	cmp    %rax,%rdi
  406299:	74 11                	je     4062ac <main+0x221c>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  40629b:	48 8b 84 24 20 01 00 	mov    0x120(%rsp),%rax
  4062a2:	00 
  4062a3:	48 8d 70 01          	lea    0x1(%rax),%rsi
  4062a7:	e8 94 cf ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  4062ac:	48 8b bc 24 f0 00 00 	mov    0xf0(%rsp),%rdi
  4062b3:	00 
	if (!_M_is_local())
  4062b4:	48 8d 84 24 00 01 00 	lea    0x100(%rsp),%rax
  4062bb:	00 
  4062bc:	48 39 c7             	cmp    %rax,%rdi
  4062bf:	74 15                	je     4062d6 <main+0x2246>
  4062c1:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
  4062c8:	00 
  4062c9:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4062d0:	00 
  4062d1:	e8 6a cf ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  4062d6:	48 8b bc 24 d0 00 00 	mov    0xd0(%rsp),%rdi
  4062dd:	00 
	if (!_M_is_local())
  4062de:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
  4062e5:	00 
  4062e6:	48 39 c7             	cmp    %rax,%rdi
  4062e9:	74 15                	je     406300 <main+0x2270>
  4062eb:	48 8b 84 24 e0 00 00 	mov    0xe0(%rsp),%rax
  4062f2:	00 
  4062f3:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4062fa:	00 
  4062fb:	e8 40 cf ff ff       	call   403240 <_ZdlPvm@plt>
}
  406300:	48 8d bc 24 90 02 00 	lea    0x290(%rsp),%rdi
  406307:	00 
  406308:	e8 73 d0 ff ff       	call   403380 <_ZN2sf5MusicD1Ev@plt>
  40630d:	48 8d bc 24 00 1f 00 	lea    0x1f00(%rsp),%rdi
  406314:	00 
  406315:	e8 56 1d 00 00       	call   408070 <_ZN2sf4TextD1Ev>
  40631a:	48 8d bc 24 90 1d 00 	lea    0x1d90(%rsp),%rdi
  406321:	00 
  406322:	e8 49 1d 00 00       	call   408070 <_ZN2sf4TextD1Ev>
  406327:	48 8d bc 24 20 1c 00 	lea    0x1c20(%rsp),%rdi
  40632e:	00 
  40632f:	e8 3c 1d 00 00       	call   408070 <_ZN2sf4TextD1Ev>
  406334:	48 8d bc 24 00 02 00 	lea    0x200(%rsp),%rdi
  40633b:	00 
  40633c:	e8 3f cf ff ff       	call   403280 <_ZN2sf4FontD1Ev@plt>
  406341:	66 0f 6f 14 24       	movdqa (%rsp),%xmm2
  406346:	48 8d bc 24 c0 1a 00 	lea    0x1ac0(%rsp),%rdi
  40634d:	00 
  40634e:	0f 29 94 24 c0 1a 00 	movaps %xmm2,0x1ac0(%rsp)
  406355:	00 
  406356:	e8 05 cd ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  40635b:	66 0f 6f 14 24       	movdqa (%rsp),%xmm2
  406360:	48 8d bc 24 60 19 00 	lea    0x1960(%rsp),%rdi
  406367:	00 
  406368:	0f 29 94 24 60 19 00 	movaps %xmm2,0x1960(%rsp)
  40636f:	00 
  406370:	e8 eb cc ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  406375:	66 0f 6f 14 24       	movdqa (%rsp),%xmm2
  40637a:	48 8d bc 24 00 18 00 	lea    0x1800(%rsp),%rdi
  406381:	00 
  406382:	0f 29 94 24 00 18 00 	movaps %xmm2,0x1800(%rsp)
  406389:	00 
  40638a:	e8 d1 cc ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  40638f:	66 0f 6f 14 24       	movdqa (%rsp),%xmm2
  406394:	48 8d bc 24 a0 16 00 	lea    0x16a0(%rsp),%rdi
  40639b:	00 
  40639c:	0f 29 94 24 a0 16 00 	movaps %xmm2,0x16a0(%rsp)
  4063a3:	00 
  4063a4:	e8 b7 cc ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4063a9:	66 0f 6f 14 24       	movdqa (%rsp),%xmm2
  4063ae:	48 8d bc 24 40 15 00 	lea    0x1540(%rsp),%rdi
  4063b5:	00 
  4063b6:	0f 29 94 24 40 15 00 	movaps %xmm2,0x1540(%rsp)
  4063bd:	00 
  4063be:	e8 9d cc ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4063c3:	66 0f 6f 14 24       	movdqa (%rsp),%xmm2
  4063c8:	48 8d bc 24 e0 13 00 	lea    0x13e0(%rsp),%rdi
  4063cf:	00 
  4063d0:	0f 29 94 24 e0 13 00 	movaps %xmm2,0x13e0(%rsp)
  4063d7:	00 
  4063d8:	e8 83 cc ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4063dd:	66 0f 6f 14 24       	movdqa (%rsp),%xmm2
  4063e2:	48 8d bc 24 80 12 00 	lea    0x1280(%rsp),%rdi
  4063e9:	00 
  4063ea:	0f 29 94 24 80 12 00 	movaps %xmm2,0x1280(%rsp)
  4063f1:	00 
  4063f2:	e8 69 cc ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4063f7:	66 0f 6f 14 24       	movdqa (%rsp),%xmm2
  4063fc:	48 8d bc 24 20 11 00 	lea    0x1120(%rsp),%rdi
  406403:	00 
  406404:	0f 29 94 24 20 11 00 	movaps %xmm2,0x1120(%rsp)
  40640b:	00 
  40640c:	e8 4f cc ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  406411:	66 0f 6f 14 24       	movdqa (%rsp),%xmm2
  406416:	48 8d bc 24 c0 0f 00 	lea    0xfc0(%rsp),%rdi
  40641d:	00 
  40641e:	0f 29 94 24 c0 0f 00 	movaps %xmm2,0xfc0(%rsp)
  406425:	00 
  406426:	e8 35 cc ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  40642b:	66 0f 6f 14 24       	movdqa (%rsp),%xmm2
  406430:	48 8d bc 24 60 0e 00 	lea    0xe60(%rsp),%rdi
  406437:	00 
  406438:	0f 29 94 24 60 0e 00 	movaps %xmm2,0xe60(%rsp)
  40643f:	00 
  406440:	e8 1b cc ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  406445:	66 0f 6f 14 24       	movdqa (%rsp),%xmm2
  40644a:	48 8d bc 24 00 0d 00 	lea    0xd00(%rsp),%rdi
  406451:	00 
  406452:	0f 29 94 24 00 0d 00 	movaps %xmm2,0xd00(%rsp)
  406459:	00 
  40645a:	e8 01 cc ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  40645f:	66 0f 6f 14 24       	movdqa (%rsp),%xmm2
  406464:	48 8d bc 24 a0 0b 00 	lea    0xba0(%rsp),%rdi
  40646b:	00 
  40646c:	0f 29 94 24 a0 0b 00 	movaps %xmm2,0xba0(%rsp)
  406473:	00 
  406474:	e8 e7 cb ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  406479:	66 0f 6f 14 24       	movdqa (%rsp),%xmm2
  40647e:	48 8d bc 24 40 0a 00 	lea    0xa40(%rsp),%rdi
  406485:	00 
  406486:	0f 29 94 24 40 0a 00 	movaps %xmm2,0xa40(%rsp)
  40648d:	00 
  40648e:	e8 cd cb ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  406493:	66 0f 6f 14 24       	movdqa (%rsp),%xmm2
  406498:	48 8d bc 24 e0 08 00 	lea    0x8e0(%rsp),%rdi
  40649f:	00 
  4064a0:	0f 29 94 24 e0 08 00 	movaps %xmm2,0x8e0(%rsp)
  4064a7:	00 
  4064a8:	e8 b3 cb ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4064ad:	66 0f 6f 14 24       	movdqa (%rsp),%xmm2
  4064b2:	48 8d bc 24 80 07 00 	lea    0x780(%rsp),%rdi
  4064b9:	00 
  4064ba:	0f 29 94 24 80 07 00 	movaps %xmm2,0x780(%rsp)
  4064c1:	00 
  4064c2:	e8 99 cb ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4064c7:	66 0f 6f 14 24       	movdqa (%rsp),%xmm2
  4064cc:	48 8d bc 24 20 06 00 	lea    0x620(%rsp),%rdi
  4064d3:	00 
  4064d4:	0f 29 94 24 20 06 00 	movaps %xmm2,0x620(%rsp)
  4064db:	00 
  4064dc:	e8 7f cb ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4064e1:	66 0f 6f 14 24       	movdqa (%rsp),%xmm2
  4064e6:	48 8d bc 24 c0 04 00 	lea    0x4c0(%rsp),%rdi
  4064ed:	00 
  4064ee:	0f 29 94 24 c0 04 00 	movaps %xmm2,0x4c0(%rsp)
  4064f5:	00 
  4064f6:	e8 65 cb ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4064fb:	66 0f 6f 14 24       	movdqa (%rsp),%xmm2
  406500:	48 8d bc 24 60 03 00 	lea    0x360(%rsp),%rdi
  406507:	00 
  406508:	0f 29 94 24 60 03 00 	movaps %xmm2,0x360(%rsp)
  40650f:	00 
  406510:	e8 4b cb ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  406515:	48 8d bc 24 70 20 00 	lea    0x2070(%rsp),%rdi
  40651c:	00 
  40651d:	e8 5e cf ff ff       	call   403480 <_ZN2sf12RenderWindowD1Ev@plt>
  406522:	31 c0                	xor    %eax,%eax
  406524:	48 81 c4 88 22 00 00 	add    $0x2288,%rsp
  40652b:	5b                   	pop    %rbx
  40652c:	5d                   	pop    %rbp
  40652d:	41 5c                	pop    %r12
  40652f:	41 5d                	pop    %r13
  406531:	41 5e                	pop    %r14
  406533:	41 5f                	pop    %r15
  406535:	c3                   	ret    
	if (__n == 0)
  406536:	4d 85 e4             	test   %r12,%r12
  406539:	0f 84 81 e6 ff ff    	je     404bc0 <main+0xb30>
      { return _M_dataplus._M_p; }
  40653f:	4c 89 f7             	mov    %r14,%rdi
  406542:	e9 fa 05 00 00       	jmp    406b41 <main+0x2ab1>
				if(temp_time >= sf::seconds(1.5f) && i < 4 && flag){
  406547:	83 7c 24 3c 03       	cmpl   $0x3,0x3c(%rsp)
  40654c:	0f 8f cf ea ff ff    	jg     405021 <main+0xf91>
  406552:	84 d2                	test   %dl,%dl
  406554:	0f 84 c0 ea ff ff    	je     40501a <main+0xf8a>
					temp_clock.restart();
  40655a:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  40655f:	e8 ac ce ff ff       	call   403410 <_ZN2sf5Clock7restartEv@plt>
					writeGreenLed(fd, seqGreenLeds[i]);
  406564:	48 63 44 24 3c       	movslq 0x3c(%rsp),%rax
	ioctl(fd, WR_GREEN_LEDS);
  406569:	44 8b 7c 24 20       	mov    0x20(%rsp),%r15d
  40656e:	be 66 61 00 00       	mov    $0x6166,%esi
	write(fd, &data, sizeof(data));
  406573:	4c 8d a4 24 50 01 00 	lea    0x150(%rsp),%r12
  40657a:	00 
					writeGreenLed(fd, seqGreenLeds[i]);
  40657b:	49 89 c6             	mov    %rax,%r14
  40657e:	8b 84 84 a0 00 00 00 	mov    0xa0(%rsp,%rax,4),%eax
	ioctl(fd, WR_GREEN_LEDS);
  406585:	44 89 ff             	mov    %r15d,%edi
  406588:	89 84 24 50 01 00 00 	mov    %eax,0x150(%rsp)
  40658f:	31 c0                	xor    %eax,%eax
  406591:	e8 aa cd ff ff       	call   403340 <ioctl@plt>
	write(fd, &data, sizeof(data));
  406596:	ba 04 00 00 00       	mov    $0x4,%edx
  40659b:	4c 89 e6             	mov    %r12,%rsi
  40659e:	44 89 ff             	mov    %r15d,%edi
  4065a1:	e8 4a cb ff ff       	call   4030f0 <write@plt>
					i++;
  4065a6:	41 83 c6 01          	add    $0x1,%r14d
  4065aa:	44 89 74 24 3c       	mov    %r14d,0x3c(%rsp)
  4065af:	e9 75 ea ff ff       	jmp    405029 <main+0xf99>
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
	__out.setstate(ios_base::badbit);
      else
	__ostream_insert(__out, __s,
  4065b4:	ba 1e 00 00 00       	mov    $0x1e,%edx
  4065b9:	be d8 92 40 00       	mov    $0x4092d8,%esi
  4065be:	bf 80 c3 40 00       	mov    $0x40c380,%edi
  4065c3:	e8 c8 cc ff ff       	call   403290 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   *  for more on this subject.
  */
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }
  4065c8:	48 8b 05 b1 5d 00 00 	mov    0x5db1(%rip),%rax        # 40c380 <_ZSt4cout@@GLIBCXX_3.4>
  4065cf:	48 8b 40 e8          	mov    -0x18(%rax),%rax
  4065d3:	48 8b a8 70 c4 40 00 	mov    0x40c470(%rax),%rbp

  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
  4065da:	48 85 ed             	test   %rbp,%rbp
  4065dd:	0f 84 67 07 00 00    	je     406d4a <main+0x2cba>
       *  @return  The converted character.
      */
      char_type
      widen(char __c) const
      {
	if (_M_widen_ok)
  4065e3:	80 7d 38 00          	cmpb   $0x0,0x38(%rbp)
  4065e7:	0f 84 05 06 00 00    	je     406bf2 <main+0x2b62>
	  return _M_widen[static_cast<unsigned char>(__c)];
  4065ed:	0f be 75 43          	movsbl 0x43(%rbp),%esi
  4065f1:	bf 80 c3 40 00       	mov    $0x40c380,%edi
  4065f6:	e8 35 ca ff ff       	call   403030 <_ZNSo3putEc@plt>
  4065fb:	48 89 c7             	mov    %rax,%rdi
   *  This manipulator simply calls the stream's @c flush() member function.
  */
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
  4065fe:	e8 7d cb ff ff       	call   403180 <_ZNSo5flushEv@plt>
    { return flush(__os.put(__os.widen('\n'))); }
  406603:	e9 52 e3 ff ff       	jmp    40495a <main+0x8ca>
							if (temp == 1)
  406608:	40 f6 c5 01          	test   $0x1,%bpl
  40660c:	74 26                	je     406634 <main+0x25a4>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  40660e:	f3 0f 7e 84 24 f0 01 	movq   0x1f0(%rsp),%xmm0
  406615:	00 00 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  406617:	83 b4 24 e8 01 00 00 	xorl   $0x1,0x1e8(%rsp)
  40661e:	01 
									currMatrix[i * 3 + (j - 1)] ^= 1;
  40661f:	f3 0f 7e 0d b9 2e 00 	movq   0x2eb9(%rip),%xmm1        # 4094e0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  406626:	00 
  406627:	66 0f ef c1          	pxor   %xmm1,%xmm0
  40662b:	66 0f d6 84 24 f0 01 	movq   %xmm0,0x1f0(%rsp)
  406632:	00 00 
							if (temp == 1)
  406634:	40 f6 c5 02          	test   $0x2,%bpl
  406638:	74 2e                	je     406668 <main+0x25d8>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  40663a:	f3 0f 7e 84 24 ec 01 	movq   0x1ec(%rsp),%xmm0
  406641:	00 00 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  406643:	83 b4 24 e4 01 00 00 	xorl   $0x1,0x1e4(%rsp)
  40664a:	01 
									currMatrix[i * 3 + (j - 1)] ^= 1;
  40664b:	f3 0f 7e 0d 8d 2e 00 	movq   0x2e8d(%rip),%xmm1        # 4094e0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  406652:	00 
									currMatrix[i * 3 + (j + 1)] ^= 1;
  406653:	83 b4 24 f4 01 00 00 	xorl   $0x1,0x1f4(%rsp)
  40665a:	01 
									currMatrix[i * 3 + (j - 1)] ^= 1;
  40665b:	66 0f ef c1          	pxor   %xmm1,%xmm0
  40665f:	66 0f d6 84 24 ec 01 	movq   %xmm0,0x1ec(%rsp)
  406666:	00 00 
							mask = mask >> 1;
  406668:	89 ea                	mov    %ebp,%edx
  40666a:	c1 ea 03             	shr    $0x3,%edx
							if (temp == 1)
  40666d:	40 f6 c5 04          	test   $0x4,%bpl
  406671:	74 26                	je     406699 <main+0x2609>
								currMatrix[i*3 + j] ^= 1;
  406673:	f3 0f 7e 84 24 ec 01 	movq   0x1ec(%rsp),%xmm0
  40667a:	00 00 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  40667c:	83 b4 24 e0 01 00 00 	xorl   $0x1,0x1e0(%rsp)
  406683:	01 
								currMatrix[i*3 + j] ^= 1;
  406684:	f3 0f 7e 0d 54 2e 00 	movq   0x2e54(%rip),%xmm1        # 4094e0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  40668b:	00 
  40668c:	66 0f ef c1          	pxor   %xmm1,%xmm0
  406690:	66 0f d6 84 24 ec 01 	movq   %xmm0,0x1ec(%rsp)
  406697:	00 00 
							if (temp == 1)
  406699:	f6 c2 01             	test   $0x1,%dl
  40669c:	74 2e                	je     4066cc <main+0x263c>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  40669e:	f3 0f 7e 84 24 e4 01 	movq   0x1e4(%rsp),%xmm0
  4066a5:	00 00 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  4066a7:	83 b4 24 dc 01 00 00 	xorl   $0x1,0x1dc(%rsp)
  4066ae:	01 
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4066af:	f3 0f 7e 0d 29 2e 00 	movq   0x2e29(%rip),%xmm1        # 4094e0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  4066b6:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  4066b7:	83 b4 24 f4 01 00 00 	xorl   $0x1,0x1f4(%rsp)
  4066be:	01 
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4066bf:	66 0f ef c1          	pxor   %xmm1,%xmm0
  4066c3:	66 0f d6 84 24 e4 01 	movq   %xmm0,0x1e4(%rsp)
  4066ca:	00 00 
							if (temp == 1)
  4066cc:	f6 c2 02             	test   $0x2,%dl
  4066cf:	74 36                	je     406707 <main+0x2677>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4066d1:	f3 0f 7e 84 24 e0 01 	movq   0x1e0(%rsp),%xmm0
  4066d8:	00 00 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  4066da:	83 b4 24 d8 01 00 00 	xorl   $0x1,0x1d8(%rsp)
  4066e1:	01 
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4066e2:	f3 0f 7e 0d f6 2d 00 	movq   0x2df6(%rip),%xmm1        # 4094e0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  4066e9:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  4066ea:	83 b4 24 f0 01 00 00 	xorl   $0x1,0x1f0(%rsp)
  4066f1:	01 
									currMatrix[i * 3 + (j + 1)] ^= 1;
  4066f2:	83 b4 24 e8 01 00 00 	xorl   $0x1,0x1e8(%rsp)
  4066f9:	01 
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4066fa:	66 0f ef c1          	pxor   %xmm1,%xmm0
  4066fe:	66 0f d6 84 24 e0 01 	movq   %xmm0,0x1e0(%rsp)
  406705:	00 00 
							mask = mask >> 1;
  406707:	89 e8                	mov    %ebp,%eax
  406709:	c1 e8 06             	shr    $0x6,%eax
							if (temp == 1)
  40670c:	80 e2 04             	and    $0x4,%dl
  40670f:	74 2e                	je     40673f <main+0x26af>
								currMatrix[i*3 + j] ^= 1;
  406711:	f3 0f 7e 84 24 e0 01 	movq   0x1e0(%rsp),%xmm0
  406718:	00 00 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  40671a:	83 b4 24 d4 01 00 00 	xorl   $0x1,0x1d4(%rsp)
  406721:	01 
								currMatrix[i*3 + j] ^= 1;
  406722:	f3 0f 7e 0d b6 2d 00 	movq   0x2db6(%rip),%xmm1        # 4094e0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  406729:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  40672a:	83 b4 24 ec 01 00 00 	xorl   $0x1,0x1ec(%rsp)
  406731:	01 
								currMatrix[i*3 + j] ^= 1;
  406732:	66 0f ef c1          	pxor   %xmm1,%xmm0
  406736:	66 0f d6 84 24 e0 01 	movq   %xmm0,0x1e0(%rsp)
  40673d:	00 00 
							if (temp == 1)
  40673f:	a8 01                	test   $0x1,%al
  406741:	74 2e                	je     406771 <main+0x26e1>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  406743:	f3 0f 7e 84 24 d8 01 	movq   0x1d8(%rsp),%xmm0
  40674a:	00 00 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  40674c:	83 b4 24 d0 01 00 00 	xorl   $0x1,0x1d0(%rsp)
  406753:	01 
									currMatrix[i * 3 + (j - 1)] ^= 1;
  406754:	f3 0f 7e 0d 84 2d 00 	movq   0x2d84(%rip),%xmm1        # 4094e0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  40675b:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  40675c:	83 b4 24 e8 01 00 00 	xorl   $0x1,0x1e8(%rsp)
  406763:	01 
									currMatrix[i * 3 + (j - 1)] ^= 1;
  406764:	66 0f ef c1          	pxor   %xmm1,%xmm0
  406768:	66 0f d6 84 24 d8 01 	movq   %xmm0,0x1d8(%rsp)
  40676f:	00 00 
							if (temp == 1)
  406771:	a8 02                	test   $0x2,%al
  406773:	74 36                	je     4067ab <main+0x271b>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  406775:	f3 0f 7e 84 24 d4 01 	movq   0x1d4(%rsp),%xmm0
  40677c:	00 00 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  40677e:	83 b4 24 cc 01 00 00 	xorl   $0x1,0x1cc(%rsp)
  406785:	01 
									currMatrix[i * 3 + (j - 1)] ^= 1;
  406786:	f3 0f 7e 0d 52 2d 00 	movq   0x2d52(%rip),%xmm1        # 4094e0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  40678d:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  40678e:	83 b4 24 e4 01 00 00 	xorl   $0x1,0x1e4(%rsp)
  406795:	01 
									currMatrix[i * 3 + (j + 1)] ^= 1;
  406796:	83 b4 24 dc 01 00 00 	xorl   $0x1,0x1dc(%rsp)
  40679d:	01 
									currMatrix[i * 3 + (j - 1)] ^= 1;
  40679e:	66 0f ef c1          	pxor   %xmm1,%xmm0
  4067a2:	66 0f d6 84 24 d4 01 	movq   %xmm0,0x1d4(%rsp)
  4067a9:	00 00 
							mask = mask >> 1;
  4067ab:	89 ea                	mov    %ebp,%edx
  4067ad:	c1 ea 09             	shr    $0x9,%edx
							if (temp == 1)
  4067b0:	a8 04                	test   $0x4,%al
  4067b2:	74 2e                	je     4067e2 <main+0x2752>
								currMatrix[i*3 + j] ^= 1;
  4067b4:	f3 0f 7e 84 24 d4 01 	movq   0x1d4(%rsp),%xmm0
  4067bb:	00 00 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  4067bd:	83 b4 24 c8 01 00 00 	xorl   $0x1,0x1c8(%rsp)
  4067c4:	01 
								currMatrix[i*3 + j] ^= 1;
  4067c5:	f3 0f 7e 0d 13 2d 00 	movq   0x2d13(%rip),%xmm1        # 4094e0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  4067cc:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  4067cd:	83 b4 24 e0 01 00 00 	xorl   $0x1,0x1e0(%rsp)
  4067d4:	01 
								currMatrix[i*3 + j] ^= 1;
  4067d5:	66 0f ef c1          	pxor   %xmm1,%xmm0
  4067d9:	66 0f d6 84 24 d4 01 	movq   %xmm0,0x1d4(%rsp)
  4067e0:	00 00 
							if (temp == 1)
  4067e2:	f6 c2 01             	test   $0x1,%dl
  4067e5:	74 2e                	je     406815 <main+0x2785>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4067e7:	f3 0f 7e 84 24 cc 01 	movq   0x1cc(%rsp),%xmm0
  4067ee:	00 00 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  4067f0:	83 b4 24 c4 01 00 00 	xorl   $0x1,0x1c4(%rsp)
  4067f7:	01 
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4067f8:	f3 0f 7e 0d e0 2c 00 	movq   0x2ce0(%rip),%xmm1        # 4094e0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  4067ff:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  406800:	83 b4 24 dc 01 00 00 	xorl   $0x1,0x1dc(%rsp)
  406807:	01 
									currMatrix[i * 3 + (j - 1)] ^= 1;
  406808:	66 0f ef c1          	pxor   %xmm1,%xmm0
  40680c:	66 0f d6 84 24 cc 01 	movq   %xmm0,0x1cc(%rsp)
  406813:	00 00 
							if (temp == 1)
  406815:	f6 c2 02             	test   $0x2,%dl
  406818:	74 36                	je     406850 <main+0x27c0>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  40681a:	f3 0f 7e 84 24 c8 01 	movq   0x1c8(%rsp),%xmm0
  406821:	00 00 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  406823:	83 b4 24 c0 01 00 00 	xorl   $0x1,0x1c0(%rsp)
  40682a:	01 
									currMatrix[i * 3 + (j - 1)] ^= 1;
  40682b:	f3 0f 7e 0d ad 2c 00 	movq   0x2cad(%rip),%xmm1        # 4094e0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  406832:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  406833:	83 b4 24 d8 01 00 00 	xorl   $0x1,0x1d8(%rsp)
  40683a:	01 
									currMatrix[i * 3 + (j + 1)] ^= 1;
  40683b:	83 b4 24 d0 01 00 00 	xorl   $0x1,0x1d0(%rsp)
  406842:	01 
									currMatrix[i * 3 + (j - 1)] ^= 1;
  406843:	66 0f ef c1          	pxor   %xmm1,%xmm0
  406847:	66 0f d6 84 24 c8 01 	movq   %xmm0,0x1c8(%rsp)
  40684e:	00 00 
							mask = mask >> 1;
  406850:	89 e8                	mov    %ebp,%eax
  406852:	c1 e8 0c             	shr    $0xc,%eax
							if (temp == 1)
  406855:	80 e2 04             	and    $0x4,%dl
  406858:	74 2e                	je     406888 <main+0x27f8>
								currMatrix[i*3 + j] ^= 1;
  40685a:	f3 0f 7e 84 24 c8 01 	movq   0x1c8(%rsp),%xmm0
  406861:	00 00 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  406863:	83 b4 24 bc 01 00 00 	xorl   $0x1,0x1bc(%rsp)
  40686a:	01 
								currMatrix[i*3 + j] ^= 1;
  40686b:	f3 0f 7e 0d 6d 2c 00 	movq   0x2c6d(%rip),%xmm1        # 4094e0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  406872:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  406873:	83 b4 24 d4 01 00 00 	xorl   $0x1,0x1d4(%rsp)
  40687a:	01 
								currMatrix[i*3 + j] ^= 1;
  40687b:	66 0f ef c1          	pxor   %xmm1,%xmm0
  40687f:	66 0f d6 84 24 c8 01 	movq   %xmm0,0x1c8(%rsp)
  406886:	00 00 
							if (temp == 1)
  406888:	a8 01                	test   $0x1,%al
  40688a:	74 2e                	je     4068ba <main+0x282a>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  40688c:	f3 0f 7e 84 24 c0 01 	movq   0x1c0(%rsp),%xmm0
  406893:	00 00 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  406895:	83 b4 24 b8 01 00 00 	xorl   $0x1,0x1b8(%rsp)
  40689c:	01 
									currMatrix[i * 3 + (j - 1)] ^= 1;
  40689d:	f3 0f 7e 0d 3b 2c 00 	movq   0x2c3b(%rip),%xmm1        # 4094e0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  4068a4:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  4068a5:	83 b4 24 d0 01 00 00 	xorl   $0x1,0x1d0(%rsp)
  4068ac:	01 
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4068ad:	66 0f ef c1          	pxor   %xmm1,%xmm0
  4068b1:	66 0f d6 84 24 c0 01 	movq   %xmm0,0x1c0(%rsp)
  4068b8:	00 00 
							if (temp == 1)
  4068ba:	a8 02                	test   $0x2,%al
  4068bc:	74 36                	je     4068f4 <main+0x2864>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4068be:	f3 0f 7e 84 24 bc 01 	movq   0x1bc(%rsp),%xmm0
  4068c5:	00 00 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  4068c7:	83 b4 24 b4 01 00 00 	xorl   $0x1,0x1b4(%rsp)
  4068ce:	01 
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4068cf:	f3 0f 7e 0d 09 2c 00 	movq   0x2c09(%rip),%xmm1        # 4094e0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  4068d6:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  4068d7:	83 b4 24 cc 01 00 00 	xorl   $0x1,0x1cc(%rsp)
  4068de:	01 
									currMatrix[i * 3 + (j + 1)] ^= 1;
  4068df:	83 b4 24 c4 01 00 00 	xorl   $0x1,0x1c4(%rsp)
  4068e6:	01 
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4068e7:	66 0f ef c1          	pxor   %xmm1,%xmm0
  4068eb:	66 0f d6 84 24 bc 01 	movq   %xmm0,0x1bc(%rsp)
  4068f2:	00 00 
							mask = mask >> 1;
  4068f4:	c1 ed 0f             	shr    $0xf,%ebp
							if (temp == 1)
  4068f7:	a8 04                	test   $0x4,%al
  4068f9:	74 2e                	je     406929 <main+0x2899>
								currMatrix[i*3 + j] ^= 1;
  4068fb:	f3 0f 7e 84 24 bc 01 	movq   0x1bc(%rsp),%xmm0
  406902:	00 00 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  406904:	83 b4 24 b0 01 00 00 	xorl   $0x1,0x1b0(%rsp)
  40690b:	01 
								currMatrix[i*3 + j] ^= 1;
  40690c:	f3 0f 7e 0d cc 2b 00 	movq   0x2bcc(%rip),%xmm1        # 4094e0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  406913:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  406914:	83 b4 24 c8 01 00 00 	xorl   $0x1,0x1c8(%rsp)
  40691b:	01 
								currMatrix[i*3 + j] ^= 1;
  40691c:	66 0f ef c1          	pxor   %xmm1,%xmm0
  406920:	66 0f d6 84 24 bc 01 	movq   %xmm0,0x1bc(%rsp)
  406927:	00 00 
							if (temp == 1)
  406929:	40 f6 c5 01          	test   $0x1,%bpl
  40692d:	74 26                	je     406955 <main+0x28c5>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  40692f:	f3 0f 7e 84 24 b4 01 	movq   0x1b4(%rsp),%xmm0
  406936:	00 00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  406938:	83 b4 24 c4 01 00 00 	xorl   $0x1,0x1c4(%rsp)
  40693f:	01 
									currMatrix[i * 3 + (j - 1)] ^= 1;
  406940:	f3 0f 7e 0d 98 2b 00 	movq   0x2b98(%rip),%xmm1        # 4094e0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  406947:	00 
  406948:	66 0f ef c1          	pxor   %xmm1,%xmm0
  40694c:	66 0f d6 84 24 b4 01 	movq   %xmm0,0x1b4(%rsp)
  406953:	00 00 
							if (temp == 1)
  406955:	40 f6 c5 02          	test   $0x2,%bpl
  406959:	74 2e                	je     406989 <main+0x28f9>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  40695b:	f3 0f 7e 84 24 b0 01 	movq   0x1b0(%rsp),%xmm0
  406962:	00 00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  406964:	83 b4 24 c0 01 00 00 	xorl   $0x1,0x1c0(%rsp)
  40696b:	01 
									currMatrix[i * 3 + (j - 1)] ^= 1;
  40696c:	f3 0f 7e 0d 6c 2b 00 	movq   0x2b6c(%rip),%xmm1        # 4094e0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  406973:	00 
									currMatrix[i * 3 + (j + 1)] ^= 1;
  406974:	83 b4 24 b8 01 00 00 	xorl   $0x1,0x1b8(%rsp)
  40697b:	01 
									currMatrix[i * 3 + (j - 1)] ^= 1;
  40697c:	66 0f ef c1          	pxor   %xmm1,%xmm0
  406980:	66 0f d6 84 24 b0 01 	movq   %xmm0,0x1b0(%rsp)
  406987:	00 00 
							if (temp == 1)
  406989:	40 80 e5 04          	and    $0x4,%bpl
  40698d:	0f 85 7e 02 00 00    	jne    406c11 <main+0x2b81>
					for (int i = 5; i >= 0; i--)
  406993:	4c 8d 8c 24 ec 01 00 	lea    0x1ec(%rsp),%r9
  40699a:	00 
				elapsedtime_text += clock_text.restart();
  40699b:	41 b8 03 00 00 00    	mov    $0x3,%r8d
					redLeds = 0x00000;
  4069a1:	31 db                	xor    %ebx,%ebx
  4069a3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
						for (int j = 2; j >= 0; j--)
  4069a8:	41 8d 40 fd          	lea    -0x3(%r8),%eax
				elapsedtime_text += clock_text.restart();
  4069ac:	4c 89 ce             	mov    %r9,%rsi
							for(int m = 1; m <= pot; ++m)
  4069af:	85 c0                	test   %eax,%eax
  4069b1:	0f 8e c9 00 00 00    	jle    406a80 <main+0x29f0>
								redLeds += currMatrix[i * 3 + j] * m;
  4069b7:	8b 56 08             	mov    0x8(%rsi),%edx
  4069ba:	01 d3                	add    %edx,%ebx
							for(int m = 1; m <= pot; ++m)
  4069bc:	83 f8 01             	cmp    $0x1,%eax
  4069bf:	0f 84 bb 00 00 00    	je     406a80 <main+0x29f0>
								redLeds += currMatrix[i * 3 + j] * m;
  4069c5:	8d 0c 12             	lea    (%rdx,%rdx,1),%ecx
  4069c8:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  4069ca:	83 f8 02             	cmp    $0x2,%eax
  4069cd:	0f 84 ad 00 00 00    	je     406a80 <main+0x29f0>
								redLeds += currMatrix[i * 3 + j] * m;
  4069d3:	01 d1                	add    %edx,%ecx
  4069d5:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  4069d7:	83 f8 03             	cmp    $0x3,%eax
  4069da:	0f 84 a0 00 00 00    	je     406a80 <main+0x29f0>
								redLeds += currMatrix[i * 3 + j] * m;
  4069e0:	8d 3c 95 00 00 00 00 	lea    0x0(,%rdx,4),%edi
  4069e7:	01 fb                	add    %edi,%ebx
							for(int m = 1; m <= pot; ++m)
  4069e9:	83 f8 04             	cmp    $0x4,%eax
  4069ec:	0f 84 8e 00 00 00    	je     406a80 <main+0x29f0>
								redLeds += currMatrix[i * 3 + j] * m;
  4069f2:	01 d7                	add    %edx,%edi
  4069f4:	01 fb                	add    %edi,%ebx
							for(int m = 1; m <= pot; ++m)
  4069f6:	83 f8 05             	cmp    $0x5,%eax
  4069f9:	0f 84 81 00 00 00    	je     406a80 <main+0x29f0>
								redLeds += currMatrix[i * 3 + j] * m;
  4069ff:	8d 1c 4b             	lea    (%rbx,%rcx,2),%ebx
							for(int m = 1; m <= pot; ++m)
  406a02:	83 f8 06             	cmp    $0x6,%eax
  406a05:	74 79                	je     406a80 <main+0x29f0>
								redLeds += currMatrix[i * 3 + j] * m;
  406a07:	8d 0c d5 00 00 00 00 	lea    0x0(,%rdx,8),%ecx
  406a0e:	89 cf                	mov    %ecx,%edi
  406a10:	29 d7                	sub    %edx,%edi
  406a12:	01 fb                	add    %edi,%ebx
							for(int m = 1; m <= pot; ++m)
  406a14:	83 f8 07             	cmp    $0x7,%eax
  406a17:	74 67                	je     406a80 <main+0x29f0>
								redLeds += currMatrix[i * 3 + j] * m;
  406a19:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  406a1b:	83 f8 08             	cmp    $0x8,%eax
  406a1e:	74 60                	je     406a80 <main+0x29f0>
								redLeds += currMatrix[i * 3 + j] * m;
  406a20:	01 d1                	add    %edx,%ecx
  406a22:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  406a24:	83 f8 09             	cmp    $0x9,%eax
  406a27:	74 57                	je     406a80 <main+0x29f0>
								redLeds += currMatrix[i * 3 + j] * m;
  406a29:	8d 0c 92             	lea    (%rdx,%rdx,4),%ecx
  406a2c:	01 c9                	add    %ecx,%ecx
  406a2e:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  406a30:	83 f8 0a             	cmp    $0xa,%eax
  406a33:	74 4b                	je     406a80 <main+0x29f0>
								redLeds += currMatrix[i * 3 + j] * m;
  406a35:	01 d1                	add    %edx,%ecx
  406a37:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  406a39:	83 f8 0b             	cmp    $0xb,%eax
  406a3c:	74 42                	je     406a80 <main+0x29f0>
								redLeds += currMatrix[i * 3 + j] * m;
  406a3e:	8d 0c 52             	lea    (%rdx,%rdx,2),%ecx
  406a41:	c1 e1 02             	shl    $0x2,%ecx
  406a44:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  406a46:	83 f8 0c             	cmp    $0xc,%eax
  406a49:	74 35                	je     406a80 <main+0x29f0>
								redLeds += currMatrix[i * 3 + j] * m;
  406a4b:	01 d1                	add    %edx,%ecx
  406a4d:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  406a4f:	83 f8 0d             	cmp    $0xd,%eax
  406a52:	74 2c                	je     406a80 <main+0x29f0>
								redLeds += currMatrix[i * 3 + j] * m;
  406a54:	6b ca 0e             	imul   $0xe,%edx,%ecx
  406a57:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  406a59:	83 f8 0e             	cmp    $0xe,%eax
  406a5c:	74 22                	je     406a80 <main+0x29f0>
								redLeds += currMatrix[i * 3 + j] * m;
  406a5e:	89 d1                	mov    %edx,%ecx
  406a60:	c1 e1 04             	shl    $0x4,%ecx
  406a63:	89 cf                	mov    %ecx,%edi
  406a65:	29 d7                	sub    %edx,%edi
  406a67:	01 fb                	add    %edi,%ebx
							for(int m = 1; m <= pot; ++m)
  406a69:	83 f8 0f             	cmp    $0xf,%eax
  406a6c:	74 12                	je     406a80 <main+0x29f0>
								redLeds += currMatrix[i * 3 + j] * m;
  406a6e:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  406a70:	83 f8 10             	cmp    $0x10,%eax
  406a73:	74 0b                	je     406a80 <main+0x29f0>
								redLeds += currMatrix[i * 3 + j] * m;
  406a75:	6b d2 11             	imul   $0x11,%edx,%edx
  406a78:	01 d3                	add    %edx,%ebx
							for(int m = 1; m <= pot; ++m)
  406a7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
						for (int j = 2; j >= 0; j--)
  406a80:	83 c0 01             	add    $0x1,%eax
  406a83:	48 83 ee 04          	sub    $0x4,%rsi
  406a87:	41 39 c0             	cmp    %eax,%r8d
  406a8a:	0f 85 1f ff ff ff    	jne    4069af <main+0x291f>
					for (int i = 5; i >= 0; i--)
  406a90:	41 83 c0 03          	add    $0x3,%r8d
  406a94:	49 83 e9 0c          	sub    $0xc,%r9
  406a98:	41 83 f8 15          	cmp    $0x15,%r8d
  406a9c:	0f 85 06 ff ff ff    	jne    4069a8 <main+0x2918>
					printf("redLeds: %p\n", redLeds);
  406aa2:	89 de                	mov    %ebx,%esi
  406aa4:	bf 26 91 40 00       	mov    $0x409126,%edi
  406aa9:	31 c0                	xor    %eax,%eax
  406aab:	e8 90 c5 ff ff       	call   403040 <printf@plt>
	ioctl(fd, WR_RED_LEDS);
  406ab0:	44 8b 7c 24 20       	mov    0x20(%rsp),%r15d
  406ab5:	be 65 61 00 00       	mov    $0x6165,%esi
  406aba:	31 c0                	xor    %eax,%eax
  406abc:	89 9c 24 a0 00 00 00 	mov    %ebx,0xa0(%rsp)
  406ac3:	44 89 ff             	mov    %r15d,%edi
  406ac6:	e8 75 c8 ff ff       	call   403340 <ioctl@plt>
	write(fd, &data, sizeof(data));
  406acb:	ba 04 00 00 00       	mov    $0x4,%edx
  406ad0:	48 8d b4 24 a0 00 00 	lea    0xa0(%rsp),%rsi
  406ad7:	00 
  406ad8:	44 89 ff             	mov    %r15d,%edi
  406adb:	e8 10 c6 ff ff       	call   4030f0 <write@plt>
}
  406ae0:	e9 ca e4 ff ff       	jmp    404faf <main+0xf1f>
					input[j] = button;
  406ae5:	48 63 44 24 30       	movslq 0x30(%rsp),%rax
  406aea:	8b 54 24 34          	mov    0x34(%rsp),%edx
  406aee:	48 89 c1             	mov    %rax,%rcx
  406af1:	89 94 84 70 01 00 00 	mov    %edx,0x170(%rsp,%rax,4)
					j++;
  406af8:	83 c1 01             	add    $0x1,%ecx
  406afb:	89 4c 24 30          	mov    %ecx,0x30(%rsp)
				if (j >= 4){
  406aff:	83 7c 24 30 04       	cmpl   $0x4,0x30(%rsp)
  406b04:	0f 85 b0 e3 ff ff    	jne    404eba <main+0xe2a>
  406b0a:	e9 7d e5 ff ff       	jmp    40508c <main+0xffc>
	    _M_data(_M_create(__dnew, size_type(0)));
  406b0f:	31 d2                	xor    %edx,%edx
  406b11:	48 8d b4 24 90 01 00 	lea    0x190(%rsp),%rsi
  406b18:	00 
  406b19:	48 8d bc 24 50 01 00 	lea    0x150(%rsp),%rdi
  406b20:	00 
  406b21:	e8 9a c9 ff ff       	call   4034c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
  406b26:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
  406b2d:	00 
  406b2e:	48 89 c7             	mov    %rax,%rdi
      { _M_allocated_capacity = __capacity; }
  406b31:	48 8b 84 24 90 01 00 	mov    0x190(%rsp),%rax
  406b38:	00 
  406b39:	48 89 84 24 60 01 00 	mov    %rax,0x160(%rsp)
  406b40:	00 
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
  406b41:	4c 89 e2             	mov    %r12,%rdx
  406b44:	4c 89 ee             	mov    %r13,%rsi
  406b47:	e8 a4 c6 ff ff       	call   4031f0 <memcpy@plt>
  406b4c:	e9 6f e0 ff ff       	jmp    404bc0 <main+0xb30>
  406b51:	f3 0f 6f 70 10       	movdqu 0x10(%rax),%xmm6
  406b56:	0f 29 b4 24 80 01 00 	movaps %xmm6,0x180(%rsp)
  406b5d:	00 
  406b5e:	e9 f7 e0 ff ff       	jmp    404c5a <main+0xbca>
		printf("Syntax: %s <device file path>\n", argv[0]);
  406b63:	48 8b 36             	mov    (%rsi),%rsi
  406b66:	bf f8 91 40 00       	mov    $0x4091f8,%edi
  406b6b:	31 c0                	xor    %eax,%eax
  406b6d:	e8 ce c4 ff ff       	call   403040 <printf@plt>
		return -EINVAL;
  406b72:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
  406b77:	e9 a8 f9 ff ff       	jmp    406524 <main+0x2494>
				else if (i >= 4 && flag && temp_time >= sf::seconds(1.5f)){
  406b7c:	f3 0f 10 05 d8 29 00 	movss  0x29d8(%rip),%xmm0        # 40955c <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x15c>
  406b83:	00 
  406b84:	e8 e7 c5 ff ff       	call   403170 <_ZN2sf7secondsEf@plt>
  406b89:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  406b8e:	48 89 c6             	mov    %rax,%rsi
  406b91:	e8 3a c7 ff ff       	call   4032d0 <_ZN2sfgeENS_4TimeES0_@plt>
  406b96:	8b 4c 24 1c          	mov    0x1c(%rsp),%ecx
  406b9a:	89 4c 24 3c          	mov    %ecx,0x3c(%rsp)
  406b9e:	84 c0                	test   %al,%al
  406ba0:	0f 84 83 e4 ff ff    	je     405029 <main+0xf99>
	ioctl(fd, WR_GREEN_LEDS);
  406ba6:	44 8b 74 24 20       	mov    0x20(%rsp),%r14d
  406bab:	be 66 61 00 00       	mov    $0x6166,%esi
  406bb0:	31 c0                	xor    %eax,%eax
	write(fd, &data, sizeof(data));
  406bb2:	4c 8d ac 24 70 01 00 	lea    0x170(%rsp),%r13
  406bb9:	00 
  406bba:	c7 84 24 70 01 00 00 	movl   $0x0,0x170(%rsp)
  406bc1:	00 00 00 00 
	ioctl(fd, WR_GREEN_LEDS);
  406bc5:	44 89 f7             	mov    %r14d,%edi
  406bc8:	e8 73 c7 ff ff       	call   403340 <ioctl@plt>
	write(fd, &data, sizeof(data));
  406bcd:	ba 04 00 00 00       	mov    $0x4,%edx
  406bd2:	4c 89 ee             	mov    %r13,%rsi
  406bd5:	44 89 f7             	mov    %r14d,%edi
  406bd8:	e8 13 c5 ff ff       	call   4030f0 <write@plt>
					flag = 0;
  406bdd:	c7 44 24 38 00 00 00 	movl   $0x0,0x38(%rsp)
  406be4:	00 
					i = 0;
  406be5:	c7 44 24 3c 00 00 00 	movl   $0x0,0x3c(%rsp)
  406bec:	00 
  406bed:	e9 37 e4 ff ff       	jmp    405029 <main+0xf99>
	this->_M_widen_init();
  406bf2:	48 89 ef             	mov    %rbp,%rdi
  406bf5:	e8 a6 c6 ff ff       	call   4032a0 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
  406bfa:	48 8b 45 00          	mov    0x0(%rbp),%rax
  406bfe:	be 0a 00 00 00       	mov    $0xa,%esi
  406c03:	48 89 ef             	mov    %rbp,%rdi
  406c06:	ff 50 30             	call   *0x30(%rax)
  406c09:	0f be f0             	movsbl %al,%esi
  406c0c:	e9 e0 f9 ff ff       	jmp    4065f1 <main+0x2561>
								currMatrix[i*3 + j] ^= 1;
  406c11:	f3 0f 7e 84 24 b0 01 	movq   0x1b0(%rsp),%xmm0
  406c18:	00 00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  406c1a:	83 b4 24 bc 01 00 00 	xorl   $0x1,0x1bc(%rsp)
  406c21:	01 
								currMatrix[i*3 + j] ^= 1;
  406c22:	f3 0f 7e 0d b6 28 00 	movq   0x28b6(%rip),%xmm1        # 4094e0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  406c29:	00 
  406c2a:	66 0f ef c1          	pxor   %xmm1,%xmm0
  406c2e:	66 0f d6 84 24 b0 01 	movq   %xmm0,0x1b0(%rsp)
  406c35:	00 00 
  406c37:	e9 57 fd ff ff       	jmp    406993 <main+0x2903>
		fprintf(stderr, "Error opening file %s\n", argv[1]);
  406c3c:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  406c40:	48 8b 3d 59 58 00 00 	mov    0x5859(%rip),%rdi        # 40c4a0 <stderr@@GLIBC_2.2.5>
  406c47:	be 83 90 40 00       	mov    $0x409083,%esi
  406c4c:	31 c0                	xor    %eax,%eax
  406c4e:	e8 0d c7 ff ff       	call   403360 <fprintf@plt>
		return -EBUSY;
  406c53:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
  406c58:	e9 c7 f8 ff ff       	jmp    406524 <main+0x2494>
							text.setString("");
  406c5d:	4c 89 f7             	mov    %r14,%rdi
  406c60:	e8 9b c8 ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
  406c65:	4c 89 f2             	mov    %r14,%rdx
  406c68:	be 25 91 40 00       	mov    $0x409125,%esi
  406c6d:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  406c74:	00 
  406c75:	e8 86 c4 ff ff       	call   403100 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  406c7a:	48 8d b4 24 90 01 00 	lea    0x190(%rsp),%rsi
  406c81:	00 
  406c82:	48 8d bc 24 20 1c 00 	lea    0x1c20(%rsp),%rdi
  406c89:	00 
  406c8a:	e8 11 c8 ff ff       	call   4034a0 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  406c8f:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  406c96:	00 
	if (!_M_is_local())
  406c97:	48 3b 3c 24          	cmp    (%rsp),%rdi
  406c9b:	74 15                	je     406cb2 <main+0x2c22>
  406c9d:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  406ca4:	00 
  406ca5:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  406cac:	00 
  406cad:	e8 8e c5 ff ff       	call   403240 <_ZdlPvm@plt>
  406cb2:	4c 89 f7             	mov    %r14,%rdi
  406cb5:	e8 96 c6 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
							typedtext.insert(0, "BOOM!!!");
  406cba:	4c 89 f7             	mov    %r14,%rdi
  406cbd:	e8 3e c8 ff ff       	call   403500 <_ZNSt6localeC1Ev@plt>
  406cc2:	4c 89 f2             	mov    %r14,%rdx
  406cc5:	be db 90 40 00       	mov    $0x4090db,%esi
  406cca:	48 8d bc 24 90 01 00 	lea    0x190(%rsp),%rdi
  406cd1:	00 
  406cd2:	e8 29 c4 ff ff       	call   403100 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  406cd7:	48 8d 94 24 90 01 00 	lea    0x190(%rsp),%rdx
  406cde:	00 
  406cdf:	31 f6                	xor    %esi,%esi
  406ce1:	48 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%rdi
  406ce8:	00 
  406ce9:	e8 e2 c4 ff ff       	call   4031d0 <_ZN2sf6String6insertEmRKS0_@plt>
      { return _M_dataplus._M_p; }
  406cee:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  406cf5:	00 
	if (!_M_is_local())
  406cf6:	48 3b 3c 24          	cmp    (%rsp),%rdi
  406cfa:	74 15                	je     406d11 <main+0x2c81>
  406cfc:	48 8b 84 24 a0 01 00 	mov    0x1a0(%rsp),%rax
  406d03:	00 
  406d04:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  406d0b:	00 
  406d0c:	e8 2f c5 ff ff       	call   403240 <_ZdlPvm@plt>
  406d11:	4c 89 f7             	mov    %r14,%rdi
  406d14:	e8 37 c6 ff ff       	call   403350 <_ZNSt6localeD1Ev@plt>
							clock_text.restart();
  406d19:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
  406d1e:	e8 ed c6 ff ff       	call   403410 <_ZN2sf5Clock7restartEv@plt>
  406d23:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
							screen = 6;
  406d27:	c7 44 24 1c 06 00 00 	movl   $0x6,0x1c(%rsp)
  406d2e:	00 
							clock_text.restart();
  406d2f:	89 44 24 30          	mov    %eax,0x30(%rsp)
  406d33:	e9 82 e1 ff ff       	jmp    404eba <main+0xe2a>
      { return _M_dataplus._M_p; }
  406d38:	4c 89 ff             	mov    %r15,%rdi
  406d3b:	e9 0f ee ff ff       	jmp    405b4f <main+0x1abf>
	  std::__throw_logic_error(__N("basic_string::"
  406d40:	bf c8 91 40 00       	mov    $0x4091c8,%edi
  406d45:	e8 46 c4 ff ff       	call   403190 <_ZSt19__throw_logic_errorPKc@plt>
	__throw_bad_cast();
  406d4a:	e8 b1 c5 ff ff       	call   403300 <_ZSt16__throw_bad_castv@plt>
	  __throw_length_error(__N(__s));
  406d4f:	bf c4 90 40 00       	mov    $0x4090c4,%edi
  406d54:	e8 d7 c3 ff ff       	call   403130 <_ZSt20__throw_length_errorPKc@plt>
	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
  406d59:	31 c9                	xor    %ecx,%ecx
  406d5b:	ba 01 00 00 00       	mov    $0x1,%edx
  406d60:	be e3 90 40 00       	mov    $0x4090e3,%esi
  406d65:	31 c0                	xor    %eax,%eax
  406d67:	bf b8 93 40 00       	mov    $0x4093b8,%edi
  406d6c:	e8 2f c6 ff ff       	call   4033a0 <_ZSt24__throw_out_of_range_fmtPKcz@plt>
      { return _M_dataplus._M_p; }
  406d71:	48 89 c3             	mov    %rax,%rbx
  406d74:	e9 a8 c8 ff ff       	jmp    403621 <main.cold>
							typedtext.insert(0, "BOOM!!!");
  406d79:	48 89 c3             	mov    %rax,%rbx
  406d7c:	e9 ee cb ff ff       	jmp    40396f <main.cold+0x34e>
  406d81:	48 89 c3             	mov    %rax,%rbx
  406d84:	e9 c3 cb ff ff       	jmp    40394c <main.cold+0x32b>
  406d89:	48 89 c3             	mov    %rax,%rbx
  406d8c:	e9 eb cb ff ff       	jmp    40397c <main.cold+0x35b>
							text.setString("");
  406d91:	48 89 c3             	mov    %rax,%rbx
  406d94:	e9 d6 cb ff ff       	jmp    40396f <main.cold+0x34e>
  406d99:	48 89 c3             	mov    %rax,%rbx
  406d9c:	e9 30 cc ff ff       	jmp    4039d1 <main.cold+0x3b0>
					typedtext.insert(0, "Quarta fase");
  406da1:	48 89 c3             	mov    %rax,%rbx
  406da4:	e9 4b cc ff ff       	jmp    4039f4 <main.cold+0x3d3>
  406da9:	48 89 c3             	mov    %rax,%rbx
  406dac:	e9 50 cc ff ff       	jmp    403a01 <main.cold+0x3e0>
					text.setString("");
  406db1:	48 89 c3             	mov    %rax,%rbx
  406db4:	e9 3b cc ff ff       	jmp    4039f4 <main.cold+0x3d3>
  406db9:	48 89 c3             	mov    %rax,%rbx
  406dbc:	e9 6c cc ff ff       	jmp    403a2d <main.cold+0x40c>
  406dc1:	48 89 c3             	mov    %rax,%rbx
  406dc4:	e9 89 cc ff ff       	jmp    403a52 <main.cold+0x431>
					typedtext.insert(0, "Isso faz algum sentido?");
  406dc9:	48 89 c3             	mov    %rax,%rbx
  406dcc:	e9 23 cc ff ff       	jmp    4039f4 <main.cold+0x3d3>
					text.setString("");
  406dd1:	48 89 c3             	mov    %rax,%rbx
  406dd4:	e9 1b cc ff ff       	jmp    4039f4 <main.cold+0x3d3>
  406dd9:	48 c7 04 24 28 bd 40 	movq   $0x40bd28,(%rsp)
  406de0:	00 
  406de1:	48 89 c5             	mov    %rax,%rbp
  406de4:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  406dea:	e9 3a ca ff ff       	jmp    403829 <main.cold+0x208>
  406def:	48 c7 04 24 28 bd 40 	movq   $0x40bd28,(%rsp)
  406df6:	00 
  406df7:	48 89 c5             	mov    %rax,%rbp
  406dfa:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  406e00:	e9 42 ca ff ff       	jmp    403847 <main.cold+0x226>
						typedtext = typedtext.toAnsiString().substr(1);
  406e05:	48 89 c3             	mov    %rax,%rbx
  406e08:	e9 db cc ff ff       	jmp    403ae8 <main.cold+0x4c7>
  406e0d:	48 89 c3             	mov    %rax,%rbx
  406e10:	e9 e0 cc ff ff       	jmp    403af5 <main.cold+0x4d4>
  406e15:	48 89 c5             	mov    %rax,%rbp
  406e18:	e9 5f cd ff ff       	jmp    403b7c <main.cold+0x55b>
  406e1d:	48 89 c3             	mov    %rax,%rbx
  406e20:	e9 6c cd ff ff       	jmp    403b91 <main.cold+0x570>
				typedtext.insert(0, "BOOM!!!");
  406e25:	48 89 c3             	mov    %rax,%rbx
  406e28:	e9 c7 cb ff ff       	jmp    4039f4 <main.cold+0x3d3>
  406e2d:	48 89 c3             	mov    %rax,%rbx
  406e30:	e9 8f cd ff ff       	jmp    403bc4 <main.cold+0x5a3>
				text.setString("");
  406e35:	48 89 c3             	mov    %rax,%rbx
  406e38:	e9 b7 cb ff ff       	jmp    4039f4 <main.cold+0x3d3>
  406e3d:	48 89 c3             	mov    %rax,%rbx
  406e40:	e9 ab cd ff ff       	jmp    403bf0 <main.cold+0x5cf>
			timer_text.setString(min_string + ":" + sec_string);
  406e45:	48 89 c3             	mov    %rax,%rbx
  406e48:	e9 e5 c7 ff ff       	jmp    403632 <main.cold+0x11>
  406e4d:	48 c7 04 24 28 bd 40 	movq   $0x40bd28,(%rsp)
  406e54:	00 
  406e55:	48 89 c5             	mov    %rax,%rbp
  406e58:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  406e5e:	e9 02 ca ff ff       	jmp    403865 <main.cold+0x244>
  406e63:	48 c7 04 24 28 bd 40 	movq   $0x40bd28,(%rsp)
  406e6a:	00 
  406e6b:	48 89 c5             	mov    %rax,%rbp
  406e6e:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  406e74:	e9 0a ca ff ff       	jmp    403883 <main.cold+0x262>
  406e79:	48 89 c3             	mov    %rax,%rbx
  406e7c:	e9 b7 cd ff ff       	jmp    403c38 <main.cold+0x617>
  406e81:	48 89 c3             	mov    %rax,%rbx
  406e84:	e9 91 cd ff ff       	jmp    403c1a <main.cold+0x5f9>
  406e89:	48 89 c3             	mov    %rax,%rbx
  406e8c:	e9 ce cd ff ff       	jmp    403c5f <main.cold+0x63e>
  406e91:	48 89 c3             	mov    %rax,%rbx
  406e94:	e9 a8 cf ff ff       	jmp    403e41 <main.cold+0x820>
  406e99:	48 89 c3             	mov    %rax,%rbx
  406e9c:	e9 8c d1 ff ff       	jmp    40402d <main.cold+0xa0c>
}
  406ea1:	48 89 c3             	mov    %rax,%rbx
  406ea4:	e9 54 c8 ff ff       	jmp    4036fd <main.cold+0xdc>
  406ea9:	48 89 c3             	mov    %rax,%rbx
  406eac:	e9 da cd ff ff       	jmp    403c8b <main.cold+0x66a>
  406eb1:	48 89 c3             	mov    %rax,%rbx
  406eb4:	e9 66 cc ff ff       	jmp    403b1f <main.cold+0x4fe>
  406eb9:	48 89 c3             	mov    %rax,%rbx
  406ebc:	e9 20 ce ff ff       	jmp    403ce1 <main.cold+0x6c0>
  406ec1:	48 89 c3             	mov    %rax,%rbx
  406ec4:	e9 36 ce ff ff       	jmp    403cff <main.cold+0x6de>
  406ec9:	48 89 c3             	mov    %rax,%rbx
  406ecc:	e9 5d ce ff ff       	jmp    403d2e <main.cold+0x70d>
  406ed1:	48 89 c3             	mov    %rax,%rbx
  406ed4:	e9 78 ce ff ff       	jmp    403d51 <main.cold+0x730>
  406ed9:	48 89 c3             	mov    %rax,%rbx
  406edc:	e9 8e ce ff ff       	jmp    403d6f <main.cold+0x74e>
						typedtext = typedtext.toAnsiString().substr(1);
  406ee1:	48 89 c3             	mov    %rax,%rbx
  406ee4:	e9 ff cb ff ff       	jmp    403ae8 <main.cold+0x4c7>
  406ee9:	48 c7 04 24 28 bd 40 	movq   $0x40bd28,(%rsp)
  406ef0:	00 
  406ef1:	48 89 c5             	mov    %rax,%rbp
  406ef4:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  406efa:	e9 3a c8 ff ff       	jmp    403739 <main.cold+0x118>
  406eff:	48 c7 04 24 28 bd 40 	movq   $0x40bd28,(%rsp)
  406f06:	00 
  406f07:	48 89 c5             	mov    %rax,%rbp
  406f0a:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  406f10:	e9 42 c8 ff ff       	jmp    403757 <main.cold+0x136>
  406f15:	48 c7 04 24 28 bd 40 	movq   $0x40bd28,(%rsp)
  406f1c:	00 
  406f1d:	48 89 c5             	mov    %rax,%rbp
  406f20:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  406f26:	e9 4a c8 ff ff       	jmp    403775 <main.cold+0x154>
  406f2b:	48 c7 04 24 28 bd 40 	movq   $0x40bd28,(%rsp)
  406f32:	00 
  406f33:	48 89 c5             	mov    %rax,%rbp
  406f36:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  406f3c:	e9 52 c8 ff ff       	jmp    403793 <main.cold+0x172>
  406f41:	48 c7 04 24 28 bd 40 	movq   $0x40bd28,(%rsp)
  406f48:	00 
  406f49:	48 89 c5             	mov    %rax,%rbp
  406f4c:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  406f52:	e9 5a c8 ff ff       	jmp    4037b1 <main.cold+0x190>
  406f57:	48 c7 04 24 28 bd 40 	movq   $0x40bd28,(%rsp)
  406f5e:	00 
  406f5f:	48 89 c5             	mov    %rax,%rbp
  406f62:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  406f68:	e9 62 c8 ff ff       	jmp    4037cf <main.cold+0x1ae>
  406f6d:	48 c7 04 24 28 bd 40 	movq   $0x40bd28,(%rsp)
  406f74:	00 
  406f75:	48 89 c5             	mov    %rax,%rbp
  406f78:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  406f7e:	e9 6a c8 ff ff       	jmp    4037ed <main.cold+0x1cc>
  406f83:	48 c7 04 24 28 bd 40 	movq   $0x40bd28,(%rsp)
  406f8a:	00 
  406f8b:	48 89 c5             	mov    %rax,%rbp
  406f8e:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  406f94:	e9 72 c8 ff ff       	jmp    40380b <main.cold+0x1ea>
  406f99:	48 c7 04 24 28 bd 40 	movq   $0x40bd28,(%rsp)
  406fa0:	00 
  406fa1:	48 89 c5             	mov    %rax,%rbp
  406fa4:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  406faa:	e9 f2 c8 ff ff       	jmp    4038a1 <main.cold+0x280>
  406faf:	48 c7 04 24 28 bd 40 	movq   $0x40bd28,(%rsp)
  406fb6:	00 
  406fb7:	48 89 c5             	mov    %rax,%rbp
  406fba:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  406fc0:	e9 fa c8 ff ff       	jmp    4038bf <main.cold+0x29e>
  406fc5:	48 c7 04 24 28 bd 40 	movq   $0x40bd28,(%rsp)
  406fcc:	00 
  406fcd:	48 89 c5             	mov    %rax,%rbp
  406fd0:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  406fd6:	e9 02 c9 ff ff       	jmp    4038dd <main.cold+0x2bc>
  406fdb:	48 c7 04 24 28 bd 40 	movq   $0x40bd28,(%rsp)
  406fe2:	00 
  406fe3:	48 89 c5             	mov    %rax,%rbp
  406fe6:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  406fec:	e9 0a c9 ff ff       	jmp    4038fb <main.cold+0x2da>
  406ff1:	48 89 c3             	mov    %rax,%rbx
  406ff4:	e9 c5 cc ff ff       	jmp    403cbe <main.cold+0x69d>
						typedtext = typedtext.toAnsiString().substr(1);
  406ff9:	48 89 c3             	mov    %rax,%rbx
  406ffc:	e9 e7 ca ff ff       	jmp    403ae8 <main.cold+0x4c7>
  407001:	48 89 c3             	mov    %rax,%rbx
  407004:	e9 95 cd ff ff       	jmp    403d9e <main.cold+0x77d>
  407009:	48 89 c3             	mov    %rax,%rbx
  40700c:	e9 0e cb ff ff       	jmp    403b1f <main.cold+0x4fe>
  407011:	48 89 c3             	mov    %rax,%rbx
  407014:	e9 6d c6 ff ff       	jmp    403686 <main.cold+0x65>
  407019:	48 89 c3             	mov    %rax,%rbx
  40701c:	e9 d3 cd ff ff       	jmp    403df4 <main.cold+0x7d3>
  407021:	48 89 c3             	mov    %rax,%rbx
  407024:	e9 e9 cd ff ff       	jmp    403e12 <main.cold+0x7f1>
  407029:	48 89 c3             	mov    %rax,%rbx
  40702c:	e9 a0 cd ff ff       	jmp    403dd1 <main.cold+0x7b0>
  407031:	48 c7 04 24 28 bd 40 	movq   $0x40bd28,(%rsp)
  407038:	00 
  407039:	48 89 c5             	mov    %rax,%rbp
  40703c:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  407042:	e9 d2 c8 ff ff       	jmp    403919 <main.cold+0x2f8>
}
  407047:	48 89 c5             	mov    %rax,%rbp
  40704a:	e9 e8 c8 ff ff       	jmp    403937 <main.cold+0x316>
  40704f:	48 89 c3             	mov    %rax,%rbx
  407052:	e9 1d ce ff ff       	jmp    403e74 <main.cold+0x853>
  407057:	48 89 c3             	mov    %rax,%rbx
  40705a:	e9 27 ce ff ff       	jmp    403e86 <main.cold+0x865>
  40705f:	48 89 c3             	mov    %rax,%rbx
  407062:	e9 46 ce ff ff       	jmp    403ead <main.cold+0x88c>
  407067:	48 89 c3             	mov    %rax,%rbx
  40706a:	e9 5a c6 ff ff       	jmp    4036c9 <main.cold+0xa8>
  40706f:	48 89 c3             	mov    %rax,%rbx
  407072:	e9 5f c6 ff ff       	jmp    4036d6 <main.cold+0xb5>
  407077:	48 89 c3             	mov    %rax,%rbx
  40707a:	e9 5d ce ff ff       	jmp    403edc <main.cold+0x8bb>
  40707f:	48 89 c3             	mov    %rax,%rbx
  407082:	e9 69 c6 ff ff       	jmp    4036f0 <main.cold+0xcf>
  407087:	48 89 c3             	mov    %rax,%rbx
  40708a:	e9 89 ce ff ff       	jmp    403f18 <main.cold+0x8f7>
  40708f:	48 89 c3             	mov    %rax,%rbx
  407092:	e9 a3 ce ff ff       	jmp    403f3a <main.cold+0x919>
  407097:	48 89 c3             	mov    %rax,%rbx
  40709a:	e9 05 ca ff ff       	jmp    403aa4 <main.cold+0x483>
  40709f:	48 89 c3             	mov    %rax,%rbx
  4070a2:	e9 93 c5 ff ff       	jmp    40363a <main.cold+0x19>
  4070a7:	48 89 c3             	mov    %rax,%rbx
  4070aa:	e9 70 ca ff ff       	jmp    403b1f <main.cold+0x4fe>
						typedtext = typedtext.toAnsiString().substr(1);
  4070af:	48 89 c3             	mov    %rax,%rbx
  4070b2:	e9 31 ca ff ff       	jmp    403ae8 <main.cold+0x4c7>
							text.setString("");
  4070b7:	48 89 c3             	mov    %rax,%rbx
  4070ba:	e9 35 c9 ff ff       	jmp    4039f4 <main.cold+0x3d3>
  4070bf:	48 89 c3             	mov    %rax,%rbx
  4070c2:	e9 ba c9 ff ff       	jmp    403a81 <main.cold+0x460>
					text.setString(str);
  4070c7:	48 89 c3             	mov    %rax,%rbx
  4070ca:	e9 a0 c8 ff ff       	jmp    40396f <main.cold+0x34e>
  4070cf:	48 89 c3             	mov    %rax,%rbx
  4070d2:	e9 18 cf ff ff       	jmp    403fef <main.cold+0x9ce>
  4070d7:	48 89 c5             	mov    %rax,%rbp
  4070da:	e9 73 ca ff ff       	jmp    403b52 <main.cold+0x531>
  4070df:	48 89 c3             	mov    %rax,%rbx
  4070e2:	e9 65 ce ff ff       	jmp    403f4c <main.cold+0x92b>
  4070e7:	48 89 c3             	mov    %rax,%rbx
  4070ea:	e9 17 ce ff ff       	jmp    403f06 <main.cold+0x8e5>
  4070ef:	48 89 c3             	mov    %rax,%rbx
  4070f2:	e9 28 ca ff ff       	jmp    403b1f <main.cold+0x4fe>
  4070f7:	48 89 c3             	mov    %rax,%rbx
  4070fa:	e9 c3 c9 ff ff       	jmp    403ac2 <main.cold+0x4a1>
							typedtext.insert(0, "Voce deveria saber matematica");
  4070ff:	48 89 c3             	mov    %rax,%rbx
  407102:	e9 ed c8 ff ff       	jmp    4039f4 <main.cold+0x3d3>
  407107:	48 89 c3             	mov    %rax,%rbx
  40710a:	e9 7e ce ff ff       	jmp    403f8d <main.cold+0x96c>
						typedtext = typedtext.toAnsiString().substr(1);
  40710f:	48 89 c3             	mov    %rax,%rbx
  407112:	e9 d1 c9 ff ff       	jmp    403ae8 <main.cold+0x4c7>
  407117:	48 89 c3             	mov    %rax,%rbx
  40711a:	e9 50 ce ff ff       	jmp    403f6f <main.cold+0x94e>
  40711f:	48 89 c3             	mov    %rax,%rbx
  407122:	e9 95 ce ff ff       	jmp    403fbc <main.cold+0x99b>
  407127:	48 89 c3             	mov    %rax,%rbx
  40712a:	e9 f0 c9 ff ff       	jmp    403b1f <main.cold+0x4fe>
  40712f:	48 89 c3             	mov    %rax,%rbx
  407132:	e9 e4 ce ff ff       	jmp    40401b <main.cold+0x9fa>
  407137:	48 89 c5             	mov    %rax,%rbp
  40713a:	e9 ce c5 ff ff       	jmp    40370d <main.cold+0xec>
}
  40713f:	48 89 c3             	mov    %rax,%rbx
  407142:	e9 9c c5 ff ff       	jmp    4036e3 <main.cold+0xc2>

0000000000407147 <.annobin_abi_note.c.hot>:
  407147:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40714e:	00 00 

0000000000407150 <_start>:
  407150:	f3 0f 1e fa          	endbr64 
  407154:	31 ed                	xor    %ebp,%ebp
  407156:	49 89 d1             	mov    %rdx,%r9
  407159:	5e                   	pop    %rsi
  40715a:	48 89 e2             	mov    %rsp,%rdx
  40715d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  407161:	50                   	push   %rax
  407162:	54                   	push   %rsp
  407163:	45 31 c0             	xor    %r8d,%r8d
  407166:	31 c9                	xor    %ecx,%ecx
  407168:	48 c7 c7 90 40 40 00 	mov    $0x404090,%rdi
  40716f:	ff 15 7b 4e 00 00    	call   *0x4e7b(%rip)        # 40bff0 <__libc_start_main@GLIBC_2.34>
  407175:	f4                   	hlt    

0000000000407176 <.annobin_abi_note.c>:
  407176:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  40717d:	00 00 00 

0000000000407180 <_dl_relocate_static_pie>:
  407180:	f3 0f 1e fa          	endbr64 
  407184:	c3                   	ret    

0000000000407185 <.annobin__dl_relocate_static_pie.end>:
  407185:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  40718c:	00 00 00 
  40718f:	90                   	nop

0000000000407190 <deregister_tm_clones>:
  407190:	b8 98 c2 40 00       	mov    $0x40c298,%eax
  407195:	48 3d 98 c2 40 00    	cmp    $0x40c298,%rax
  40719b:	74 13                	je     4071b0 <deregister_tm_clones+0x20>
  40719d:	b8 00 00 00 00       	mov    $0x0,%eax
  4071a2:	48 85 c0             	test   %rax,%rax
  4071a5:	74 09                	je     4071b0 <deregister_tm_clones+0x20>
  4071a7:	bf 98 c2 40 00       	mov    $0x40c298,%edi
  4071ac:	ff e0                	jmp    *%rax
  4071ae:	66 90                	xchg   %ax,%ax
  4071b0:	c3                   	ret    
  4071b1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  4071b8:	00 00 00 00 
  4071bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004071c0 <register_tm_clones>:
  4071c0:	be 98 c2 40 00       	mov    $0x40c298,%esi
  4071c5:	48 81 ee 98 c2 40 00 	sub    $0x40c298,%rsi
  4071cc:	48 89 f0             	mov    %rsi,%rax
  4071cf:	48 c1 ee 3f          	shr    $0x3f,%rsi
  4071d3:	48 c1 f8 03          	sar    $0x3,%rax
  4071d7:	48 01 c6             	add    %rax,%rsi
  4071da:	48 d1 fe             	sar    %rsi
  4071dd:	74 11                	je     4071f0 <register_tm_clones+0x30>
  4071df:	b8 00 00 00 00       	mov    $0x0,%eax
  4071e4:	48 85 c0             	test   %rax,%rax
  4071e7:	74 07                	je     4071f0 <register_tm_clones+0x30>
  4071e9:	bf 98 c2 40 00       	mov    $0x40c298,%edi
  4071ee:	ff e0                	jmp    *%rax
  4071f0:	c3                   	ret    
  4071f1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  4071f8:	00 00 00 00 
  4071fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000407200 <__do_global_dtors_aux>:
  407200:	f3 0f 1e fa          	endbr64 
  407204:	80 3d a1 52 00 00 00 	cmpb   $0x0,0x52a1(%rip)        # 40c4ac <completed.0>
  40720b:	75 13                	jne    407220 <__do_global_dtors_aux+0x20>
  40720d:	55                   	push   %rbp
  40720e:	48 89 e5             	mov    %rsp,%rbp
  407211:	e8 7a ff ff ff       	call   407190 <deregister_tm_clones>
  407216:	c6 05 8f 52 00 00 01 	movb   $0x1,0x528f(%rip)        # 40c4ac <completed.0>
  40721d:	5d                   	pop    %rbp
  40721e:	c3                   	ret    
  40721f:	90                   	nop
  407220:	c3                   	ret    
  407221:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  407228:	00 00 00 00 
  40722c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000407230 <frame_dummy>:
  407230:	f3 0f 1e fa          	endbr64 
  407234:	eb 8a                	jmp    4071c0 <register_tm_clones>
  407236:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  40723d:	00 00 00 

0000000000407240 <_Z17char_to_stringbitB5cxx11c>:
{
  407240:	41 54                	push   %r12
	switch (n)
  407242:	83 ee 30             	sub    $0x30,%esi
{
  407245:	49 89 fc             	mov    %rdi,%r12
  407248:	55                   	push   %rbp
  407249:	53                   	push   %rbx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  40724a:	48 8d 5f 10          	lea    0x10(%rdi),%rbx
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  40724e:	48 89 1f             	mov    %rbx,(%rdi)
      { _M_string_length = __length; }
  407251:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi)
  407258:	00 
      { __c1 = __c2; }
  407259:	c6 47 10 00          	movb   $0x0,0x10(%rdi)
	switch (n)
  40725d:	40 80 fe 09          	cmp    $0x9,%sil
  407261:	0f 87 dc 00 00 00    	ja     407343 <_Z17char_to_stringbitB5cxx11c+0x103>
  407267:	40 0f b6 f6          	movzbl %sil,%esi
       */
      basic_string&
      assign(const _CharT* __s)
      {
	__glibcxx_requires_string(__s);
	return _M_replace(size_type(0), this->size(), __s,
  40726b:	41 b8 08 00 00 00    	mov    $0x8,%r8d
  407271:	ff 24 f5 40 91 40 00 	jmp    *0x409140(,%rsi,8)
  407278:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40727f:	00 
  407280:	b9 58 90 40 00       	mov    $0x409058,%ecx
  407285:	31 d2                	xor    %edx,%edx
  407287:	31 f6                	xor    %esi,%esi
  407289:	e8 42 c1 ff ff       	call   4033d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
}
  40728e:	4c 89 e0             	mov    %r12,%rax
  407291:	5b                   	pop    %rbx
  407292:	5d                   	pop    %rbp
  407293:	41 5c                	pop    %r12
  407295:	c3                   	ret    
  407296:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  40729d:	00 00 00 
  4072a0:	b9 61 90 40 00       	mov    $0x409061,%ecx
  4072a5:	31 d2                	xor    %edx,%edx
  4072a7:	31 f6                	xor    %esi,%esi
  4072a9:	e8 22 c1 ff ff       	call   4033d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  4072ae:	eb de                	jmp    40728e <_Z17char_to_stringbitB5cxx11c+0x4e>
  4072b0:	b9 10 90 40 00       	mov    $0x409010,%ecx
  4072b5:	31 d2                	xor    %edx,%edx
  4072b7:	31 f6                	xor    %esi,%esi
  4072b9:	e8 12 c1 ff ff       	call   4033d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  4072be:	eb ce                	jmp    40728e <_Z17char_to_stringbitB5cxx11c+0x4e>
  4072c0:	b9 19 90 40 00       	mov    $0x409019,%ecx
  4072c5:	31 d2                	xor    %edx,%edx
  4072c7:	31 f6                	xor    %esi,%esi
  4072c9:	e8 02 c1 ff ff       	call   4033d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  4072ce:	eb be                	jmp    40728e <_Z17char_to_stringbitB5cxx11c+0x4e>
  4072d0:	b9 22 90 40 00       	mov    $0x409022,%ecx
  4072d5:	31 d2                	xor    %edx,%edx
  4072d7:	31 f6                	xor    %esi,%esi
  4072d9:	e8 f2 c0 ff ff       	call   4033d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  4072de:	eb ae                	jmp    40728e <_Z17char_to_stringbitB5cxx11c+0x4e>
  4072e0:	b9 2b 90 40 00       	mov    $0x40902b,%ecx
  4072e5:	31 d2                	xor    %edx,%edx
  4072e7:	31 f6                	xor    %esi,%esi
  4072e9:	e8 e2 c0 ff ff       	call   4033d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  4072ee:	eb 9e                	jmp    40728e <_Z17char_to_stringbitB5cxx11c+0x4e>
  4072f0:	b9 34 90 40 00       	mov    $0x409034,%ecx
  4072f5:	31 d2                	xor    %edx,%edx
  4072f7:	31 f6                	xor    %esi,%esi
  4072f9:	e8 d2 c0 ff ff       	call   4033d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  4072fe:	eb 8e                	jmp    40728e <_Z17char_to_stringbitB5cxx11c+0x4e>
  407300:	b9 3d 90 40 00       	mov    $0x40903d,%ecx
  407305:	31 d2                	xor    %edx,%edx
  407307:	31 f6                	xor    %esi,%esi
  407309:	e8 c2 c0 ff ff       	call   4033d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  40730e:	e9 7b ff ff ff       	jmp    40728e <_Z17char_to_stringbitB5cxx11c+0x4e>
  407313:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  407318:	b9 46 90 40 00       	mov    $0x409046,%ecx
  40731d:	31 d2                	xor    %edx,%edx
  40731f:	31 f6                	xor    %esi,%esi
  407321:	e8 aa c0 ff ff       	call   4033d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  407326:	e9 63 ff ff ff       	jmp    40728e <_Z17char_to_stringbitB5cxx11c+0x4e>
  40732b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  407330:	b9 4f 90 40 00       	mov    $0x40904f,%ecx
  407335:	31 d2                	xor    %edx,%edx
  407337:	31 f6                	xor    %esi,%esi
  407339:	e8 92 c0 ff ff       	call   4033d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  40733e:	e9 4b ff ff ff       	jmp    40728e <_Z17char_to_stringbitB5cxx11c+0x4e>
  407343:	45 31 c0             	xor    %r8d,%r8d
  407346:	b9 25 91 40 00       	mov    $0x409125,%ecx
  40734b:	31 d2                	xor    %edx,%edx
  40734d:	31 f6                	xor    %esi,%esi
  40734f:	e8 7c c0 ff ff       	call   4033d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  407354:	e9 35 ff ff ff       	jmp    40728e <_Z17char_to_stringbitB5cxx11c+0x4e>
      { return _M_dataplus._M_p; }
  407359:	48 89 c5             	mov    %rax,%rbp
  40735c:	e9 bf c1 ff ff       	jmp    403520 <_Z17char_to_stringbitB5cxx11c.cold>
  407361:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  407368:	00 00 00 00 
  40736c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000407370 <_Z13writeLDisplayij>:
{
  407370:	55                   	push   %rbp
	ioctl(fd, WR_L_DISPLAY);
  407371:	31 c0                	xor    %eax,%eax
{
  407373:	89 fd                	mov    %edi,%ebp
  407375:	48 83 ec 10          	sub    $0x10,%rsp
  407379:	89 74 24 0c          	mov    %esi,0xc(%rsp)
	ioctl(fd, WR_L_DISPLAY);
  40737d:	be 63 61 00 00       	mov    $0x6163,%esi
  407382:	e8 b9 bf ff ff       	call   403340 <ioctl@plt>
	write(fd, &data, sizeof(data));
  407387:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  40738c:	89 ef                	mov    %ebp,%edi
  40738e:	ba 04 00 00 00       	mov    $0x4,%edx
  407393:	e8 58 bd ff ff       	call   4030f0 <write@plt>
}
  407398:	48 83 c4 10          	add    $0x10,%rsp
  40739c:	5d                   	pop    %rbp
  40739d:	c3                   	ret    
  40739e:	66 90                	xchg   %ax,%ax

00000000004073a0 <_Z13writeRDisplayij>:
{
  4073a0:	55                   	push   %rbp
	ioctl(fd, WR_R_DISPLAY);
  4073a1:	31 c0                	xor    %eax,%eax
{
  4073a3:	89 fd                	mov    %edi,%ebp
  4073a5:	48 83 ec 10          	sub    $0x10,%rsp
  4073a9:	89 74 24 0c          	mov    %esi,0xc(%rsp)
	ioctl(fd, WR_R_DISPLAY);
  4073ad:	be 64 61 00 00       	mov    $0x6164,%esi
  4073b2:	e8 89 bf ff ff       	call   403340 <ioctl@plt>
	write(fd, &data, sizeof(data));
  4073b7:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  4073bc:	89 ef                	mov    %ebp,%edi
  4073be:	ba 04 00 00 00       	mov    $0x4,%edx
  4073c3:	e8 28 bd ff ff       	call   4030f0 <write@plt>
}
  4073c8:	48 83 c4 10          	add    $0x10,%rsp
  4073cc:	5d                   	pop    %rbp
  4073cd:	c3                   	ret    
  4073ce:	66 90                	xchg   %ax,%ax

00000000004073d0 <_Z13writeGreenLedij>:
{
  4073d0:	55                   	push   %rbp
	ioctl(fd, WR_GREEN_LEDS);
  4073d1:	31 c0                	xor    %eax,%eax
{
  4073d3:	89 fd                	mov    %edi,%ebp
  4073d5:	48 83 ec 10          	sub    $0x10,%rsp
  4073d9:	89 74 24 0c          	mov    %esi,0xc(%rsp)
	ioctl(fd, WR_GREEN_LEDS);
  4073dd:	be 66 61 00 00       	mov    $0x6166,%esi
  4073e2:	e8 59 bf ff ff       	call   403340 <ioctl@plt>
	write(fd, &data, sizeof(data));
  4073e7:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  4073ec:	89 ef                	mov    %ebp,%edi
  4073ee:	ba 04 00 00 00       	mov    $0x4,%edx
  4073f3:	e8 f8 bc ff ff       	call   4030f0 <write@plt>
}
  4073f8:	48 83 c4 10          	add    $0x10,%rsp
  4073fc:	5d                   	pop    %rbp
  4073fd:	c3                   	ret    
  4073fe:	66 90                	xchg   %ax,%ax

0000000000407400 <_Z11writeRedLedij>:
{
  407400:	55                   	push   %rbp
	ioctl(fd, WR_RED_LEDS);
  407401:	31 c0                	xor    %eax,%eax
{
  407403:	89 fd                	mov    %edi,%ebp
  407405:	48 83 ec 10          	sub    $0x10,%rsp
  407409:	89 74 24 0c          	mov    %esi,0xc(%rsp)
	ioctl(fd, WR_RED_LEDS);
  40740d:	be 65 61 00 00       	mov    $0x6165,%esi
  407412:	e8 29 bf ff ff       	call   403340 <ioctl@plt>
	write(fd, &data, sizeof(data));
  407417:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  40741c:	89 ef                	mov    %ebp,%edi
  40741e:	ba 04 00 00 00       	mov    $0x4,%edx
  407423:	e8 c8 bc ff ff       	call   4030f0 <write@plt>
}
  407428:	48 83 c4 10          	add    $0x10,%rsp
  40742c:	5d                   	pop    %rbp
  40742d:	c3                   	ret    
  40742e:	66 90                	xchg   %ax,%ax

0000000000407430 <_Z10readButtonij>:
{
  407430:	55                   	push   %rbp
	ioctl(fd, RD_PBUTTONS);
  407431:	31 c0                	xor    %eax,%eax
{
  407433:	89 fd                	mov    %edi,%ebp
  407435:	48 83 ec 10          	sub    $0x10,%rsp
  407439:	89 74 24 0c          	mov    %esi,0xc(%rsp)
	ioctl(fd, RD_PBUTTONS);
  40743d:	be 62 61 00 00       	mov    $0x6162,%esi
  407442:	e8 f9 be ff ff       	call   403340 <ioctl@plt>
	read(fd, &data, 1);
  407447:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  40744c:	89 ef                	mov    %ebp,%edi
  40744e:	ba 01 00 00 00       	mov    $0x1,%edx
  407453:	e8 18 bf ff ff       	call   403370 <read@plt>
}
  407458:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  40745c:	48 83 c4 10          	add    $0x10,%rsp
  407460:	5d                   	pop    %rbp
  407461:	c3                   	ret    
  407462:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  407469:	00 00 00 00 
  40746d:	0f 1f 00             	nopl   (%rax)

0000000000407470 <_Z10readSwitchij>:
{
  407470:	55                   	push   %rbp
	ioctl(fd, RD_SWITCHES);
  407471:	31 c0                	xor    %eax,%eax
{
  407473:	89 fd                	mov    %edi,%ebp
  407475:	48 83 ec 10          	sub    $0x10,%rsp
  407479:	89 74 24 0c          	mov    %esi,0xc(%rsp)
	ioctl(fd, RD_SWITCHES);
  40747d:	be 61 61 00 00       	mov    $0x6161,%esi
  407482:	e8 b9 be ff ff       	call   403340 <ioctl@plt>
	read(fd, &data, 3);
  407487:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  40748c:	89 ef                	mov    %ebp,%edi
  40748e:	ba 03 00 00 00       	mov    $0x3,%edx
  407493:	e8 d8 be ff ff       	call   403370 <read@plt>
}
  407498:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  40749c:	48 83 c4 10          	add    $0x10,%rsp
  4074a0:	5d                   	pop    %rbp
  4074a1:	c3                   	ret    
  4074a2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  4074a9:	00 00 00 00 
  4074ad:	0f 1f 00             	nopl   (%rax)

00000000004074b0 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_>:
{
  4074b0:	41 56                	push   %r14
  4074b2:	49 89 d6             	mov    %rdx,%r14
  4074b5:	41 55                	push   %r13
  4074b7:	49 89 f5             	mov    %rsi,%r13
  4074ba:	41 54                	push   %r12
  4074bc:	55                   	push   %rbp
  4074bd:	89 fd                	mov    %edi,%ebp
  4074bf:	53                   	push   %rbx
  4074c0:	48 83 ec 40          	sub    $0x40,%rsp
	bit_string += char_to_stringbit(sec_string[0]);
  4074c4:	48 8b 02             	mov    (%rdx),%rax
	: allocator_type(__a), _M_p(__dat) { }
  4074c7:	48 8d 5c 24 10       	lea    0x10(%rsp),%rbx
  4074cc:	c6 44 24 10 00       	movb   $0x0,0x10(%rsp)
  4074d1:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  4074d6:	48 89 1c 24          	mov    %rbx,(%rsp)
      { _M_string_length = __length; }
  4074da:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  4074e1:	00 00 
  4074e3:	0f be 30             	movsbl (%rax),%esi
  4074e6:	e8 55 fd ff ff       	call   407240 <_Z17char_to_stringbitB5cxx11c>
      { return _M_append(__str._M_data(), __str.size()); }
  4074eb:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  4074f0:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  4074f5:	48 89 e7             	mov    %rsp,%rdi
  4074f8:	e8 a3 bb ff ff       	call   4030a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
      { return _M_dataplus._M_p; }
  4074fd:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  407502:	4c 8d 64 24 30       	lea    0x30(%rsp),%r12
  407507:	4c 39 e7             	cmp    %r12,%rdi
  40750a:	74 0e                	je     40751a <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x6a>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  40750c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  407511:	48 8d 70 01          	lea    0x1(%rax),%rsi
  407515:	e8 26 bd ff ff       	call   403240 <_ZdlPvm@plt>
	bit_string += char_to_stringbit(sec_string[1]);
  40751a:	49 8b 06             	mov    (%r14),%rax
  40751d:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  407522:	0f be 70 01          	movsbl 0x1(%rax),%esi
  407526:	e8 15 fd ff ff       	call   407240 <_Z17char_to_stringbitB5cxx11c>
      { return _M_append(__str._M_data(), __str.size()); }
  40752b:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  407530:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  407535:	48 89 e7             	mov    %rsp,%rdi
  407538:	e8 63 bb ff ff       	call   4030a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
      { return _M_dataplus._M_p; }
  40753d:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  407542:	4c 39 e7             	cmp    %r12,%rdi
  407545:	74 0e                	je     407555 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0xa5>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  407547:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  40754c:	48 8d 70 01          	lea    0x1(%rax),%rsi
  407550:	e8 eb bc ff ff       	call   403240 <_ZdlPvm@plt>
	bit_string += char_to_stringbit(min_string[0]);
  407555:	49 8b 45 00          	mov    0x0(%r13),%rax
  407559:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  40755e:	0f be 30             	movsbl (%rax),%esi
  407561:	e8 da fc ff ff       	call   407240 <_Z17char_to_stringbitB5cxx11c>
      { return _M_append(__str._M_data(), __str.size()); }
  407566:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  40756b:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  407570:	48 89 e7             	mov    %rsp,%rdi
  407573:	e8 28 bb ff ff       	call   4030a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
      { return _M_dataplus._M_p; }
  407578:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  40757d:	4c 39 e7             	cmp    %r12,%rdi
  407580:	74 0e                	je     407590 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0xe0>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  407582:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  407587:	48 8d 70 01          	lea    0x1(%rax),%rsi
  40758b:	e8 b0 bc ff ff       	call   403240 <_ZdlPvm@plt>
	bit_string += char_to_stringbit(min_string[1]);
  407590:	49 8b 45 00          	mov    0x0(%r13),%rax
  407594:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  407599:	0f be 70 01          	movsbl 0x1(%rax),%esi
  40759d:	e8 9e fc ff ff       	call   407240 <_Z17char_to_stringbitB5cxx11c>
      { return _M_append(__str._M_data(), __str.size()); }
  4075a2:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  4075a7:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  4075ac:	48 89 e7             	mov    %rsp,%rdi
  4075af:	e8 ec ba ff ff       	call   4030a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
      { return _M_dataplus._M_p; }
  4075b4:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  4075b9:	4c 39 e7             	cmp    %r12,%rdi
  4075bc:	74 0e                	je     4075cc <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x11c>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4075be:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  4075c3:	48 8d 70 01          	lea    0x1(%rax),%rsi
  4075c7:	e8 74 bc ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_string_length; }
  4075cc:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
      { return _M_dataplus._M_p; }
  4075d1:	48 8b 04 24          	mov    (%rsp),%rax
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
  4075d5:	48 83 f9 ff          	cmp    $0xffffffffffffffff,%rcx
  4075d9:	0f 85 89 00 00 00    	jne    407668 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x1b8>
  4075df:	b9 20 00 00 00       	mov    $0x20,%ecx
  4075e4:	48 83 e9 01          	sub    $0x1,%rcx
    {
      typedef unsigned long _WordT;
      _WordT _M_w;

      _GLIBCXX_CONSTEXPR _Base_bitset() _GLIBCXX_NOEXCEPT
      : _M_w(0)
  4075e8:	31 f6                	xor    %esi,%esi
      _S_whichbit(size_t __pos) _GLIBCXX_NOEXCEPT
      {  return __pos % _GLIBCXX_BITSET_BITS_PER_WORD; }

      static _GLIBCXX_CONSTEXPR _WordT
      _S_maskbit(size_t __pos) _GLIBCXX_NOEXCEPT
      { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }
  4075ea:	bf 01 00 00 00       	mov    $0x1,%edi
  4075ef:	eb 0a                	jmp    4075fb <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x14b>
  4075f1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4075f8:	48 89 d1             	mov    %rdx,%rcx
      {
	reset();
	const size_t __nbits = std::min(_Nb, std::min(__n, size_t(__len - __pos)));
	for (size_t __i = __nbits; __i > 0; --__i)
	  {
	    const _CharT __c = __s[__pos + __nbits - __i];
  4075fb:	0f b6 10             	movzbl (%rax),%edx
	    if (_Traits::eq(__c, __zero))
  4075fe:	80 fa 30             	cmp    $0x30,%dl
  407601:	74 0e                	je     407611 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x161>
	      ;
	    else if (_Traits::eq(__c, __one))
  407603:	80 fa 31             	cmp    $0x31,%dl
  407606:	75 77                	jne    40767f <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x1cf>
      { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }
  407608:	48 89 fa             	mov    %rdi,%rdx
  40760b:	48 d3 e2             	shl    %cl,%rdx
	this->_M_getword(__pos) |= _Base::_S_maskbit(__pos);
  40760e:	48 09 d6             	or     %rdx,%rsi
	for (size_t __i = __nbits; __i > 0; --__i)
  407611:	48 83 c0 01          	add    $0x1,%rax
  407615:	48 8d 51 ff          	lea    -0x1(%rcx),%rdx
  407619:	48 85 c9             	test   %rcx,%rcx
  40761c:	75 da                	jne    4075f8 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x148>
	writeLDisplay(fd, data);
  40761e:	89 74 24 20          	mov    %esi,0x20(%rsp)
	ioctl(fd, WR_L_DISPLAY);
  407622:	89 ef                	mov    %ebp,%edi
  407624:	be 63 61 00 00       	mov    $0x6163,%esi
  407629:	31 c0                	xor    %eax,%eax
  40762b:	e8 10 bd ff ff       	call   403340 <ioctl@plt>
	write(fd, &data, sizeof(data));
  407630:	ba 04 00 00 00       	mov    $0x4,%edx
  407635:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  40763a:	89 ef                	mov    %ebp,%edi
  40763c:	e8 af ba ff ff       	call   4030f0 <write@plt>
  407641:	48 8b 3c 24          	mov    (%rsp),%rdi
	if (!_M_is_local())
  407645:	48 39 df             	cmp    %rbx,%rdi
  407648:	74 0e                	je     407658 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x1a8>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  40764a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  40764f:	48 8d 70 01          	lea    0x1(%rax),%rsi
  407653:	e8 e8 bb ff ff       	call   403240 <_ZdlPvm@plt>
}
  407658:	48 83 c4 40          	add    $0x40,%rsp
  40765c:	5b                   	pop    %rbx
  40765d:	5d                   	pop    %rbp
  40765e:	41 5c                	pop    %r12
  407660:	41 5d                	pop    %r13
  407662:	41 5e                	pop    %r14
  407664:	c3                   	ret    
  407665:	0f 1f 00             	nopl   (%rax)
  407668:	48 83 f9 1f          	cmp    $0x1f,%rcx
  40766c:	0f 87 6d ff ff ff    	ja     4075df <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x12f>
  407672:	48 85 c9             	test   %rcx,%rcx
  407675:	0f 85 69 ff ff ff    	jne    4075e4 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x134>
  40767b:	31 f6                	xor    %esi,%esi
  40767d:	eb 9f                	jmp    40761e <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x16e>
	      _Unchecked_set(__i - 1);
	    else
	      __throw_invalid_argument(__N("bitset::_M_copy_from_ptr"));
  40767f:	bf 6a 90 40 00       	mov    $0x40906a,%edi
  407684:	e8 d7 ba ff ff       	call   403160 <_ZSt24__throw_invalid_argumentPKc@plt>
      { return _M_dataplus._M_p; }
  407689:	48 89 c5             	mov    %rax,%rbp
  40768c:	e9 ae be ff ff       	jmp    40353f <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold>
  407691:	48 89 c5             	mov    %rax,%rbp
  407694:	e9 dd be ff ff       	jmp    403576 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x37>
  407699:	48 89 c5             	mov    %rax,%rbp
  40769c:	e9 ef be ff ff       	jmp    403590 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x51>
  4076a1:	48 89 c5             	mov    %rax,%rbp
  4076a4:	e9 06 bf ff ff       	jmp    4035af <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x70>
  4076a9:	48 89 c5             	mov    %rax,%rbp
  4076ac:	e9 a6 be ff ff       	jmp    403557 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x18>
  4076b1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  4076b8:	00 00 00 00 
  4076bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004076c0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>:
{
  4076c0:	41 57                	push   %r15
  4076c2:	41 56                	push   %r14
  4076c4:	41 55                	push   %r13
  4076c6:	49 89 cd             	mov    %rcx,%r13
  4076c9:	41 54                	push   %r12
  4076cb:	49 89 d4             	mov    %rdx,%r12
  4076ce:	55                   	push   %rbp
  4076cf:	53                   	push   %rbx
  4076d0:	48 63 de             	movslq %esi,%rbx
  4076d3:	49 89 d8             	mov    %rbx,%r8
	unsigned int minutes = number / 60;
  4076d6:	48 69 db 89 88 88 88 	imul   $0xffffffff88888889,%rbx,%rbx
  4076dd:	44 89 c0             	mov    %r8d,%eax
  4076e0:	c1 f8 1f             	sar    $0x1f,%eax
{
  4076e3:	48 83 ec 68          	sub    $0x68,%rsp
	unsigned int minutes = number / 60;
  4076e7:	48 c1 eb 20          	shr    $0x20,%rbx
{
  4076eb:	89 7c 24 04          	mov    %edi,0x4(%rsp)
	unsigned int minutes = number / 60;
  4076ef:	44 01 c3             	add    %r8d,%ebx
  4076f2:	c1 fb 05             	sar    $0x5,%ebx
  4076f5:	29 c3                	sub    %eax,%ebx
	unsigned int seconds = number % 60;
  4076f7:	6b c3 3c             	imul   $0x3c,%ebx,%eax
  4076fa:	41 29 c0             	sub    %eax,%r8d
	if (seconds < 10)
  4076fd:	41 83 f8 09          	cmp    $0x9,%r8d
  407701:	0f 87 09 02 00 00    	ja     407910 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x250>
	: allocator_type(__a), _M_p(__dat) { }
  407707:	4c 8d 7c 24 20       	lea    0x20(%rsp),%r15
      { _M_construct(__n, __c); }
  40770c:	31 d2                	xor    %edx,%edx
  40770e:	be 01 00 00 00       	mov    $0x1,%esi
  407713:	44 89 44 24 08       	mov    %r8d,0x8(%rsp)
  407718:	4c 89 ff             	mov    %r15,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  40771b:	4c 8d 74 24 30       	lea    0x30(%rsp),%r14
  407720:	4c 89 74 24 20       	mov    %r14,0x20(%rsp)
      { _M_construct(__n, __c); }
  407725:	e8 96 bb ff ff       	call   4032c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@plt>
	  auto const __num = __val * 2;
	  __first[1] = __digits[__num + 1];
	  __first[0] = __digits[__num];
	}
      else
	__first[0] = '0' + __val;
  40772a:	44 8b 44 24 08       	mov    0x8(%rsp),%r8d
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
	      size_type __n2)
      {
	__glibcxx_requires_string_len(__s, __n2);
	return _M_replace(_M_check(__pos, "basic_string::replace"),
  40772f:	31 d2                	xor    %edx,%edx
  407731:	31 f6                	xor    %esi,%esi
  407733:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  407738:	b9 5f 90 40 00       	mov    $0x40905f,%ecx
  40773d:	4c 89 ff             	mov    %r15,%rdi
  407740:	41 83 c0 30          	add    $0x30,%r8d
  407744:	44 88 00             	mov    %r8b,(%rax)
  407747:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  40774d:	e8 7e bc ff ff       	call   4033d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  407752:	48 8d 6c 24 50       	lea    0x50(%rsp),%rbp
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  407757:	48 8d 50 10          	lea    0x10(%rax),%rdx
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  40775b:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
      { return _M_dataplus._M_p; }
  407760:	48 8b 08             	mov    (%rax),%rcx
	if (__str._M_is_local())
  407763:	48 39 d1             	cmp    %rdx,%rcx
  407766:	0f 84 d4 06 00 00    	je     407e40 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x780>
      { _M_dataplus._M_p = __p; }
  40776c:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
	    _M_capacity(__str._M_allocated_capacity);
  407771:	48 8b 48 10          	mov    0x10(%rax),%rcx
      { _M_allocated_capacity = __capacity; }
  407775:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
      { return _M_string_length; }
  40777a:	48 8b 48 08          	mov    0x8(%rax),%rcx
      { _M_string_length = __length; }
  40777e:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
      { _M_dataplus._M_p = __p; }
  407783:	48 89 10             	mov    %rdx,(%rax)
  407786:	c6 40 10 00          	movb   $0x0,0x10(%rax)
      { return _M_dataplus._M_p; }
  40778a:	49 8b 7d 00          	mov    0x0(%r13),%rdi
      { _M_string_length = __length; }
  40778e:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  407795:	00 
      { return _M_dataplus._M_p; }
  407796:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
	if (__str._M_is_local())
  40779b:	48 39 e8             	cmp    %rbp,%rax
  40779e:	0f 84 ac 06 00 00    	je     407e50 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x790>
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4077a4:	49 8d 55 10          	lea    0x10(%r13),%rdx
      { return _M_string_length; }
  4077a8:	f3 0f 6f 44 24 48    	movdqu 0x48(%rsp),%xmm0
	    if (!_M_is_local())
  4077ae:	48 39 d7             	cmp    %rdx,%rdi
  4077b1:	0f 84 09 07 00 00    	je     407ec0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x800>
		    __capacity = _M_allocated_capacity;
  4077b7:	49 8b 55 10          	mov    0x10(%r13),%rdx
      { _M_dataplus._M_p = __p; }
  4077bb:	49 89 45 00          	mov    %rax,0x0(%r13)
      { _M_string_length = __length; }
  4077bf:	41 0f 11 45 08       	movups %xmm0,0x8(%r13)
	    if (__data)
  4077c4:	48 85 ff             	test   %rdi,%rdi
  4077c7:	0f 84 fc 06 00 00    	je     407ec9 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x809>
      { _M_dataplus._M_p = __p; }
  4077cd:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
      { _M_allocated_capacity = __capacity; }
  4077d2:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
      { _M_string_length = __length; }
  4077d7:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  4077de:	00 00 
  4077e0:	c6 07 00             	movb   $0x0,(%rdi)
      { return _M_dataplus._M_p; }
  4077e3:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
	if (!_M_is_local())
  4077e8:	48 39 ef             	cmp    %rbp,%rdi
  4077eb:	74 0e                	je     4077fb <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x13b>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4077ed:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  4077f2:	48 8d 70 01          	lea    0x1(%rax),%rsi
  4077f6:	e8 45 ba ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  4077fb:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  407800:	4c 39 f7             	cmp    %r14,%rdi
  407803:	74 0e                	je     407813 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x153>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  407805:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  40780a:	48 8d 70 01          	lea    0x1(%rax),%rsi
  40780e:	e8 2d ba ff ff       	call   403240 <_ZdlPvm@plt>
	  if (__value < (unsigned)__base) return __n;
  407813:	83 fb 09             	cmp    $0x9,%ebx
  407816:	0f 86 1e 07 00 00    	jbe    407f3a <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x87a>
	  if (__value < __b2) return __n + 1;
  40781c:	83 fb 63             	cmp    $0x63,%ebx
  40781f:	0f 86 33 07 00 00    	jbe    407f58 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x898>
	  if (__value < __b3) return __n + 2;
  407825:	81 fb e7 03 00 00    	cmp    $0x3e7,%ebx
  40782b:	0f 86 3b 07 00 00    	jbe    407f6c <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x8ac>
	  if (__value < __b4) return __n + 3;
  407831:	89 d9                	mov    %ebx,%ecx
  407833:	48 89 ca             	mov    %rcx,%rdx
  407836:	81 fb 0f 27 00 00    	cmp    $0x270f,%ebx
  40783c:	0f 86 20 07 00 00    	jbe    407f62 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x8a2>
	  __value /= __b4;
  407842:	49 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%r8
  407849:	c5 6d 34 
      unsigned __n = 1;
  40784c:	be 01 00 00 00       	mov    $0x1,%esi
  407851:	eb 26                	jmp    407879 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x1b9>
  407853:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	  if (__value < __b2) return __n + 1;
  407858:	83 fa 63             	cmp    $0x63,%edx
  40785b:	0f 86 ef 03 00 00    	jbe    407c50 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x590>
	  if (__value < __b3) return __n + 2;
  407861:	81 fa e7 03 00 00    	cmp    $0x3e7,%edx
  407867:	0f 86 8b 05 00 00    	jbe    407df8 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x738>
	  if (__value < __b4) return __n + 3;
  40786d:	81 fa 0f 27 00 00    	cmp    $0x270f,%edx
  407873:	0f 86 87 05 00 00    	jbe    407e00 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x740>
	  __value /= __b4;
  407879:	48 89 d0             	mov    %rdx,%rax
  40787c:	48 89 d7             	mov    %rdx,%rdi
  40787f:	49 f7 e0             	mul    %r8
  407882:	89 f0                	mov    %esi,%eax
	  __n += 4;
  407884:	83 c6 04             	add    $0x4,%esi
	  __value /= __b4;
  407887:	48 c1 ea 0b          	shr    $0xb,%rdx
	  if (__value < (unsigned)__base) return __n;
  40788b:	48 81 ff 9f 86 01 00 	cmp    $0x1869f,%rdi
  407892:	77 c4                	ja     407858 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x198>
      { _M_construct(__n, __c); }
  407894:	4c 89 ff             	mov    %r15,%rdi
  407897:	31 d2                	xor    %edx,%edx
  407899:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
	: allocator_type(__a), _M_p(__dat) { }
  40789e:	4c 89 74 24 20       	mov    %r14,0x20(%rsp)
      { _M_construct(__n, __c); }
  4078a3:	e8 18 ba ff ff       	call   4032c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@plt>
      unsigned __pos = __len - 1;
  4078a8:	8b 44 24 28          	mov    0x28(%rsp),%eax
      { return _M_dataplus._M_p; }
  4078ac:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
  4078b1:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
      unsigned __pos = __len - 1;
  4078b6:	8d 70 ff             	lea    -0x1(%rax),%esi
      while (__val >= 100)
  4078b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	  auto const __num = (__val % 100) * 2;
  4078c0:	48 69 d1 1f 85 eb 51 	imul   $0x51eb851f,%rcx,%rdx
  4078c7:	89 d8                	mov    %ebx,%eax
  4078c9:	48 c1 ea 25          	shr    $0x25,%rdx
  4078cd:	6b ca 64             	imul   $0x64,%edx,%ecx
  4078d0:	29 c8                	sub    %ecx,%eax
  4078d2:	89 d9                	mov    %ebx,%ecx
	  __val /= 100;
  4078d4:	89 d3                	mov    %edx,%ebx
	  __first[__pos] = __digits[__num + 1];
  4078d6:	89 f2                	mov    %esi,%edx
	  auto const __num = (__val % 100) * 2;
  4078d8:	01 c0                	add    %eax,%eax
	  __first[__pos] = __digits[__num + 1];
  4078da:	44 8d 40 01          	lea    0x1(%rax),%r8d
	  __first[__pos - 1] = __digits[__num];
  4078de:	0f b6 80 00 94 40 00 	movzbl 0x409400(%rax),%eax
	  __first[__pos] = __digits[__num + 1];
  4078e5:	45 0f b6 80 00 94 40 	movzbl 0x409400(%r8),%r8d
  4078ec:	00 
  4078ed:	44 88 04 17          	mov    %r8b,(%rdi,%rdx,1)
	  __first[__pos - 1] = __digits[__num];
  4078f1:	8d 56 ff             	lea    -0x1(%rsi),%edx
	  __pos -= 2;
  4078f4:	83 ee 02             	sub    $0x2,%esi
	  __first[__pos - 1] = __digits[__num];
  4078f7:	88 04 17             	mov    %al,(%rdi,%rdx,1)
      while (__val >= 100)
  4078fa:	81 f9 0f 27 00 00    	cmp    $0x270f,%ecx
  407900:	0f 86 72 01 00 00    	jbe    407a78 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3b8>
  407906:	89 d9                	mov    %ebx,%ecx
  407908:	eb b6                	jmp    4078c0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x200>
  40790a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  407910:	45 89 c6             	mov    %r8d,%r14d
  407913:	44 89 c1             	mov    %r8d,%ecx
      unsigned __n = 1;
  407916:	be 01 00 00 00       	mov    $0x1,%esi
	  __value /= __b4;
  40791b:	48 bf 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%rdi
  407922:	c5 6d 34 
  407925:	eb 0b                	jmp    407932 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x272>
  407927:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40792e:	00 00 
  407930:	89 d1                	mov    %edx,%ecx
	  if (__value < __b2) return __n + 1;
  407932:	83 f9 63             	cmp    $0x63,%ecx
  407935:	0f 86 55 05 00 00    	jbe    407e90 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7d0>
	  if (__value < __b3) return __n + 2;
  40793b:	81 f9 e7 03 00 00    	cmp    $0x3e7,%ecx
  407941:	0f 86 59 05 00 00    	jbe    407ea0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7e0>
	  if (__value < __b4) return __n + 3;
  407947:	89 ca                	mov    %ecx,%edx
  407949:	81 f9 0f 27 00 00    	cmp    $0x270f,%ecx
  40794f:	0f 86 5b 05 00 00    	jbe    407eb0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7f0>
	  __value /= __b4;
  407955:	48 89 d0             	mov    %rdx,%rax
	  __n += 4;
  407958:	83 c6 04             	add    $0x4,%esi
	  __value /= __b4;
  40795b:	48 f7 e7             	mul    %rdi
  40795e:	48 c1 ea 0b          	shr    $0xb,%rdx
	  if (__value < (unsigned)__base) return __n;
  407962:	81 f9 9f 86 01 00    	cmp    $0x1869f,%ecx
  407968:	77 c6                	ja     407930 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x270>
	: allocator_type(__a), _M_p(__dat) { }
  40796a:	48 8d 6c 24 50       	lea    0x50(%rsp),%rbp
      { _M_construct(__n, __c); }
  40796f:	31 d2                	xor    %edx,%edx
  407971:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  407976:	44 89 44 24 08       	mov    %r8d,0x8(%rsp)
	: allocator_type(__a), _M_p(__dat) { }
  40797b:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
      { _M_construct(__n, __c); }
  407980:	e8 3b b9 ff ff       	call   4032c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@plt>
      unsigned __pos = __len - 1;
  407985:	8b 44 24 48          	mov    0x48(%rsp),%eax
      while (__val >= 100)
  407989:	44 8b 44 24 08       	mov    0x8(%rsp),%r8d
      { return _M_dataplus._M_p; }
  40798e:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
      unsigned __pos = __len - 1;
  407993:	8d 70 ff             	lea    -0x1(%rax),%esi
      while (__val >= 100)
  407996:	41 83 f8 63          	cmp    $0x63,%r8d
  40799a:	0f 86 f0 03 00 00    	jbe    407d90 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x6d0>
	  auto const __num = (__val % 100) * 2;
  4079a0:	44 89 f2             	mov    %r14d,%edx
  4079a3:	44 89 f0             	mov    %r14d,%eax
  4079a6:	48 69 d2 1f 85 eb 51 	imul   $0x51eb851f,%rdx,%rdx
  4079ad:	48 c1 ea 25          	shr    $0x25,%rdx
  4079b1:	6b fa 64             	imul   $0x64,%edx,%edi
  4079b4:	29 f8                	sub    %edi,%eax
  4079b6:	44 89 f7             	mov    %r14d,%edi
	  __val /= 100;
  4079b9:	41 89 d6             	mov    %edx,%r14d
	  __first[__pos] = __digits[__num + 1];
  4079bc:	89 f2                	mov    %esi,%edx
	  auto const __num = (__val % 100) * 2;
  4079be:	01 c0                	add    %eax,%eax
	  __first[__pos] = __digits[__num + 1];
  4079c0:	44 8d 40 01          	lea    0x1(%rax),%r8d
	  __first[__pos - 1] = __digits[__num];
  4079c4:	0f b6 80 00 94 40 00 	movzbl 0x409400(%rax),%eax
	  __first[__pos] = __digits[__num + 1];
  4079cb:	45 0f b6 80 00 94 40 	movzbl 0x409400(%r8),%r8d
  4079d2:	00 
  4079d3:	44 88 04 11          	mov    %r8b,(%rcx,%rdx,1)
	  __first[__pos - 1] = __digits[__num];
  4079d7:	8d 56 ff             	lea    -0x1(%rsi),%edx
	  __pos -= 2;
  4079da:	83 ee 02             	sub    $0x2,%esi
	  __first[__pos - 1] = __digits[__num];
  4079dd:	88 04 11             	mov    %al,(%rcx,%rdx,1)
      while (__val >= 100)
  4079e0:	81 ff 0f 27 00 00    	cmp    $0x270f,%edi
  4079e6:	77 b8                	ja     4079a0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x2e0>
	__first[0] = '0' + __val;
  4079e8:	41 8d 46 30          	lea    0x30(%r14),%eax
      if (__val >= 10)
  4079ec:	81 ff e7 03 00 00    	cmp    $0x3e7,%edi
  4079f2:	0f 87 98 03 00 00    	ja     407d90 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x6d0>
  4079f8:	88 01                	mov    %al,(%rcx)
  4079fa:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  4079ff:	49 8b 7d 00          	mov    0x0(%r13),%rdi
	if (__str._M_is_local())
  407a03:	48 39 e8             	cmp    %rbp,%rax
  407a06:	0f 84 b1 03 00 00    	je     407dbd <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x6fd>
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  407a0c:	49 8d 55 10          	lea    0x10(%r13),%rdx
      { return _M_string_length; }
  407a10:	f3 0f 6f 44 24 48    	movdqu 0x48(%rsp),%xmm0
	    if (!_M_is_local())
  407a16:	48 39 d7             	cmp    %rdx,%rdi
  407a19:	0f 84 c1 04 00 00    	je     407ee0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x820>
		    __capacity = _M_allocated_capacity;
  407a1f:	49 8b 55 10          	mov    0x10(%r13),%rdx
      { _M_dataplus._M_p = __p; }
  407a23:	49 89 45 00          	mov    %rax,0x0(%r13)
      { _M_string_length = __length; }
  407a27:	41 0f 11 45 08       	movups %xmm0,0x8(%r13)
	    if (__data)
  407a2c:	48 85 ff             	test   %rdi,%rdi
  407a2f:	0f 84 b4 04 00 00    	je     407ee9 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x829>
      { _M_dataplus._M_p = __p; }
  407a35:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
      { _M_allocated_capacity = __capacity; }
  407a3a:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
      { _M_string_length = __length; }
  407a3f:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  407a46:	00 00 
  407a48:	c6 07 00             	movb   $0x0,(%rdi)
      { return _M_dataplus._M_p; }
  407a4b:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
	if (!_M_is_local())
  407a50:	48 39 ef             	cmp    %rbp,%rdi
  407a53:	74 0e                	je     407a63 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3a3>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  407a55:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  407a5a:	48 8d 70 01          	lea    0x1(%rax),%rsi
  407a5e:	e8 dd b7 ff ff       	call   403240 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  407a63:	4c 8d 7c 24 20       	lea    0x20(%rsp),%r15
  407a68:	4c 8d 74 24 30       	lea    0x30(%rsp),%r14
  407a6d:	e9 a1 fd ff ff       	jmp    407813 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x153>
  407a72:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  407a78:	81 f9 e7 03 00 00    	cmp    $0x3e7,%ecx
  407a7e:	0f 87 ec 01 00 00    	ja     407c70 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x5b0>
	__first[0] = '0' + __val;
  407a84:	83 c3 30             	add    $0x30,%ebx
  407a87:	88 1f                	mov    %bl,(%rdi)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
  407a89:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  407a8f:	b9 5f 90 40 00       	mov    $0x40905f,%ecx
  407a94:	31 d2                	xor    %edx,%edx
  407a96:	31 f6                	xor    %esi,%esi
  407a98:	4c 89 ff             	mov    %r15,%rdi
  407a9b:	e8 30 b9 ff ff       	call   4033d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  407aa0:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
      { return _M_dataplus._M_p; }
  407aa5:	48 8b 08             	mov    (%rax),%rcx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  407aa8:	48 8d 50 10          	lea    0x10(%rax),%rdx
	if (__str._M_is_local())
  407aac:	48 39 d1             	cmp    %rdx,%rcx
  407aaf:	0f 84 8b 02 00 00    	je     407d40 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x680>
      { _M_dataplus._M_p = __p; }
  407ab5:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
	    _M_capacity(__str._M_allocated_capacity);
  407aba:	48 8b 48 10          	mov    0x10(%rax),%rcx
      { _M_allocated_capacity = __capacity; }
  407abe:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
      { return _M_string_length; }
  407ac3:	48 8b 48 08          	mov    0x8(%rax),%rcx
      { _M_string_length = __length; }
  407ac7:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
      { _M_dataplus._M_p = __p; }
  407acc:	48 89 10             	mov    %rdx,(%rax)
  407acf:	c6 40 10 00          	movb   $0x0,0x10(%rax)
      { return _M_dataplus._M_p; }
  407ad3:	49 8b 3c 24          	mov    (%r12),%rdi
      { _M_string_length = __length; }
  407ad7:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  407ade:	00 
      { return _M_dataplus._M_p; }
  407adf:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
	if (__str._M_is_local())
  407ae4:	48 39 e8             	cmp    %rbp,%rax
  407ae7:	0f 84 63 02 00 00    	je     407d50 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x690>
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  407aed:	49 8d 54 24 10       	lea    0x10(%r12),%rdx
      { return _M_string_length; }
  407af2:	f3 0f 6f 44 24 48    	movdqu 0x48(%rsp),%xmm0
	    if (!_M_is_local())
  407af8:	48 39 d7             	cmp    %rdx,%rdi
  407afb:	0f 84 0f 03 00 00    	je     407e10 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x750>
		    __capacity = _M_allocated_capacity;
  407b01:	49 8b 54 24 10       	mov    0x10(%r12),%rdx
      { _M_dataplus._M_p = __p; }
  407b06:	49 89 04 24          	mov    %rax,(%r12)
      { _M_string_length = __length; }
  407b0a:	41 0f 11 44 24 08    	movups %xmm0,0x8(%r12)
	    if (__data)
  407b10:	48 85 ff             	test   %rdi,%rdi
  407b13:	0f 84 01 03 00 00    	je     407e1a <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x75a>
      { _M_dataplus._M_p = __p; }
  407b19:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
      { _M_allocated_capacity = __capacity; }
  407b1e:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
      { _M_string_length = __length; }
  407b23:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  407b2a:	00 00 
  407b2c:	c6 07 00             	movb   $0x0,(%rdi)
      { return _M_dataplus._M_p; }
  407b2f:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
	if (!_M_is_local())
  407b34:	48 39 ef             	cmp    %rbp,%rdi
  407b37:	74 0e                	je     407b47 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x487>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  407b39:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  407b3e:	48 8d 70 01          	lea    0x1(%rax),%rsi
	::operator delete(__p
  407b42:	e8 f9 b6 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  407b47:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  407b4c:	4c 39 f7             	cmp    %r14,%rdi
  407b4f:	74 0e                	je     407b5f <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x49f>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  407b51:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  407b56:	48 8d 70 01          	lea    0x1(%rax),%rsi
  407b5a:	e8 e1 b6 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  407b5f:	49 8b 1c 24          	mov    (%r12),%rbx
      { return _M_string_length; }
  407b63:	4d 8b 64 24 08       	mov    0x8(%r12),%r12
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  407b68:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
  407b6d:	48 89 d8             	mov    %rbx,%rax
  407b70:	4c 01 e0             	add    %r12,%rax
  407b73:	74 09                	je     407b7e <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x4be>
  407b75:	48 85 db             	test   %rbx,%rbx
  407b78:	0f 84 fa 03 00 00    	je     407f78 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x8b8>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
  407b7e:	4c 89 64 24 20       	mov    %r12,0x20(%rsp)
	if (__dnew > size_type(_S_local_capacity))
  407b83:	49 83 fc 0f          	cmp    $0xf,%r12
  407b87:	0f 87 33 01 00 00    	ja     407cc0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x600>
	if (__n == 1)
  407b8d:	49 83 fc 01          	cmp    $0x1,%r12
  407b91:	0f 85 f9 00 00 00    	jne    407c90 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x5d0>
  407b97:	0f b6 03             	movzbl (%rbx),%eax
  407b9a:	88 44 24 50          	mov    %al,0x50(%rsp)
  407b9e:	48 89 e8             	mov    %rbp,%rax
      { _M_string_length = __length; }
  407ba1:	4c 89 64 24 48       	mov    %r12,0x48(%rsp)
  407ba6:	42 c6 04 20 00       	movb   $0x0,(%rax,%r12,1)
      { return _M_dataplus._M_p; }
  407bab:	4d 8b 65 00          	mov    0x0(%r13),%r12
      { return _M_string_length; }
  407baf:	4d 8b 6d 08          	mov    0x8(%r13),%r13
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  407bb3:	4c 89 74 24 20       	mov    %r14,0x20(%rsp)
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
  407bb8:	4c 89 e0             	mov    %r12,%rax
  407bbb:	4c 01 e8             	add    %r13,%rax
  407bbe:	74 09                	je     407bc9 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x509>
  407bc0:	4d 85 e4             	test   %r12,%r12
  407bc3:	0f 84 b9 03 00 00    	je     407f82 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x8c2>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
  407bc9:	4c 89 6c 24 18       	mov    %r13,0x18(%rsp)
	if (__dnew > size_type(_S_local_capacity))
  407bce:	49 83 fd 0f          	cmp    $0xf,%r13
  407bd2:	0f 87 28 01 00 00    	ja     407d00 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x640>
	if (__n == 1)
  407bd8:	49 83 fd 01          	cmp    $0x1,%r13
  407bdc:	0f 85 c6 00 00 00    	jne    407ca8 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x5e8>
  407be2:	41 0f b6 04 24       	movzbl (%r12),%eax
  407be7:	88 44 24 30          	mov    %al,0x30(%rsp)
  407beb:	4c 89 f0             	mov    %r14,%rax
      { _M_string_length = __length; }
  407bee:	4c 89 6c 24 28       	mov    %r13,0x28(%rsp)
	string_to_display(fd, sec_string, min_string);
  407bf3:	8b 7c 24 04          	mov    0x4(%rsp),%edi
  407bf7:	48 8d 54 24 40       	lea    0x40(%rsp),%rdx
  407bfc:	4c 89 fe             	mov    %r15,%rsi
  407bff:	42 c6 04 28 00       	movb   $0x0,(%rax,%r13,1)
  407c04:	e8 a7 f8 ff ff       	call   4074b0 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_>
      { return _M_dataplus._M_p; }
  407c09:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  407c0e:	4c 39 f7             	cmp    %r14,%rdi
  407c11:	74 0e                	je     407c21 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x561>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  407c13:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  407c18:	48 8d 70 01          	lea    0x1(%rax),%rsi
  407c1c:	e8 1f b6 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  407c21:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
	if (!_M_is_local())
  407c26:	48 39 ef             	cmp    %rbp,%rdi
  407c29:	74 0e                	je     407c39 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x579>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  407c2b:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  407c30:	48 8d 70 01          	lea    0x1(%rax),%rsi
  407c34:	e8 07 b6 ff ff       	call   403240 <_ZdlPvm@plt>
}
  407c39:	48 83 c4 68          	add    $0x68,%rsp
  407c3d:	5b                   	pop    %rbx
  407c3e:	5d                   	pop    %rbp
  407c3f:	41 5c                	pop    %r12
  407c41:	41 5d                	pop    %r13
  407c43:	41 5e                	pop    %r14
  407c45:	41 5f                	pop    %r15
  407c47:	c3                   	ret    
  407c48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  407c4f:	00 
  }

  inline string
  to_string(unsigned __val)
  {
    string __str(__detail::__to_chars_len(__val), '\0');
  407c50:	8d 70 05             	lea    0x5(%rax),%esi
      { _M_construct(__n, __c); }
  407c53:	4c 89 ff             	mov    %r15,%rdi
  407c56:	31 d2                	xor    %edx,%edx
	: allocator_type(__a), _M_p(__dat) { }
  407c58:	4c 89 74 24 20       	mov    %r14,0x20(%rsp)
      { _M_construct(__n, __c); }
  407c5d:	e8 5e b6 ff ff       	call   4032c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@plt>
      { return _M_dataplus._M_p; }
  407c62:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
      while (__val >= 100)
  407c67:	83 fb 63             	cmp    $0x63,%ebx
  407c6a:	0f 87 c0 01 00 00    	ja     407e30 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x770>
	  auto const __num = __val * 2;
  407c70:	01 db                	add    %ebx,%ebx
	  __first[1] = __digits[__num + 1];
  407c72:	8d 43 01             	lea    0x1(%rbx),%eax
	  __first[0] = __digits[__num];
  407c75:	0f b6 9b 00 94 40 00 	movzbl 0x409400(%rbx),%ebx
	  __first[1] = __digits[__num + 1];
  407c7c:	0f b6 80 00 94 40 00 	movzbl 0x409400(%rax),%eax
  407c83:	88 47 01             	mov    %al,0x1(%rdi)
  407c86:	e9 fc fd ff ff       	jmp    407a87 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3c7>
  407c8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	if (__n == 0)
  407c90:	4d 85 e4             	test   %r12,%r12
  407c93:	0f 85 fb 02 00 00    	jne    407f94 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x8d4>
  407c99:	48 89 e8             	mov    %rbp,%rax
  407c9c:	e9 00 ff ff ff       	jmp    407ba1 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x4e1>
  407ca1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  407ca8:	4d 85 ed             	test   %r13,%r13
  407cab:	0f 85 db 02 00 00    	jne    407f8c <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x8cc>
  407cb1:	4c 89 f0             	mov    %r14,%rax
  407cb4:	e9 35 ff ff ff       	jmp    407bee <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x52e>
  407cb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	    _M_data(_M_create(__dnew, size_type(0)));
  407cc0:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  407cc5:	31 d2                	xor    %edx,%edx
  407cc7:	4c 89 fe             	mov    %r15,%rsi
  407cca:	e8 f1 b7 ff ff       	call   4034c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
  407ccf:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  407cd4:	48 89 c7             	mov    %rax,%rdi
      { _M_allocated_capacity = __capacity; }
  407cd7:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  407cdc:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
  407ce1:	4c 89 e2             	mov    %r12,%rdx
  407ce4:	48 89 de             	mov    %rbx,%rsi
  407ce7:	e8 04 b5 ff ff       	call   4031f0 <memcpy@plt>
	_M_set_length(__dnew);
  407cec:	4c 8b 64 24 20       	mov    0x20(%rsp),%r12
      { return _M_dataplus._M_p; }
  407cf1:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  407cf6:	e9 a6 fe ff ff       	jmp    407ba1 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x4e1>
  407cfb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	    _M_data(_M_create(__dnew, size_type(0)));
  407d00:	31 d2                	xor    %edx,%edx
  407d02:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  407d07:	4c 89 ff             	mov    %r15,%rdi
  407d0a:	e8 b1 b7 ff ff       	call   4034c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
  407d0f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  407d14:	48 89 c7             	mov    %rax,%rdi
      { _M_allocated_capacity = __capacity; }
  407d17:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  407d1c:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  407d21:	4c 89 ea             	mov    %r13,%rdx
  407d24:	4c 89 e6             	mov    %r12,%rsi
  407d27:	e8 c4 b4 ff ff       	call   4031f0 <memcpy@plt>
	_M_set_length(__dnew);
  407d2c:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
      { return _M_dataplus._M_p; }
  407d31:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  407d36:	e9 b3 fe ff ff       	jmp    407bee <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x52e>
  407d3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  407d40:	f3 0f 6f 48 10       	movdqu 0x10(%rax),%xmm1
  407d45:	0f 29 4c 24 50       	movaps %xmm1,0x50(%rsp)
  407d4a:	e9 74 fd ff ff       	jmp    407ac3 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x403>
  407d4f:	90                   	nop
      { return _M_string_length; }
  407d50:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
		if (__str.size())
  407d55:	48 85 d2             	test   %rdx,%rdx
  407d58:	74 1b                	je     407d75 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x6b5>
	if (__n == 1)
  407d5a:	48 83 fa 01          	cmp    $0x1,%rdx
  407d5e:	0f 84 c1 01 00 00    	je     407f25 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x865>
  407d64:	48 89 ee             	mov    %rbp,%rsi
  407d67:	e8 84 b4 ff ff       	call   4031f0 <memcpy@plt>
      { return _M_string_length; }
  407d6c:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
      { return _M_dataplus._M_p; }
  407d71:	49 8b 3c 24          	mov    (%r12),%rdi
      { _M_string_length = __length; }
  407d75:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
      { __c1 = __c2; }
  407d7a:	c6 04 17 00          	movb   $0x0,(%rdi,%rdx,1)
      { return _M_dataplus._M_p; }
  407d7e:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
      }
  407d83:	e9 9b fd ff ff       	jmp    407b23 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x463>
  407d88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  407d8f:	00 
	  auto const __num = __val * 2;
  407d90:	45 01 f6             	add    %r14d,%r14d
	  __first[1] = __digits[__num + 1];
  407d93:	41 8d 46 01          	lea    0x1(%r14),%eax
  407d97:	0f b6 80 00 94 40 00 	movzbl 0x409400(%rax),%eax
  407d9e:	88 41 01             	mov    %al,0x1(%rcx)
	  __first[0] = __digits[__num];
  407da1:	41 0f b6 86 00 94 40 	movzbl 0x409400(%r14),%eax
  407da8:	00 
  407da9:	88 01                	mov    %al,(%rcx)
      { return _M_dataplus._M_p; }
  407dab:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  407db0:	49 8b 7d 00          	mov    0x0(%r13),%rdi
	if (__str._M_is_local())
  407db4:	48 39 e8             	cmp    %rbp,%rax
  407db7:	0f 85 4f fc ff ff    	jne    407a0c <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x34c>
      { return _M_string_length; }
  407dbd:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
		if (__str.size())
  407dc2:	48 85 d2             	test   %rdx,%rdx
  407dc5:	74 1b                	je     407de2 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x722>
	if (__n == 1)
  407dc7:	48 83 fa 01          	cmp    $0x1,%rdx
  407dcb:	0f 84 3f 01 00 00    	je     407f10 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x850>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
  407dd1:	48 89 ee             	mov    %rbp,%rsi
  407dd4:	e8 17 b4 ff ff       	call   4031f0 <memcpy@plt>
      { return _M_string_length; }
  407dd9:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
      { return _M_dataplus._M_p; }
  407dde:	49 8b 7d 00          	mov    0x0(%r13),%rdi
      { _M_string_length = __length; }
  407de2:	49 89 55 08          	mov    %rdx,0x8(%r13)
      { __c1 = __c2; }
  407de6:	c6 04 17 00          	movb   $0x0,(%rdi,%rdx,1)
      { return _M_dataplus._M_p; }
  407dea:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
      }
  407def:	e9 4b fc ff ff       	jmp    407a3f <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x37f>
  407df4:	0f 1f 40 00          	nopl   0x0(%rax)
    string __str(__detail::__to_chars_len(__val), '\0');
  407df8:	8d 70 06             	lea    0x6(%rax),%esi
  407dfb:	e9 94 fa ff ff       	jmp    407894 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x1d4>
  407e00:	8d 70 07             	lea    0x7(%rax),%esi
  407e03:	e9 8c fa ff ff       	jmp    407894 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x1d4>
  407e08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  407e0f:	00 
      { _M_dataplus._M_p = __p; }
  407e10:	49 89 04 24          	mov    %rax,(%r12)
      { _M_string_length = __length; }
  407e14:	41 0f 11 44 24 08    	movups %xmm0,0x8(%r12)
      { _M_dataplus._M_p = __p; }
  407e1a:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
  407e1f:	48 8d 6c 24 50       	lea    0x50(%rsp),%rbp
  407e24:	48 89 ef             	mov    %rbp,%rdi
  407e27:	e9 f7 fc ff ff       	jmp    407b23 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x463>
  407e2c:	0f 1f 40 00          	nopl   0x0(%rax)
      unsigned __pos = __len - 1;
  407e30:	8b 44 24 28          	mov    0x28(%rsp),%eax
  407e34:	89 d9                	mov    %ebx,%ecx
  407e36:	8d 70 ff             	lea    -0x1(%rax),%esi
  407e39:	e9 82 fa ff ff       	jmp    4078c0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x200>
  407e3e:	66 90                	xchg   %ax,%ax
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
  407e40:	f3 0f 6f 50 10       	movdqu 0x10(%rax),%xmm2
  407e45:	0f 29 54 24 50       	movaps %xmm2,0x50(%rsp)
  407e4a:	e9 2b f9 ff ff       	jmp    40777a <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0xba>
  407e4f:	90                   	nop
      { return _M_string_length; }
  407e50:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
		if (__str.size())
  407e55:	48 85 d2             	test   %rdx,%rdx
  407e58:	74 1b                	je     407e75 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7b5>
	if (__n == 1)
  407e5a:	48 83 fa 01          	cmp    $0x1,%rdx
  407e5e:	0f 84 97 00 00 00    	je     407efb <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x83b>
  407e64:	48 89 ee             	mov    %rbp,%rsi
  407e67:	e8 84 b3 ff ff       	call   4031f0 <memcpy@plt>
      { return _M_string_length; }
  407e6c:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
      { return _M_dataplus._M_p; }
  407e71:	49 8b 7d 00          	mov    0x0(%r13),%rdi
      { _M_string_length = __length; }
  407e75:	49 89 55 08          	mov    %rdx,0x8(%r13)
      { __c1 = __c2; }
  407e79:	c6 04 17 00          	movb   $0x0,(%rdi,%rdx,1)
      { return _M_dataplus._M_p; }
  407e7d:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
      }
  407e82:	e9 50 f9 ff ff       	jmp    4077d7 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x117>
  407e87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  407e8e:	00 00 
	  if (__value < __b2) return __n + 1;
  407e90:	83 c6 01             	add    $0x1,%esi
  407e93:	e9 d2 fa ff ff       	jmp    40796a <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x2aa>
  407e98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  407e9f:	00 
	  if (__value < __b3) return __n + 2;
  407ea0:	83 c6 02             	add    $0x2,%esi
  407ea3:	e9 c2 fa ff ff       	jmp    40796a <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x2aa>
  407ea8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  407eaf:	00 
	  if (__value < __b4) return __n + 3;
  407eb0:	83 c6 03             	add    $0x3,%esi
  407eb3:	e9 b2 fa ff ff       	jmp    40796a <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x2aa>
  407eb8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  407ebf:	00 
      { _M_dataplus._M_p = __p; }
  407ec0:	49 89 45 00          	mov    %rax,0x0(%r13)
      { _M_string_length = __length; }
  407ec4:	41 0f 11 45 08       	movups %xmm0,0x8(%r13)
      { _M_dataplus._M_p = __p; }
  407ec9:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
  407ece:	48 8d 6c 24 50       	lea    0x50(%rsp),%rbp
  407ed3:	48 89 ef             	mov    %rbp,%rdi
  407ed6:	e9 fc f8 ff ff       	jmp    4077d7 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x117>
  407edb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  407ee0:	49 89 45 00          	mov    %rax,0x0(%r13)
      { _M_string_length = __length; }
  407ee4:	41 0f 11 45 08       	movups %xmm0,0x8(%r13)
      { _M_dataplus._M_p = __p; }
  407ee9:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
  407eee:	48 8d 6c 24 50       	lea    0x50(%rsp),%rbp
  407ef3:	48 89 ef             	mov    %rbp,%rdi
  407ef6:	e9 44 fb ff ff       	jmp    407a3f <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x37f>
  407efb:	0f b6 44 24 50       	movzbl 0x50(%rsp),%eax
  407f00:	88 07                	mov    %al,(%rdi)
      { return _M_string_length; }
  407f02:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
      { return _M_dataplus._M_p; }
  407f07:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  407f0b:	e9 65 ff ff ff       	jmp    407e75 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7b5>
  407f10:	0f b6 44 24 50       	movzbl 0x50(%rsp),%eax
  407f15:	88 07                	mov    %al,(%rdi)
      { return _M_string_length; }
  407f17:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
      { return _M_dataplus._M_p; }
  407f1c:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  407f20:	e9 bd fe ff ff       	jmp    407de2 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x722>
  407f25:	0f b6 44 24 50       	movzbl 0x50(%rsp),%eax
  407f2a:	88 07                	mov    %al,(%rdi)
      { return _M_string_length; }
  407f2c:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
      { return _M_dataplus._M_p; }
  407f31:	49 8b 3c 24          	mov    (%r12),%rdi
  407f35:	e9 3b fe ff ff       	jmp    407d75 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x6b5>
      { _M_construct(__n, __c); }
  407f3a:	4c 89 ff             	mov    %r15,%rdi
  407f3d:	31 d2                	xor    %edx,%edx
  407f3f:	be 01 00 00 00       	mov    $0x1,%esi
	: allocator_type(__a), _M_p(__dat) { }
  407f44:	4c 89 74 24 20       	mov    %r14,0x20(%rsp)
      { _M_construct(__n, __c); }
  407f49:	e8 72 b3 ff ff       	call   4032c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@plt>
      { return _M_dataplus._M_p; }
  407f4e:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
      while (__val >= 100)
  407f53:	e9 2c fb ff ff       	jmp    407a84 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3c4>
	  if (__value < __b2) return __n + 1;
  407f58:	be 02 00 00 00       	mov    $0x2,%esi
  407f5d:	e9 f1 fc ff ff       	jmp    407c53 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x593>
	  if (__value < __b4) return __n + 3;
  407f62:	be 04 00 00 00       	mov    $0x4,%esi
  407f67:	e9 28 f9 ff ff       	jmp    407894 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x1d4>
	  if (__value < __b3) return __n + 2;
  407f6c:	be 03 00 00 00       	mov    $0x3,%esi
  407f71:	89 d9                	mov    %ebx,%ecx
  407f73:	e9 1c f9 ff ff       	jmp    407894 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x1d4>
	  std::__throw_logic_error(__N("basic_string::"
  407f78:	bf c8 91 40 00       	mov    $0x4091c8,%edi
  407f7d:	e8 0e b2 ff ff       	call   403190 <_ZSt19__throw_logic_errorPKc@plt>
  407f82:	bf c8 91 40 00       	mov    $0x4091c8,%edi
  407f87:	e8 04 b2 ff ff       	call   403190 <_ZSt19__throw_logic_errorPKc@plt>
  407f8c:	4c 89 f7             	mov    %r14,%rdi
  407f8f:	e9 8d fd ff ff       	jmp    407d21 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x661>
  407f94:	48 89 ef             	mov    %rbp,%rdi
  407f97:	e9 45 fd ff ff       	jmp    407ce1 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x621>
  407f9c:	49 89 c4             	mov    %rax,%r12
  407f9f:	e9 3d b6 ff ff       	jmp    4035e1 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_.cold+0x18>
  407fa4:	49 89 c4             	mov    %rax,%r12
  407fa7:	e9 1d b6 ff ff       	jmp    4035c9 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_.cold>
  407fac:	48 89 c5             	mov    %rax,%rbp
  407faf:	e9 4d b6 ff ff       	jmp    403601 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_.cold+0x38>
  407fb4:	48 89 c5             	mov    %rax,%rbp
  407fb7:	e9 45 b6 ff ff       	jmp    403601 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_.cold+0x38>
  407fbc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000407fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
  407fc0:	41 55                	push   %r13
  407fc2:	41 54                	push   %r12
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  407fc4:	4c 8d 67 10          	lea    0x10(%rdi),%r12
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
  407fc8:	55                   	push   %rbp
  407fc9:	53                   	push   %rbx
  407fca:	48 83 ec 18          	sub    $0x18,%rsp
	: allocator_type(__a), _M_p(__dat) { }
  407fce:	4c 89 27             	mov    %r12,(%rdi)
	const _CharT* __end = __s ? __s + traits_type::length(__s)
  407fd1:	48 85 f6             	test   %rsi,%rsi
  407fd4:	0f 84 8c 00 00 00    	je     408066 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0xa6>
  407fda:	48 89 fb             	mov    %rdi,%rbx
	return __builtin_strlen(__s);
  407fdd:	48 89 f7             	mov    %rsi,%rdi
  407fe0:	48 89 f5             	mov    %rsi,%rbp
  407fe3:	e8 38 b1 ff ff       	call   403120 <strlen@plt>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
  407fe8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  407fed:	49 89 c5             	mov    %rax,%r13
	if (__dnew > size_type(_S_local_capacity))
  407ff0:	48 83 f8 0f          	cmp    $0xf,%rax
  407ff4:	77 3a                	ja     408030 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x70>
	if (__n == 1)
  407ff6:	48 83 f8 01          	cmp    $0x1,%rax
  407ffa:	75 24                	jne    408020 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x60>
      { __c1 = __c2; }
  407ffc:	0f b6 55 00          	movzbl 0x0(%rbp),%edx
  408000:	88 53 10             	mov    %dl,0x10(%rbx)
      { _M_string_length = __length; }
  408003:	48 89 43 08          	mov    %rax,0x8(%rbx)
  408007:	41 c6 04 04 00       	movb   $0x0,(%r12,%rax,1)
      }
  40800c:	48 83 c4 18          	add    $0x18,%rsp
  408010:	5b                   	pop    %rbx
  408011:	5d                   	pop    %rbp
  408012:	41 5c                	pop    %r12
  408014:	41 5d                	pop    %r13
  408016:	c3                   	ret    
  408017:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40801e:	00 00 
	if (__n == 0)
  408020:	48 85 c0             	test   %rax,%rax
  408023:	74 de                	je     408003 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x43>
  408025:	eb 27                	jmp    40804e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x8e>
  408027:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40802e:	00 00 
	    _M_data(_M_create(__dnew, size_type(0)));
  408030:	31 d2                	xor    %edx,%edx
  408032:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  408037:	48 89 df             	mov    %rbx,%rdi
  40803a:	e8 81 b4 ff ff       	call   4034c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
  40803f:	48 89 03             	mov    %rax,(%rbx)
  408042:	49 89 c4             	mov    %rax,%r12
      { _M_allocated_capacity = __capacity; }
  408045:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40804a:	48 89 43 10          	mov    %rax,0x10(%rbx)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
  40804e:	4c 89 e7             	mov    %r12,%rdi
  408051:	4c 89 ea             	mov    %r13,%rdx
  408054:	48 89 ee             	mov    %rbp,%rsi
  408057:	e8 94 b1 ff ff       	call   4031f0 <memcpy@plt>
	_M_set_length(__dnew);
  40805c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
      { return _M_dataplus._M_p; }
  408061:	4c 8b 23             	mov    (%rbx),%r12
  408064:	eb 9d                	jmp    408003 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x43>
	  std::__throw_logic_error(__N("basic_string::"
  408066:	bf c8 91 40 00       	mov    $0x4091c8,%edi
  40806b:	e8 20 b1 ff ff       	call   403190 <_ZSt19__throw_logic_errorPKc@plt>

0000000000408070 <_ZN2sf4TextD1Ev>:
{
////////////////////////////////////////////////////////////
/// \brief Graphical text that can be drawn to a render target
///
////////////////////////////////////////////////////////////
class SFML_GRAPHICS_API Text : public Drawable, public Transformable
  408070:	b8 50 bd 40 00       	mov    $0x40bd50,%eax
  408075:	53                   	push   %rbx
  408076:	48 89 fb             	mov    %rdi,%rbx
{
////////////////////////////////////////////////////////////
/// \brief Define a set of one or more 2D primitives
///
////////////////////////////////////////////////////////////
class SFML_GRAPHICS_API VertexArray : public Drawable
  408079:	48 c7 87 28 01 00 00 	movq   $0x40bd98,0x128(%rdi)
  408080:	98 bd 40 00 
  408084:	66 48 0f 6e c0       	movq   %rax,%xmm0
  408089:	0f 16 05 40 14 00 00 	movhps 0x1440(%rip),%xmm0        # 4094d0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xd0>
  408090:	0f 11 07             	movups %xmm0,(%rdi)
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  408093:	48 8b bf 30 01 00 00 	mov    0x130(%rdi),%rdi
	if (__p)
  40809a:	48 85 ff             	test   %rdi,%rdi
  40809d:	74 0f                	je     4080ae <_ZN2sf4TextD1Ev+0x3e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  40809f:	48 8b b3 40 01 00 00 	mov    0x140(%rbx),%rsi
  4080a6:	48 29 fe             	sub    %rdi,%rsi
  4080a9:	e8 92 b1 ff ff       	call   403240 <_ZdlPvm@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4080ae:	48 8b bb 08 01 00 00 	mov    0x108(%rbx),%rdi
  4080b5:	48 c7 83 00 01 00 00 	movq   $0x40bd98,0x100(%rbx)
  4080bc:	98 bd 40 00 
	if (__p)
  4080c0:	48 85 ff             	test   %rdi,%rdi
  4080c3:	74 0f                	je     4080d4 <_ZN2sf4TextD1Ev+0x64>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  4080c5:	48 8b b3 18 01 00 00 	mov    0x118(%rbx),%rsi
  4080cc:	48 29 fe             	sub    %rdi,%rsi
  4080cf:	e8 6c b1 ff ff       	call   403240 <_ZdlPvm@plt>
  4080d4:	48 8b bb b8 00 00 00 	mov    0xb8(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4080db:	48 8d 83 c8 00 00 00 	lea    0xc8(%rbx),%rax
	if (!_M_is_local())
  4080e2:	48 39 c7             	cmp    %rax,%rdi
  4080e5:	74 14                	je     4080fb <_ZN2sf4TextD1Ev+0x8b>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4080e7:	48 8b 83 c8 00 00 00 	mov    0xc8(%rbx),%rax
  4080ee:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4080f5:	00 
  4080f6:	e8 45 b1 ff ff       	call   403240 <_ZdlPvm@plt>
  4080fb:	48 8d 7b 08          	lea    0x8(%rbx),%rdi
  4080ff:	5b                   	pop    %rbx
  408100:	e9 3b b0 ff ff       	jmp    403140 <_ZN2sf13TransformableD2Ev@plt>
  408105:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  40810c:	00 00 00 00 

0000000000408110 <_ZThn8_N2sf4TextD1Ev>:
  408110:	b8 50 bd 40 00       	mov    $0x40bd50,%eax
  408115:	55                   	push   %rbp
  408116:	48 89 fd             	mov    %rdi,%rbp
  408119:	48 c7 87 20 01 00 00 	movq   $0x40bd98,0x120(%rdi)
  408120:	98 bd 40 00 
  408124:	66 48 0f 6e c0       	movq   %rax,%xmm0
  408129:	0f 16 05 a0 13 00 00 	movhps 0x13a0(%rip),%xmm0        # 4094d0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xd0>
  408130:	0f 11 47 f8          	movups %xmm0,-0x8(%rdi)
  408134:	48 8b bf 28 01 00 00 	mov    0x128(%rdi),%rdi
  40813b:	48 85 ff             	test   %rdi,%rdi
  40813e:	74 0f                	je     40814f <_ZThn8_N2sf4TextD1Ev+0x3f>
  408140:	48 8b b5 38 01 00 00 	mov    0x138(%rbp),%rsi
  408147:	48 29 fe             	sub    %rdi,%rsi
  40814a:	e8 f1 b0 ff ff       	call   403240 <_ZdlPvm@plt>
  40814f:	48 8b bd 00 01 00 00 	mov    0x100(%rbp),%rdi
  408156:	48 c7 85 f8 00 00 00 	movq   $0x40bd98,0xf8(%rbp)
  40815d:	98 bd 40 00 
  408161:	48 85 ff             	test   %rdi,%rdi
  408164:	74 0f                	je     408175 <_ZThn8_N2sf4TextD1Ev+0x65>
  408166:	48 8b b5 10 01 00 00 	mov    0x110(%rbp),%rsi
  40816d:	48 29 fe             	sub    %rdi,%rsi
  408170:	e8 cb b0 ff ff       	call   403240 <_ZdlPvm@plt>
  408175:	48 8b bd b0 00 00 00 	mov    0xb0(%rbp),%rdi
  40817c:	48 8d 85 c0 00 00 00 	lea    0xc0(%rbp),%rax
  408183:	48 39 c7             	cmp    %rax,%rdi
  408186:	74 14                	je     40819c <_ZThn8_N2sf4TextD1Ev+0x8c>
  408188:	48 8b 85 c0 00 00 00 	mov    0xc0(%rbp),%rax
  40818f:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  408196:	00 
  408197:	e8 a4 b0 ff ff       	call   403240 <_ZdlPvm@plt>
  40819c:	48 89 ef             	mov    %rbp,%rdi
  40819f:	5d                   	pop    %rbp
  4081a0:	e9 9b af ff ff       	jmp    403140 <_ZN2sf13TransformableD2Ev@plt>
  4081a5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  4081ac:	00 00 00 
  4081af:	90                   	nop

00000000004081b0 <_ZN2sf4TextD0Ev>:
  4081b0:	b8 50 bd 40 00       	mov    $0x40bd50,%eax
  4081b5:	55                   	push   %rbp
  4081b6:	48 89 fd             	mov    %rdi,%rbp
  4081b9:	48 c7 87 28 01 00 00 	movq   $0x40bd98,0x128(%rdi)
  4081c0:	98 bd 40 00 
  4081c4:	66 48 0f 6e c0       	movq   %rax,%xmm0
  4081c9:	0f 16 05 00 13 00 00 	movhps 0x1300(%rip),%xmm0        # 4094d0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xd0>
  4081d0:	0f 11 07             	movups %xmm0,(%rdi)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4081d3:	48 8b bf 30 01 00 00 	mov    0x130(%rdi),%rdi
	if (__p)
  4081da:	48 85 ff             	test   %rdi,%rdi
  4081dd:	74 0f                	je     4081ee <_ZN2sf4TextD0Ev+0x3e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  4081df:	48 8b b5 40 01 00 00 	mov    0x140(%rbp),%rsi
  4081e6:	48 29 fe             	sub    %rdi,%rsi
  4081e9:	e8 52 b0 ff ff       	call   403240 <_ZdlPvm@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4081ee:	48 8b bd 08 01 00 00 	mov    0x108(%rbp),%rdi
  4081f5:	48 c7 85 00 01 00 00 	movq   $0x40bd98,0x100(%rbp)
  4081fc:	98 bd 40 00 
	if (__p)
  408200:	48 85 ff             	test   %rdi,%rdi
  408203:	74 0f                	je     408214 <_ZN2sf4TextD0Ev+0x64>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  408205:	48 8b b5 18 01 00 00 	mov    0x118(%rbp),%rsi
  40820c:	48 29 fe             	sub    %rdi,%rsi
  40820f:	e8 2c b0 ff ff       	call   403240 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  408214:	48 8b bd b8 00 00 00 	mov    0xb8(%rbp),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  40821b:	48 8d 85 c8 00 00 00 	lea    0xc8(%rbp),%rax
	if (!_M_is_local())
  408222:	48 39 c7             	cmp    %rax,%rdi
  408225:	74 14                	je     40823b <_ZN2sf4TextD0Ev+0x8b>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  408227:	48 8b 85 c8 00 00 00 	mov    0xc8(%rbp),%rax
  40822e:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  408235:	00 
  408236:	e8 05 b0 ff ff       	call   403240 <_ZdlPvm@plt>
  40823b:	48 8d 7d 08          	lea    0x8(%rbp),%rdi
  40823f:	e8 fc ae ff ff       	call   403140 <_ZN2sf13TransformableD2Ev@plt>
  408244:	48 89 ef             	mov    %rbp,%rdi
  408247:	be 70 01 00 00       	mov    $0x170,%esi
  40824c:	5d                   	pop    %rbp
  40824d:	e9 ee af ff ff       	jmp    403240 <_ZdlPvm@plt>
  408252:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  408259:	00 00 00 00 
  40825d:	0f 1f 00             	nopl   (%rax)

0000000000408260 <_ZThn8_N2sf4TextD0Ev>:
  408260:	41 54                	push   %r12
  408262:	b8 50 bd 40 00       	mov    $0x40bd50,%eax
  408267:	4c 8d 67 f8          	lea    -0x8(%rdi),%r12
  40826b:	55                   	push   %rbp
  40826c:	66 48 0f 6e c0       	movq   %rax,%xmm0
  408271:	48 89 fd             	mov    %rdi,%rbp
  408274:	48 83 ec 08          	sub    $0x8,%rsp
  408278:	48 c7 87 20 01 00 00 	movq   $0x40bd98,0x120(%rdi)
  40827f:	98 bd 40 00 
  408283:	0f 16 05 46 12 00 00 	movhps 0x1246(%rip),%xmm0        # 4094d0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xd0>
  40828a:	0f 11 47 f8          	movups %xmm0,-0x8(%rdi)
  40828e:	48 8b bf 28 01 00 00 	mov    0x128(%rdi),%rdi
  408295:	48 85 ff             	test   %rdi,%rdi
  408298:	74 0f                	je     4082a9 <_ZThn8_N2sf4TextD0Ev+0x49>
  40829a:	48 8b b5 38 01 00 00 	mov    0x138(%rbp),%rsi
  4082a1:	48 29 fe             	sub    %rdi,%rsi
  4082a4:	e8 97 af ff ff       	call   403240 <_ZdlPvm@plt>
  4082a9:	48 8b bd 00 01 00 00 	mov    0x100(%rbp),%rdi
  4082b0:	48 c7 85 f8 00 00 00 	movq   $0x40bd98,0xf8(%rbp)
  4082b7:	98 bd 40 00 
  4082bb:	48 85 ff             	test   %rdi,%rdi
  4082be:	74 0f                	je     4082cf <_ZThn8_N2sf4TextD0Ev+0x6f>
  4082c0:	48 8b b5 10 01 00 00 	mov    0x110(%rbp),%rsi
  4082c7:	48 29 fe             	sub    %rdi,%rsi
  4082ca:	e8 71 af ff ff       	call   403240 <_ZdlPvm@plt>
  4082cf:	48 8b bd b0 00 00 00 	mov    0xb0(%rbp),%rdi
  4082d6:	48 8d 85 c0 00 00 00 	lea    0xc0(%rbp),%rax
  4082dd:	48 39 c7             	cmp    %rax,%rdi
  4082e0:	74 14                	je     4082f6 <_ZThn8_N2sf4TextD0Ev+0x96>
  4082e2:	48 8b 85 c0 00 00 00 	mov    0xc0(%rbp),%rax
  4082e9:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4082f0:	00 
  4082f1:	e8 4a af ff ff       	call   403240 <_ZdlPvm@plt>
  4082f6:	48 89 ef             	mov    %rbp,%rdi
  4082f9:	e8 42 ae ff ff       	call   403140 <_ZN2sf13TransformableD2Ev@plt>
  4082fe:	48 83 c4 08          	add    $0x8,%rsp
  408302:	4c 89 e7             	mov    %r12,%rdi
  408305:	be 70 01 00 00       	mov    $0x170,%esi
  40830a:	5d                   	pop    %rbp
  40830b:	41 5c                	pop    %r12
  40830d:	e9 2e af ff ff       	jmp    403240 <_ZdlPvm@plt>

Desmontagem da secção .fini:

0000000000408314 <_fini>:
  408314:	f3 0f 1e fa          	endbr64 
  408318:	48 83 ec 08          	sub    $0x8,%rsp
  40831c:	48 83 c4 08          	add    $0x8,%rsp
  408320:	c3                   	ret    
