
app/build/release/app:     formato de ficheiro elf64-x86-64

Secções:
Idx Name          Tam.      VMA               LMA               File off  Algn
  0 .interp       0000001c  0000000000400318  0000000000400318  00000318  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.gnu.property 00000040  0000000000400338  0000000000400338  00000338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  0000000000400378  0000000000400378  00000378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .note.ABI-tag 00000020  000000000040039c  000000000040039c  0000039c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .gnu.hash     00000050  00000000004003c0  00000000004003c0  000003c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynsym       00000828  0000000000400410  0000000000400410  00000410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .dynstr       00000a87  0000000000400c38  0000000000400c38  00000c38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version  000000ae  00000000004016c0  00000000004016c0  000016c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .gnu.version_r 000000e0  0000000000401770  0000000000401770  00001770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rela.dyn     00000108  0000000000401850  0000000000401850  00001850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .rela.plt     00000708  0000000000401958  0000000000401958  00001958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .init         0000001b  0000000000403000  0000000000403000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .plt          000004c0  0000000000403020  0000000000403020  00003020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text         00004f52  00000000004034e0  00000000004034e0  000034e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .fini         0000000d  0000000000408434  0000000000408434  00008434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .rodata       0000060c  0000000000409000  0000000000409000  00009000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .eh_frame_hdr 000000c4  000000000040960c  000000000040960c  0000960c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .eh_frame     000003b4  00000000004096d0  00000000004096d0  000096d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .gcc_except_table 00000363  0000000000409a84  0000000000409a84  00009a84  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .init_array   00000010  000000000040bcc8  000000000040bcc8  0000acc8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 20 .fini_array   00000008  000000000040bcd8  000000000040bcd8  0000acd8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 21 .data.rel.ro  000000d0  000000000040bce0  000000000040bce0  0000ace0  2**4
                  CONTENTS, ALLOC, LOAD, DATA
 22 .dynamic      00000240  000000000040bdb0  000000000040bdb0  0000adb0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 23 .got          00000010  000000000040bff0  000000000040bff0  0000aff0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 24 .got.plt      00000270  000000000040c000  000000000040c000  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 25 .data         00000004  000000000040c270  000000000040c270  0000b270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 26 .bss          000001b0  000000000040c280  000000000040c280  0000b274  2**6
                  ALLOC
 27 .comment      0000002e  0000000000000000  0000000000000000  0000b274  2**0
                  CONTENTS, READONLY
 28 .gnu.build.attributes 00001cd4  000000000040e430  000000000040e430  0000b2a4  2**2
                  CONTENTS, READONLY, OCTETS
 29 .debug_aranges 00000090  0000000000000000  0000000000000000  0000cf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_info   0003bb0c  0000000000000000  0000000000000000  0000d008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_abbrev 0000131f  0000000000000000  0000000000000000  00048b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 32 .debug_line   000067e4  0000000000000000  0000000000000000  00049e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 33 .debug_str    00033e8d  0000000000000000  0000000000000000  00050617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 34 .debug_line_str 000007a8  0000000000000000  0000000000000000  000844a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 35 .debug_loclists 00010959  0000000000000000  0000000000000000  00084c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 36 .debug_rnglists 00002d4a  0000000000000000  0000000000000000  000955a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Desmontagem da secção .init:

0000000000403000 <_init>:
  403000:	f3 0f 1e fa          	endbr64 
  403004:	48 83 ec 08          	sub    $0x8,%rsp
  403008:	48 8b 05 e9 8f 00 00 	mov    0x8fe9(%rip),%rax        # 40bff8 <__gmon_start__@Base>
  40300f:	48 85 c0             	test   %rax,%rax
  403012:	74 02                	je     403016 <_init+0x16>
  403014:	ff d0                	call   *%rax
  403016:	48 83 c4 08          	add    $0x8,%rsp
  40301a:	c3                   	ret    

Desmontagem da secção .plt:

0000000000403020 <_ZNSo3putEc@plt-0x10>:
  403020:	ff 35 e2 8f 00 00    	push   0x8fe2(%rip)        # 40c008 <_GLOBAL_OFFSET_TABLE_+0x8>
  403026:	ff 25 e4 8f 00 00    	jmp    *0x8fe4(%rip)        # 40c010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40302c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000403030 <_ZNSo3putEc@plt>:
  403030:	ff 25 e2 8f 00 00    	jmp    *0x8fe2(%rip)        # 40c018 <_ZNSo3putEc@GLIBCXX_3.4>
  403036:	68 00 00 00 00       	push   $0x0
  40303b:	e9 e0 ff ff ff       	jmp    403020 <_init+0x20>

0000000000403040 <printf@plt>:
  403040:	ff 25 da 8f 00 00    	jmp    *0x8fda(%rip)        # 40c020 <printf@GLIBC_2.2.5>
  403046:	68 01 00 00 00       	push   $0x1
  40304b:	e9 d0 ff ff ff       	jmp    403020 <_init+0x20>

0000000000403050 <_ZN2sf4TimeC1Ev@plt>:
  403050:	ff 25 d2 8f 00 00    	jmp    *0x8fd2(%rip)        # 40c028 <_ZN2sf4TimeC1Ev@Base>
  403056:	68 02 00 00 00       	push   $0x2
  40305b:	e9 c0 ff ff ff       	jmp    403020 <_init+0x20>

0000000000403060 <_ZN2sf5ShapeD2Ev@plt>:
  403060:	ff 25 ca 8f 00 00    	jmp    *0x8fca(%rip)        # 40c030 <_ZN2sf5ShapeD2Ev@Base>
  403066:	68 03 00 00 00       	push   $0x3
  40306b:	e9 b0 ff ff ff       	jmp    403020 <_init+0x20>

0000000000403070 <_ZN2sf5MusicC1Ev@plt>:
  403070:	ff 25 c2 8f 00 00    	jmp    *0x8fc2(%rip)        # 40c038 <_ZN2sf5MusicC1Ev@Base>
  403076:	68 04 00 00 00       	push   $0x4
  40307b:	e9 a0 ff ff ff       	jmp    403020 <_init+0x20>

0000000000403080 <_ZN2sf5Music12openFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
  403080:	ff 25 ba 8f 00 00    	jmp    *0x8fba(%rip)        # 40c040 <_ZN2sf5Music12openFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@Base>
  403086:	68 05 00 00 00       	push   $0x5
  40308b:	e9 90 ff ff ff       	jmp    403020 <_init+0x20>

0000000000403090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>:
  403090:	ff 25 b2 8f 00 00    	jmp    *0x8fb2(%rip)        # 40c048 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@GLIBCXX_3.4.21>
  403096:	68 06 00 00 00       	push   $0x6
  40309b:	e9 80 ff ff ff       	jmp    403020 <_init+0x20>

00000000004030a0 <_ZN2sf6StringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6locale@plt>:
  4030a0:	ff 25 aa 8f 00 00    	jmp    *0x8faa(%rip)        # 40c050 <_ZN2sf6StringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6locale@Base>
  4030a6:	68 07 00 00 00       	push   $0x7
  4030ab:	e9 70 ff ff ff       	jmp    403020 <_init+0x20>

00000000004030b0 <_ZN2sf4FontC1Ev@plt>:
  4030b0:	ff 25 a2 8f 00 00    	jmp    *0x8fa2(%rip)        # 40c058 <_ZN2sf4FontC1Ev@Base>
  4030b6:	68 08 00 00 00       	push   $0x8
  4030bb:	e9 60 ff ff ff       	jmp    403020 <_init+0x20>

00000000004030c0 <_ZN2sf6StringC1Ej@plt>:
  4030c0:	ff 25 9a 8f 00 00    	jmp    *0x8f9a(%rip)        # 40c060 <_ZN2sf6StringC1Ej@Base>
  4030c6:	68 09 00 00 00       	push   $0x9
  4030cb:	e9 50 ff ff ff       	jmp    403020 <_init+0x20>

00000000004030d0 <_ZN2sfplERKNS_6StringES2_@plt>:
  4030d0:	ff 25 92 8f 00 00    	jmp    *0x8f92(%rip)        # 40c068 <_ZN2sfplERKNS_6StringES2_@Base>
  4030d6:	68 0a 00 00 00       	push   $0xa
  4030db:	e9 40 ff ff ff       	jmp    403020 <_init+0x20>

00000000004030e0 <write@plt>:
  4030e0:	ff 25 8a 8f 00 00    	jmp    *0x8f8a(%rip)        # 40c070 <write@GLIBC_2.2.5>
  4030e6:	68 0b 00 00 00       	push   $0xb
  4030eb:	e9 30 ff ff ff       	jmp    403020 <_init+0x20>

00000000004030f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>:
  4030f0:	ff 25 82 8f 00 00    	jmp    *0x8f82(%rip)        # 40c078 <_ZN2sf6StringC1EPKcRKSt6locale@Base>
  4030f6:	68 0c 00 00 00       	push   $0xc
  4030fb:	e9 20 ff ff ff       	jmp    403020 <_init+0x20>

0000000000403100 <_ZN2sf5ColorC1Ehhhh@plt>:
  403100:	ff 25 7a 8f 00 00    	jmp    *0x8f7a(%rip)        # 40c080 <_ZN2sf5ColorC1Ehhhh@Base>
  403106:	68 0d 00 00 00       	push   $0xd
  40310b:	e9 10 ff ff ff       	jmp    403020 <_init+0x20>

0000000000403110 <strlen@plt>:
  403110:	ff 25 72 8f 00 00    	jmp    *0x8f72(%rip)        # 40c088 <strlen@GLIBC_2.2.5>
  403116:	68 0e 00 00 00       	push   $0xe
  40311b:	e9 00 ff ff ff       	jmp    403020 <_init+0x20>

0000000000403120 <_ZN2sf13TransformableD2Ev@plt>:
  403120:	ff 25 6a 8f 00 00    	jmp    *0x8f6a(%rip)        # 40c090 <_ZN2sf13TransformableD2Ev@Base>
  403126:	68 0f 00 00 00       	push   $0xf
  40312b:	e9 f0 fe ff ff       	jmp    403020 <_init+0x20>

0000000000403130 <_ZN2sf13Transformable11setPositionEff@plt>:
  403130:	ff 25 62 8f 00 00    	jmp    *0x8f62(%rip)        # 40c098 <_ZN2sf13Transformable11setPositionEff@Base>
  403136:	68 10 00 00 00       	push   $0x10
  40313b:	e9 e0 fe ff ff       	jmp    403020 <_init+0x20>

0000000000403140 <_ZSt24__throw_invalid_argumentPKc@plt>:
  403140:	ff 25 5a 8f 00 00    	jmp    *0x8f5a(%rip)        # 40c0a0 <_ZSt24__throw_invalid_argumentPKc@GLIBCXX_3.4>
  403146:	68 11 00 00 00       	push   $0x11
  40314b:	e9 d0 fe ff ff       	jmp    403020 <_init+0x20>

0000000000403150 <_ZN2sf7secondsEf@plt>:
  403150:	ff 25 52 8f 00 00    	jmp    *0x8f52(%rip)        # 40c0a8 <_ZN2sf7secondsEf@Base>
  403156:	68 12 00 00 00       	push   $0x12
  40315b:	e9 c0 fe ff ff       	jmp    403020 <_init+0x20>

0000000000403160 <_ZNSo5flushEv@plt>:
  403160:	ff 25 4a 8f 00 00    	jmp    *0x8f4a(%rip)        # 40c0b0 <_ZNSo5flushEv@GLIBCXX_3.4>
  403166:	68 13 00 00 00       	push   $0x13
  40316b:	e9 b0 fe ff ff       	jmp    403020 <_init+0x20>

0000000000403170 <_ZSt19__throw_logic_errorPKc@plt>:
  403170:	ff 25 42 8f 00 00    	jmp    *0x8f42(%rip)        # 40c0b8 <_ZSt19__throw_logic_errorPKc@GLIBCXX_3.4>
  403176:	68 14 00 00 00       	push   $0x14
  40317b:	e9 a0 fe ff ff       	jmp    403020 <_init+0x20>

0000000000403180 <_ZN2sf12RenderTarget5clearERKNS_5ColorE@plt>:
  403180:	ff 25 3a 8f 00 00    	jmp    *0x8f3a(%rip)        # 40c0c0 <_ZN2sf12RenderTarget5clearERKNS_5ColorE@Base>
  403186:	68 15 00 00 00       	push   $0x15
  40318b:	e9 90 fe ff ff       	jmp    403020 <_init+0x20>

0000000000403190 <open@plt>:
  403190:	ff 25 32 8f 00 00    	jmp    *0x8f32(%rip)        # 40c0c8 <open@GLIBC_2.2.5>
  403196:	68 16 00 00 00       	push   $0x16
  40319b:	e9 80 fe ff ff       	jmp    403020 <_init+0x20>

00000000004031a0 <_ZN2sf9VideoModeC1Ejjj@plt>:
  4031a0:	ff 25 2a 8f 00 00    	jmp    *0x8f2a(%rip)        # 40c0d0 <_ZN2sf9VideoModeC1Ejjj@Base>
  4031a6:	68 17 00 00 00       	push   $0x17
  4031ab:	e9 70 fe ff ff       	jmp    403020 <_init+0x20>

00000000004031b0 <_ZN2sf6String6insertEmRKS0_@plt>:
  4031b0:	ff 25 22 8f 00 00    	jmp    *0x8f22(%rip)        # 40c0d8 <_ZN2sf6String6insertEmRKS0_@Base>
  4031b6:	68 18 00 00 00       	push   $0x18
  4031bb:	e9 60 fe ff ff       	jmp    403020 <_init+0x20>

00000000004031c0 <_ZN2sf11CircleShapeC1Efm@plt>:
  4031c0:	ff 25 1a 8f 00 00    	jmp    *0x8f1a(%rip)        # 40c0e0 <_ZN2sf11CircleShapeC1Efm@Base>
  4031c6:	68 19 00 00 00       	push   $0x19
  4031cb:	e9 50 fe ff ff       	jmp    403020 <_init+0x20>

00000000004031d0 <memcpy@plt>:
  4031d0:	ff 25 12 8f 00 00    	jmp    *0x8f12(%rip)        # 40c0e8 <memcpy@GLIBC_2.14>
  4031d6:	68 1a 00 00 00       	push   $0x1a
  4031db:	e9 40 fe ff ff       	jmp    403020 <_init+0x20>

00000000004031e0 <_ZN2sf6Window9pollEventERNS_5EventE@plt>:
  4031e0:	ff 25 0a 8f 00 00    	jmp    *0x8f0a(%rip)        # 40c0f0 <_ZN2sf6Window9pollEventERNS_5EventE@Base>
  4031e6:	68 1b 00 00 00       	push   $0x1b
  4031eb:	e9 30 fe ff ff       	jmp    403020 <_init+0x20>

00000000004031f0 <_ZN2sf4TextC1ERKNS_6StringERKNS_4FontEj@plt>:
  4031f0:	ff 25 02 8f 00 00    	jmp    *0x8f02(%rip)        # 40c0f8 <_ZN2sf4TextC1ERKNS_6StringERKNS_4FontEj@Base>
  4031f6:	68 1c 00 00 00       	push   $0x1c
  4031fb:	e9 20 fe ff ff       	jmp    403020 <_init+0x20>

0000000000403200 <__cxa_atexit@plt>:
  403200:	ff 25 fa 8e 00 00    	jmp    *0x8efa(%rip)        # 40c100 <__cxa_atexit@GLIBC_2.2.5>
  403206:	68 1d 00 00 00       	push   $0x1d
  40320b:	e9 10 fe ff ff       	jmp    403020 <_init+0x20>

0000000000403210 <_ZN2sf4Font12loadFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
  403210:	ff 25 f2 8e 00 00    	jmp    *0x8ef2(%rip)        # 40c108 <_ZN2sf4Font12loadFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@Base>
  403216:	68 1e 00 00 00       	push   $0x1e
  40321b:	e9 00 fe ff ff       	jmp    403020 <_init+0x20>

0000000000403220 <_ZdlPvm@plt>:
  403220:	ff 25 ea 8e 00 00    	jmp    *0x8eea(%rip)        # 40c110 <_ZdlPvm@CXXABI_1.3.9>
  403226:	68 1f 00 00 00       	push   $0x1f
  40322b:	e9 f0 fd ff ff       	jmp    403020 <_init+0x20>

0000000000403230 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@plt>:
  403230:	ff 25 e2 8e 00 00    	jmp    *0x8ee2(%rip)        # 40c118 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@GLIBCXX_3.4.21>
  403236:	68 20 00 00 00       	push   $0x20
  40323b:	e9 e0 fd ff ff       	jmp    403020 <_init+0x20>

0000000000403240 <_ZNK2sf6Window6isOpenEv@plt>:
  403240:	ff 25 da 8e 00 00    	jmp    *0x8eda(%rip)        # 40c120 <_ZNK2sf6Window6isOpenEv@Base>
  403246:	68 21 00 00 00       	push   $0x21
  40324b:	e9 d0 fd ff ff       	jmp    403020 <_init+0x20>

0000000000403250 <_ZN2sf4FontD1Ev@plt>:
  403250:	ff 25 d2 8e 00 00    	jmp    *0x8ed2(%rip)        # 40c128 <_ZN2sf4FontD1Ev@Base>
  403256:	68 22 00 00 00       	push   $0x22
  40325b:	e9 c0 fd ff ff       	jmp    403020 <_init+0x20>

0000000000403260 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>:
  403260:	ff 25 ca 8e 00 00    	jmp    *0x8eca(%rip)        # 40c130 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@GLIBCXX_3.4.9>
  403266:	68 23 00 00 00       	push   $0x23
  40326b:	e9 b0 fd ff ff       	jmp    403020 <_init+0x20>

0000000000403270 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>:
  403270:	ff 25 c2 8e 00 00    	jmp    *0x8ec2(%rip)        # 40c138 <_ZNKSt5ctypeIcE13_M_widen_initEv@GLIBCXX_3.4.11>
  403276:	68 24 00 00 00       	push   $0x24
  40327b:	e9 a0 fd ff ff       	jmp    403020 <_init+0x20>

0000000000403280 <_ZN2sf6StringixEm@plt>:
  403280:	ff 25 ba 8e 00 00    	jmp    *0x8eba(%rip)        # 40c140 <_ZN2sf6StringixEm@Base>
  403286:	68 25 00 00 00       	push   $0x25
  40328b:	e9 90 fd ff ff       	jmp    403020 <_init+0x20>

0000000000403290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@plt>:
  403290:	ff 25 b2 8e 00 00    	jmp    *0x8eb2(%rip)        # 40c148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@GLIBCXX_3.4.21>
  403296:	68 26 00 00 00       	push   $0x26
  40329b:	e9 80 fd ff ff       	jmp    403020 <_init+0x20>

00000000004032a0 <_ZN2sfgeENS_4TimeES0_@plt>:
  4032a0:	ff 25 aa 8e 00 00    	jmp    *0x8eaa(%rip)        # 40c150 <_ZN2sfgeENS_4TimeES0_@Base>
  4032a6:	68 27 00 00 00       	push   $0x27
  4032ab:	e9 70 fd ff ff       	jmp    403020 <_init+0x20>

00000000004032b0 <_ZN2sf6Window17setFramerateLimitEj@plt>:
  4032b0:	ff 25 a2 8e 00 00    	jmp    *0x8ea2(%rip)        # 40c158 <_ZN2sf6Window17setFramerateLimitEj@Base>
  4032b6:	68 28 00 00 00       	push   $0x28
  4032bb:	e9 60 fd ff ff       	jmp    403020 <_init+0x20>

00000000004032c0 <_ZSt16__throw_bad_castv@plt>:
  4032c0:	ff 25 9a 8e 00 00    	jmp    *0x8e9a(%rip)        # 40c160 <_ZSt16__throw_bad_castv@GLIBCXX_3.4>
  4032c6:	68 29 00 00 00       	push   $0x29
  4032cb:	e9 50 fd ff ff       	jmp    403020 <_init+0x20>

00000000004032d0 <_ZN2sf6Window7displayEv@plt>:
  4032d0:	ff 25 92 8e 00 00    	jmp    *0x8e92(%rip)        # 40c168 <_ZN2sf6Window7displayEv@Base>
  4032d6:	68 2a 00 00 00       	push   $0x2a
  4032db:	e9 40 fd ff ff       	jmp    403020 <_init+0x20>

00000000004032e0 <_ZN2sf5ClockC1Ev@plt>:
  4032e0:	ff 25 8a 8e 00 00    	jmp    *0x8e8a(%rip)        # 40c170 <_ZN2sf5ClockC1Ev@Base>
  4032e6:	68 2b 00 00 00       	push   $0x2b
  4032eb:	e9 30 fd ff ff       	jmp    403020 <_init+0x20>

00000000004032f0 <ioctl@plt>:
  4032f0:	ff 25 82 8e 00 00    	jmp    *0x8e82(%rip)        # 40c178 <ioctl@GLIBC_2.2.5>
  4032f6:	68 2c 00 00 00       	push   $0x2c
  4032fb:	e9 20 fd ff ff       	jmp    403020 <_init+0x20>

0000000000403300 <_ZNSt6localeD1Ev@plt>:
  403300:	ff 25 7a 8e 00 00    	jmp    *0x8e7a(%rip)        # 40c180 <_ZNSt6localeD1Ev@GLIBCXX_3.4>
  403306:	68 2d 00 00 00       	push   $0x2d
  40330b:	e9 10 fd ff ff       	jmp    403020 <_init+0x20>

0000000000403310 <fprintf@plt>:
  403310:	ff 25 72 8e 00 00    	jmp    *0x8e72(%rip)        # 40c188 <fprintf@GLIBC_2.2.5>
  403316:	68 2e 00 00 00       	push   $0x2e
  40331b:	e9 00 fd ff ff       	jmp    403020 <_init+0x20>

0000000000403320 <read@plt>:
  403320:	ff 25 6a 8e 00 00    	jmp    *0x8e6a(%rip)        # 40c190 <read@GLIBC_2.2.5>
  403326:	68 2f 00 00 00       	push   $0x2f
  40332b:	e9 f0 fc ff ff       	jmp    403020 <_init+0x20>

0000000000403330 <_ZN2sf5MusicD1Ev@plt>:
  403330:	ff 25 62 8e 00 00    	jmp    *0x8e62(%rip)        # 40c198 <_ZN2sf5MusicD1Ev@Base>
  403336:	68 30 00 00 00       	push   $0x30
  40333b:	e9 e0 fc ff ff       	jmp    403020 <_init+0x20>

0000000000403340 <_ZN2sf12RenderWindowC1ENS_9VideoModeERKNS_6StringEjRKNS_15ContextSettingsE@plt>:
  403340:	ff 25 5a 8e 00 00    	jmp    *0x8e5a(%rip)        # 40c1a0 <_ZN2sf12RenderWindowC1ENS_9VideoModeERKNS_6StringEjRKNS_15ContextSettingsE@Base>
  403346:	68 31 00 00 00       	push   $0x31
  40334b:	e9 d0 fc ff ff       	jmp    403020 <_init+0x20>

0000000000403350 <_ZSt24__throw_out_of_range_fmtPKcz@plt>:
  403350:	ff 25 52 8e 00 00    	jmp    *0x8e52(%rip)        # 40c1a8 <_ZSt24__throw_out_of_range_fmtPKcz@GLIBCXX_3.4.20>
  403356:	68 32 00 00 00       	push   $0x32
  40335b:	e9 c0 fc ff ff       	jmp    403020 <_init+0x20>

0000000000403360 <_ZNK2sf6String7getSizeEv@plt>:
  403360:	ff 25 4a 8e 00 00    	jmp    *0x8e4a(%rip)        # 40c1b0 <_ZNK2sf6String7getSizeEv@Base>
  403366:	68 33 00 00 00       	push   $0x33
  40336b:	e9 b0 fc ff ff       	jmp    403020 <_init+0x20>

0000000000403370 <_ZNSt8ios_base4InitC1Ev@plt>:
  403370:	ff 25 42 8e 00 00    	jmp    *0x8e42(%rip)        # 40c1b8 <_ZNSt8ios_base4InitC1Ev@GLIBCXX_3.4>
  403376:	68 34 00 00 00       	push   $0x34
  40337b:	e9 a0 fc ff ff       	jmp    403020 <_init+0x20>

0000000000403380 <puts@plt>:
  403380:	ff 25 3a 8e 00 00    	jmp    *0x8e3a(%rip)        # 40c1c0 <puts@GLIBC_2.2.5>
  403386:	68 35 00 00 00       	push   $0x35
  40338b:	e9 90 fc ff ff       	jmp    403020 <_init+0x20>

0000000000403390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>:
  403390:	ff 25 32 8e 00 00    	jmp    *0x8e32(%rip)        # 40c1c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@GLIBCXX_3.4.21>
  403396:	68 36 00 00 00       	push   $0x36
  40339b:	e9 80 fc ff ff       	jmp    403020 <_init+0x20>

00000000004033a0 <_ZNK2sf5Clock14getElapsedTimeEv@plt>:
  4033a0:	ff 25 2a 8e 00 00    	jmp    *0x8e2a(%rip)        # 40c1d0 <_ZNK2sf5Clock14getElapsedTimeEv@Base>
  4033a6:	68 37 00 00 00       	push   $0x37
  4033ab:	e9 70 fc ff ff       	jmp    403020 <_init+0x20>

00000000004033b0 <_ZNK2sf4Text9getStringEv@plt>:
  4033b0:	ff 25 22 8e 00 00    	jmp    *0x8e22(%rip)        # 40c1d8 <_ZNK2sf4Text9getStringEv@Base>
  4033b6:	68 38 00 00 00       	push   $0x38
  4033bb:	e9 60 fc ff ff       	jmp    403020 <_init+0x20>

00000000004033c0 <_ZN2sfpLERNS_4TimeES0_@plt>:
  4033c0:	ff 25 1a 8e 00 00    	jmp    *0x8e1a(%rip)        # 40c1e0 <_ZN2sfpLERNS_4TimeES0_@Base>
  4033c6:	68 39 00 00 00       	push   $0x39
  4033cb:	e9 50 fc ff ff       	jmp    403020 <_init+0x20>

00000000004033d0 <_ZN2sf5Clock7restartEv@plt>:
  4033d0:	ff 25 12 8e 00 00    	jmp    *0x8e12(%rip)        # 40c1e8 <_ZN2sf5Clock7restartEv@Base>
  4033d6:	68 3a 00 00 00       	push   $0x3a
  4033db:	e9 40 fc ff ff       	jmp    403020 <_init+0x20>

00000000004033e0 <_ZN2sf11SoundStream4playEv@plt>:
  4033e0:	ff 25 0a 8e 00 00    	jmp    *0x8e0a(%rip)        # 40c1f0 <_ZN2sf11SoundStream4playEv@Base>
  4033e6:	68 3b 00 00 00       	push   $0x3b
  4033eb:	e9 30 fc ff ff       	jmp    403020 <_init+0x20>

00000000004033f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>:
  4033f0:	ff 25 02 8e 00 00    	jmp    *0x8e02(%rip)        # 40c1f8 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@Base>
  4033f6:	68 3c 00 00 00       	push   $0x3c
  4033fb:	e9 20 fc ff ff       	jmp    403020 <_init+0x20>

0000000000403400 <_ZN2sfmIERNS_4TimeES0_@plt>:
  403400:	ff 25 fa 8d 00 00    	jmp    *0x8dfa(%rip)        # 40c200 <_ZN2sfmIERNS_4TimeES0_@Base>
  403406:	68 3d 00 00 00       	push   $0x3d
  40340b:	e9 10 fc ff ff       	jmp    403020 <_init+0x20>

0000000000403410 <__gxx_personality_v0@plt>:
  403410:	ff 25 f2 8d 00 00    	jmp    *0x8df2(%rip)        # 40c208 <__gxx_personality_v0@CXXABI_1.3>
  403416:	68 3e 00 00 00       	push   $0x3e
  40341b:	e9 00 fc ff ff       	jmp    403020 <_init+0x20>

0000000000403420 <_ZN2sf6StringaSERKS0_@plt>:
  403420:	ff 25 ea 8d 00 00    	jmp    *0x8dea(%rip)        # 40c210 <_ZN2sf6StringaSERKS0_@Base>
  403426:	68 3f 00 00 00       	push   $0x3f
  40342b:	e9 f0 fb ff ff       	jmp    403020 <_init+0x20>

0000000000403430 <_ZNK2sf4Time9asSecondsEv@plt>:
  403430:	ff 25 e2 8d 00 00    	jmp    *0x8de2(%rip)        # 40c218 <_ZNK2sf4Time9asSecondsEv@Base>
  403436:	68 40 00 00 00       	push   $0x40
  40343b:	e9 e0 fb ff ff       	jmp    403020 <_init+0x20>

0000000000403440 <_ZN2sf12RenderWindowD1Ev@plt>:
  403440:	ff 25 da 8d 00 00    	jmp    *0x8dda(%rip)        # 40c220 <_ZN2sf12RenderWindowD1Ev@Base>
  403446:	68 41 00 00 00       	push   $0x41
  40344b:	e9 d0 fb ff ff       	jmp    403020 <_init+0x20>

0000000000403450 <_ZNK2sf6String12toAnsiStringB5cxx11ERKSt6locale@plt>:
  403450:	ff 25 d2 8d 00 00    	jmp    *0x8dd2(%rip)        # 40c228 <_ZNK2sf6String12toAnsiStringB5cxx11ERKSt6locale@Base>
  403456:	68 42 00 00 00       	push   $0x42
  40345b:	e9 c0 fb ff ff       	jmp    403020 <_init+0x20>

0000000000403460 <_ZN2sf4Text9setStringERKNS_6StringE@plt>:
  403460:	ff 25 ca 8d 00 00    	jmp    *0x8dca(%rip)        # 40c230 <_ZN2sf4Text9setStringERKNS_6StringE@Base>
  403466:	68 43 00 00 00       	push   $0x43
  40346b:	e9 b0 fb ff ff       	jmp    403020 <_init+0x20>

0000000000403470 <_Unwind_Resume@plt>:
  403470:	ff 25 c2 8d 00 00    	jmp    *0x8dc2(%rip)        # 40c238 <_Unwind_Resume@GCC_3.0>
  403476:	68 44 00 00 00       	push   $0x44
  40347b:	e9 a0 fb ff ff       	jmp    403020 <_init+0x20>

0000000000403480 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>:
  403480:	ff 25 ba 8d 00 00    	jmp    *0x8dba(%rip)        # 40c240 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@GLIBCXX_3.4.21>
  403486:	68 45 00 00 00       	push   $0x45
  40348b:	e9 90 fb ff ff       	jmp    403020 <_init+0x20>

0000000000403490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>:
  403490:	ff 25 b2 8d 00 00    	jmp    *0x8db2(%rip)        # 40c248 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@Base>
  403496:	68 46 00 00 00       	push   $0x46
  40349b:	e9 80 fb ff ff       	jmp    403020 <_init+0x20>

00000000004034a0 <_ZN2sf4Text12setFillColorERKNS_5ColorE@plt>:
  4034a0:	ff 25 aa 8d 00 00    	jmp    *0x8daa(%rip)        # 40c250 <_ZN2sf4Text12setFillColorERKNS_5ColorE@Base>
  4034a6:	68 47 00 00 00       	push   $0x47
  4034ab:	e9 70 fb ff ff       	jmp    403020 <_init+0x20>

00000000004034b0 <_ZN2sf6Window5closeEv@plt>:
  4034b0:	ff 25 a2 8d 00 00    	jmp    *0x8da2(%rip)        # 40c258 <_ZN2sf6Window5closeEv@Base>
  4034b6:	68 48 00 00 00       	push   $0x48
  4034bb:	e9 60 fb ff ff       	jmp    403020 <_init+0x20>

00000000004034c0 <_ZNSt6localeC1Ev@plt>:
  4034c0:	ff 25 9a 8d 00 00    	jmp    *0x8d9a(%rip)        # 40c260 <_ZNSt6localeC1Ev@GLIBCXX_3.4>
  4034c6:	68 49 00 00 00       	push   $0x49
  4034cb:	e9 50 fb ff ff       	jmp    403020 <_init+0x20>

00000000004034d0 <_ZNSt8ios_base4InitD1Ev@plt>:
  4034d0:	ff 25 92 8d 00 00    	jmp    *0x8d92(%rip)        # 40c268 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
  4034d6:	68 4a 00 00 00       	push   $0x4a
  4034db:	e9 40 fb ff ff       	jmp    403020 <_init+0x20>

Desmontagem da secção .text:

00000000004034e0 <_Z17char_to_stringbitB5cxx11c.cold>:
      _M_length(size_type __length)
      { _M_string_length = __length; }

      pointer
      _M_data() const
      { return _M_dataplus._M_p; }
  4034e0:	49 8b 3c 24          	mov    (%r12),%rdi
      _M_create(size_type&, size_type);

      void
      _M_dispose()
      {
	if (!_M_is_local())
  4034e4:	48 39 fb             	cmp    %rdi,%rbx
  4034e7:	74 0e                	je     4034f7 <_Z17char_to_stringbitB5cxx11c.cold+0x17>
	  _M_destroy(_M_allocated_capacity);
      }

      void
      _M_destroy(size_type __size) throw()
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4034e9:	49 8b 74 24 10       	mov    0x10(%r12),%rsi
  4034ee:	48 83 c6 01          	add    $0x1,%rsi
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
  4034f2:	e8 29 fd ff ff       	call   403220 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  4034f7:	48 89 ef             	mov    %rbp,%rdi
  4034fa:	e8 71 ff ff ff       	call   403470 <_Unwind_Resume@plt>

00000000004034ff <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold>:
      { return _M_dataplus._M_p; }
  4034ff:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  403504:	4c 39 e7             	cmp    %r12,%rdi
  403507:	74 0e                	je     403517 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x18>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403509:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  40350e:	48 8d 70 01          	lea    0x1(%rax),%rsi
	::operator delete(__p
  403512:	e8 09 fd ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403517:	48 8b 3c 24          	mov    (%rsp),%rdi
	if (!_M_is_local())
  40351b:	48 39 df             	cmp    %rbx,%rdi
  40351e:	74 0e                	je     40352e <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x2f>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403520:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  403525:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403529:	e8 f2 fc ff ff       	call   403220 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  40352e:	48 89 ef             	mov    %rbp,%rdi
  403531:	e8 3a ff ff ff       	call   403470 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
  403536:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  40353b:	4c 39 e7             	cmp    %r12,%rdi
  40353e:	74 d7                	je     403517 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x18>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403540:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  403545:	48 8d 70 01          	lea    0x1(%rax),%rsi
	::operator delete(__p
  403549:	e8 d2 fc ff ff       	call   403220 <_ZdlPvm@plt>
  40354e:	eb c7                	jmp    403517 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x18>
      { return _M_dataplus._M_p; }
  403550:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  403555:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  40355a:	48 39 c7             	cmp    %rax,%rdi
  40355d:	74 b8                	je     403517 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x18>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  40355f:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  403564:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403568:	e8 b3 fc ff ff       	call   403220 <_ZdlPvm@plt>
  40356d:	eb a8                	jmp    403517 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x18>
      { return _M_dataplus._M_p; }
  40356f:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  403574:	4c 39 e7             	cmp    %r12,%rdi
  403577:	74 9e                	je     403517 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x18>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403579:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  40357e:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403582:	e8 99 fc ff ff       	call   403220 <_ZdlPvm@plt>
  403587:	eb 8e                	jmp    403517 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x18>

0000000000403589 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_.cold>:
      { return _M_dataplus._M_p; }
  403589:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  40358e:	4c 39 f7             	cmp    %r14,%rdi
  403591:	74 0e                	je     4035a1 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_.cold+0x18>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403593:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  403598:	48 8d 70 01          	lea    0x1(%rax),%rsi
  40359c:	e8 7f fc ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  4035a1:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
	if (!_M_is_local())
  4035a6:	48 39 ef             	cmp    %rbp,%rdi
  4035a9:	74 0e                	je     4035b9 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_.cold+0x30>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4035ab:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  4035b0:	48 8d 70 01          	lea    0x1(%rax),%rsi
  4035b4:	e8 67 fc ff ff       	call   403220 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  4035b9:	4c 89 e7             	mov    %r12,%rdi
  4035bc:	e8 af fe ff ff       	call   403470 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
  4035c1:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  4035c6:	4c 39 f7             	cmp    %r14,%rdi
  4035c9:	74 0e                	je     4035d9 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_.cold+0x50>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4035cb:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  4035d0:	48 8d 70 01          	lea    0x1(%rax),%rsi
	::operator delete(__p
  4035d4:	e8 47 fc ff ff       	call   403220 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  4035d9:	48 89 ef             	mov    %rbp,%rdi
  4035dc:	e8 8f fe ff ff       	call   403470 <_Unwind_Resume@plt>

00000000004035e1 <main.cold>:
      { return _M_dataplus._M_p; }
  4035e1:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  4035e8:	48 3b bd b0 de ff ff 	cmp    -0x2150(%rbp),%rdi
  4035ef:	74 14                	je     403605 <main.cold+0x24>
	::operator delete(__p
  4035f1:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  4035f8:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4035ff:	00 
  403600:	e8 1b fc ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403605:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
	if (!_M_is_local())
  40360c:	48 3b bd b8 de ff ff 	cmp    -0x2148(%rbp),%rdi
  403613:	74 10                	je     403625 <main.cold+0x44>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403615:	48 8b 85 40 e0 ff ff 	mov    -0x1fc0(%rbp),%rax
  40361c:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403620:	e8 fb fb ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403625:	48 8b bd 10 e0 ff ff 	mov    -0x1ff0(%rbp),%rdi
	if (!_M_is_local())
  40362c:	48 8d 85 20 e0 ff ff 	lea    -0x1fe0(%rbp),%rax
  403633:	48 39 c7             	cmp    %rax,%rdi
  403636:	74 10                	je     403648 <main.cold+0x67>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403638:	48 8b 85 20 e0 ff ff 	mov    -0x1fe0(%rbp),%rax
  40363f:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403643:	e8 d8 fb ff ff       	call   403220 <_ZdlPvm@plt>
				{
					elapsedtime_text -= sf::seconds(.1f);
					if (typedtext.getSize() > 0)
					{
						text.setString(text.getString() + typedtext[0]);
						typedtext = typedtext.toAnsiString().substr(1);
  403648:	4c 89 ef             	mov    %r13,%rdi
  40364b:	e8 b0 fc ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
  403650:	48 8b bd c0 de ff ff 	mov    -0x2140(%rbp),%rdi
  403657:	e8 a4 fc ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
      { return _M_dataplus._M_p; }
  40365c:	48 8b bd f0 df ff ff 	mov    -0x2010(%rbp),%rdi
	if (!_M_is_local())
  403663:	48 8d 85 00 e0 ff ff 	lea    -0x2000(%rbp),%rax
  40366a:	48 39 c7             	cmp    %rax,%rdi
  40366d:	74 10                	je     40367f <main.cold+0x9e>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  40366f:	48 8b 85 00 e0 ff ff 	mov    -0x2000(%rbp),%rax
  403676:	48 8d 70 01          	lea    0x1(%rax),%rsi
  40367a:	e8 a1 fb ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  40367f:	48 8b bd d0 df ff ff 	mov    -0x2030(%rbp),%rdi
	if (!_M_is_local())
  403686:	48 8d 85 e0 df ff ff 	lea    -0x2020(%rbp),%rax
  40368d:	48 39 c7             	cmp    %rax,%rdi
  403690:	74 10                	je     4036a2 <main.cold+0xc1>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403692:	48 8b 85 e0 df ff ff 	mov    -0x2020(%rbp),%rax
  403699:	48 8d 70 01          	lea    0x1(%rax),%rsi
  40369d:	e8 7e fb ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  4036a2:	48 8b bd b0 df ff ff 	mov    -0x2050(%rbp),%rdi
	if (!_M_is_local())
  4036a9:	48 8d 85 c0 df ff ff 	lea    -0x2040(%rbp),%rax
  4036b0:	48 39 c7             	cmp    %rax,%rdi
  4036b3:	74 14                	je     4036c9 <main.cold+0xe8>
  4036b5:	48 8b 85 c0 df ff ff 	mov    -0x2040(%rbp),%rax
  4036bc:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4036c3:	00 
  4036c4:	e8 57 fb ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  4036c9:	48 8b bd 90 df ff ff 	mov    -0x2070(%rbp),%rdi
	if (!_M_is_local())
  4036d0:	48 8d 85 a0 df ff ff 	lea    -0x2060(%rbp),%rax
  4036d7:	48 39 c7             	cmp    %rax,%rdi
  4036da:	0f 85 b0 02 00 00    	jne    403990 <main.cold+0x3af>
	}

	

	//close(fd);
}
  4036e0:	48 8d bd 50 e1 ff ff 	lea    -0x1eb0(%rbp),%rdi
  4036e7:	e8 44 fc ff ff       	call   403330 <_ZN2sf5MusicD1Ev@plt>
  4036ec:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  4036f3:	e8 98 4a 00 00       	call   408190 <_ZN2sf4TextD1Ev>
  4036f8:	48 8d bd e0 fa ff ff 	lea    -0x520(%rbp),%rdi
  4036ff:	e8 8c 4a 00 00       	call   408190 <_ZN2sf4TextD1Ev>
  403704:	48 8d bd c0 e0 ff ff 	lea    -0x1f40(%rbp),%rdi
  40370b:	e8 40 fb ff ff       	call   403250 <_ZN2sf4FontD1Ev@plt>
{
////////////////////////////////////////////////////////////
/// \brief Specialized shape representing a circle
///
////////////////////////////////////////////////////////////
class SFML_GRAPHICS_API CircleShape : public Shape
  403710:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  403716:	48 8d bd 80 f9 ff ff 	lea    -0x680(%rbp),%rdi
  40371d:	48 c7 85 c0 de ff ff 	movq   $0x40bd28,-0x2140(%rbp)
  403724:	28 bd 40 00 
  403728:	66 49 0f 6e c4       	movq   %r12,%xmm0
  40372d:	0f 16 85 c0 de ff ff 	movhps -0x2140(%rbp),%xmm0
  403734:	0f 29 85 80 f9 ff ff 	movaps %xmm0,-0x680(%rbp)
  40373b:	e8 20 f9 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  403740:	66 49 0f 6e c4       	movq   %r12,%xmm0
  403745:	48 8d bd 20 f8 ff ff 	lea    -0x7e0(%rbp),%rdi
  40374c:	0f 16 85 c0 de ff ff 	movhps -0x2140(%rbp),%xmm0
  403753:	0f 29 85 20 f8 ff ff 	movaps %xmm0,-0x7e0(%rbp)
  40375a:	e8 01 f9 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  40375f:	66 49 0f 6e c4       	movq   %r12,%xmm0
  403764:	48 8d bd c0 f6 ff ff 	lea    -0x940(%rbp),%rdi
  40376b:	0f 16 85 c0 de ff ff 	movhps -0x2140(%rbp),%xmm0
  403772:	0f 29 85 c0 f6 ff ff 	movaps %xmm0,-0x940(%rbp)
  403779:	e8 e2 f8 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  40377e:	66 49 0f 6e c4       	movq   %r12,%xmm0
  403783:	48 8d bd 60 f5 ff ff 	lea    -0xaa0(%rbp),%rdi
  40378a:	0f 16 85 c0 de ff ff 	movhps -0x2140(%rbp),%xmm0
  403791:	0f 29 85 60 f5 ff ff 	movaps %xmm0,-0xaa0(%rbp)
  403798:	e8 c3 f8 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  40379d:	66 49 0f 6e c4       	movq   %r12,%xmm0
  4037a2:	48 8d bd 00 f4 ff ff 	lea    -0xc00(%rbp),%rdi
  4037a9:	0f 16 85 c0 de ff ff 	movhps -0x2140(%rbp),%xmm0
  4037b0:	0f 29 85 00 f4 ff ff 	movaps %xmm0,-0xc00(%rbp)
  4037b7:	e8 a4 f8 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4037bc:	66 49 0f 6e c4       	movq   %r12,%xmm0
  4037c1:	48 8d bd a0 f2 ff ff 	lea    -0xd60(%rbp),%rdi
  4037c8:	0f 16 85 c0 de ff ff 	movhps -0x2140(%rbp),%xmm0
  4037cf:	0f 29 85 a0 f2 ff ff 	movaps %xmm0,-0xd60(%rbp)
  4037d6:	e8 85 f8 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4037db:	66 49 0f 6e c4       	movq   %r12,%xmm0
  4037e0:	48 8d bd 40 f1 ff ff 	lea    -0xec0(%rbp),%rdi
  4037e7:	0f 16 85 c0 de ff ff 	movhps -0x2140(%rbp),%xmm0
  4037ee:	0f 29 85 40 f1 ff ff 	movaps %xmm0,-0xec0(%rbp)
  4037f5:	e8 66 f8 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4037fa:	66 49 0f 6e c4       	movq   %r12,%xmm0
  4037ff:	48 8d bd e0 ef ff ff 	lea    -0x1020(%rbp),%rdi
  403806:	0f 16 85 c0 de ff ff 	movhps -0x2140(%rbp),%xmm0
  40380d:	0f 29 85 e0 ef ff ff 	movaps %xmm0,-0x1020(%rbp)
  403814:	e8 47 f8 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  403819:	66 49 0f 6e c4       	movq   %r12,%xmm0
  40381e:	48 8d bd 80 ee ff ff 	lea    -0x1180(%rbp),%rdi
  403825:	0f 16 85 c0 de ff ff 	movhps -0x2140(%rbp),%xmm0
  40382c:	0f 29 85 80 ee ff ff 	movaps %xmm0,-0x1180(%rbp)
  403833:	e8 28 f8 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  403838:	66 49 0f 6e c4       	movq   %r12,%xmm0
  40383d:	48 8d bd 20 ed ff ff 	lea    -0x12e0(%rbp),%rdi
  403844:	0f 16 85 c0 de ff ff 	movhps -0x2140(%rbp),%xmm0
  40384b:	0f 29 85 20 ed ff ff 	movaps %xmm0,-0x12e0(%rbp)
  403852:	e8 09 f8 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  403857:	66 49 0f 6e c4       	movq   %r12,%xmm0
  40385c:	48 8d bd c0 eb ff ff 	lea    -0x1440(%rbp),%rdi
  403863:	0f 16 85 c0 de ff ff 	movhps -0x2140(%rbp),%xmm0
  40386a:	0f 29 85 c0 eb ff ff 	movaps %xmm0,-0x1440(%rbp)
  403871:	e8 ea f7 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  403876:	66 49 0f 6e c4       	movq   %r12,%xmm0
  40387b:	48 8d bd 60 ea ff ff 	lea    -0x15a0(%rbp),%rdi
  403882:	0f 16 85 c0 de ff ff 	movhps -0x2140(%rbp),%xmm0
  403889:	0f 29 85 60 ea ff ff 	movaps %xmm0,-0x15a0(%rbp)
  403890:	e8 cb f7 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  403895:	66 49 0f 6e c4       	movq   %r12,%xmm0
  40389a:	48 8d bd 00 e9 ff ff 	lea    -0x1700(%rbp),%rdi
  4038a1:	0f 16 85 c0 de ff ff 	movhps -0x2140(%rbp),%xmm0
  4038a8:	0f 29 85 00 e9 ff ff 	movaps %xmm0,-0x1700(%rbp)
  4038af:	e8 ac f7 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4038b4:	66 49 0f 6e c4       	movq   %r12,%xmm0
  4038b9:	48 8d bd a0 e7 ff ff 	lea    -0x1860(%rbp),%rdi
  4038c0:	0f 16 85 c0 de ff ff 	movhps -0x2140(%rbp),%xmm0
  4038c7:	0f 29 85 a0 e7 ff ff 	movaps %xmm0,-0x1860(%rbp)
  4038ce:	e8 8d f7 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4038d3:	66 49 0f 6e c4       	movq   %r12,%xmm0
  4038d8:	48 8d bd 40 e6 ff ff 	lea    -0x19c0(%rbp),%rdi
  4038df:	0f 16 85 c0 de ff ff 	movhps -0x2140(%rbp),%xmm0
  4038e6:	0f 29 85 40 e6 ff ff 	movaps %xmm0,-0x19c0(%rbp)
  4038ed:	e8 6e f7 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4038f2:	66 49 0f 6e c4       	movq   %r12,%xmm0
  4038f7:	48 8d bd e0 e4 ff ff 	lea    -0x1b20(%rbp),%rdi
  4038fe:	0f 16 85 c0 de ff ff 	movhps -0x2140(%rbp),%xmm0
  403905:	0f 29 85 e0 e4 ff ff 	movaps %xmm0,-0x1b20(%rbp)
  40390c:	e8 4f f7 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  403911:	66 49 0f 6e c4       	movq   %r12,%xmm0
  403916:	48 8d bd 80 e3 ff ff 	lea    -0x1c80(%rbp),%rdi
  40391d:	0f 16 85 c0 de ff ff 	movhps -0x2140(%rbp),%xmm0
  403924:	0f 29 85 80 e3 ff ff 	movaps %xmm0,-0x1c80(%rbp)
  40392b:	e8 30 f7 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  403930:	66 49 0f 6e c4       	movq   %r12,%xmm0
  403935:	48 8d bd 20 e2 ff ff 	lea    -0x1de0(%rbp),%rdi
  40393c:	0f 16 85 c0 de ff ff 	movhps -0x2140(%rbp),%xmm0
  403943:	0f 29 85 20 e2 ff ff 	movaps %xmm0,-0x1de0(%rbp)
  40394a:	e8 11 f7 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  40394f:	48 8d bd c0 fd ff ff 	lea    -0x240(%rbp),%rdi
  403956:	e8 e5 fa ff ff       	call   403440 <_ZN2sf12RenderWindowD1Ev@plt>
  40395b:	48 89 df             	mov    %rbx,%rdi
  40395e:	e8 0d fb ff ff       	call   403470 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
  403963:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  40396a:	48 3b bd b0 de ff ff 	cmp    -0x2150(%rbp),%rdi
  403971:	0f 84 d9 fc ff ff    	je     403650 <main.cold+0x6f>
  403977:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  40397e:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403985:	00 
  403986:	e8 95 f8 ff ff       	call   403220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  40398b:	e9 c0 fc ff ff       	jmp    403650 <main.cold+0x6f>
  403990:	48 8b 85 a0 df ff ff 	mov    -0x2060(%rbp),%rax
  403997:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  40399e:	00 
  40399f:	e8 7c f8 ff ff       	call   403220 <_ZdlPvm@plt>
  4039a4:	e9 37 fd ff ff       	jmp    4036e0 <main.cold+0xff>
      { return _M_dataplus._M_p; }
  4039a9:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  4039b0:	48 8d 85 60 e0 ff ff 	lea    -0x1fa0(%rbp),%rax
  4039b7:	48 39 c7             	cmp    %rax,%rdi
  4039ba:	74 14                	je     4039d0 <main.cold+0x3ef>
  4039bc:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  4039c3:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4039ca:	00 
  4039cb:	e8 50 f8 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  4039d0:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
	if (!_M_is_local())
  4039d7:	48 8d 85 40 e0 ff ff 	lea    -0x1fc0(%rbp),%rax
  4039de:	48 39 c7             	cmp    %rax,%rdi
  4039e1:	0f 84 75 fc ff ff    	je     40365c <main.cold+0x7b>
  4039e7:	48 8b 85 40 e0 ff ff 	mov    -0x1fc0(%rbp),%rax
  4039ee:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4039f5:	00 
  4039f6:	e8 25 f8 ff ff       	call   403220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4039fb:	e9 5c fc ff ff       	jmp    40365c <main.cold+0x7b>
      { return _M_dataplus._M_p; }
  403a00:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  403a07:	48 3b bd b0 de ff ff 	cmp    -0x2150(%rbp),%rdi
  403a0e:	74 14                	je     403a24 <main.cold+0x443>
  403a10:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  403a17:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403a1e:	00 
  403a1f:	e8 fc f7 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403a24:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
	if (!_M_is_local())
  403a2b:	48 3b bd b8 de ff ff 	cmp    -0x2148(%rbp),%rdi
  403a32:	74 10                	je     403a44 <main.cold+0x463>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403a34:	48 8b 85 40 e0 ff ff 	mov    -0x1fc0(%rbp),%rax
  403a3b:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403a3f:	e8 dc f7 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403a44:	48 8b bd 10 e0 ff ff 	mov    -0x1ff0(%rbp),%rdi
	if (!_M_is_local())
  403a4b:	48 8d 85 20 e0 ff ff 	lea    -0x1fe0(%rbp),%rax
  403a52:	48 39 c7             	cmp    %rax,%rdi
  403a55:	0f 84 ed fb ff ff    	je     403648 <main.cold+0x67>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403a5b:	48 8b 85 20 e0 ff ff 	mov    -0x1fe0(%rbp),%rax
  403a62:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403a66:	e8 b5 f7 ff ff       	call   403220 <_ZdlPvm@plt>
  403a6b:	e9 d8 fb ff ff       	jmp    403648 <main.cold+0x67>
      { return _M_dataplus._M_p; }
  403a70:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  403a77:	48 8d 85 60 e0 ff ff 	lea    -0x1fa0(%rbp),%rax
  403a7e:	48 39 c7             	cmp    %rax,%rdi
  403a81:	0f 84 49 ff ff ff    	je     4039d0 <main.cold+0x3ef>
  403a87:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  403a8e:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403a95:	00 
  403a96:	e8 85 f7 ff ff       	call   403220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403a9b:	e9 30 ff ff ff       	jmp    4039d0 <main.cold+0x3ef>
      { return _M_dataplus._M_p; }
  403aa0:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  403aa7:	48 8d 85 60 e0 ff ff 	lea    -0x1fa0(%rbp),%rax
  403aae:	48 39 c7             	cmp    %rax,%rdi
  403ab1:	0f 84 19 ff ff ff    	je     4039d0 <main.cold+0x3ef>
  403ab7:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  403abe:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403ac5:	00 
  403ac6:	e8 55 f7 ff ff       	call   403220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403acb:	e9 00 ff ff ff       	jmp    4039d0 <main.cold+0x3ef>
      { return _M_dataplus._M_p; }
  403ad0:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  403ad7:	48 3b bd b0 de ff ff 	cmp    -0x2150(%rbp),%rdi
  403ade:	74 14                	je     403af4 <main.cold+0x513>
  403ae0:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  403ae7:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403aee:	00 
  403aef:	e8 2c f7 ff ff       	call   403220 <_ZdlPvm@plt>
					typedtext.insert(0, "Tem alguma coisa piscando,\nvoce deveria prestar atencao");
  403af4:	4c 89 f7             	mov    %r14,%rdi
  403af7:	e8 04 f8 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
  403afc:	e9 5b fb ff ff       	jmp    40365c <main.cold+0x7b>
      { return _M_dataplus._M_p; }
  403b01:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  403b08:	48 3b bd b0 de ff ff 	cmp    -0x2150(%rbp),%rdi
  403b0f:	74 14                	je     403b25 <main.cold+0x544>
  403b11:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  403b18:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403b1f:	00 
  403b20:	e8 fb f6 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403b25:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
	if (!_M_is_local())
  403b2c:	48 3b bd b8 de ff ff 	cmp    -0x2148(%rbp),%rdi
  403b33:	74 10                	je     403b45 <main.cold+0x564>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403b35:	48 8b 85 40 e0 ff ff 	mov    -0x1fc0(%rbp),%rax
  403b3c:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403b40:	e8 db f6 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403b45:	48 8b bd 10 e0 ff ff 	mov    -0x1ff0(%rbp),%rdi
	if (!_M_is_local())
  403b4c:	48 8d 85 20 e0 ff ff 	lea    -0x1fe0(%rbp),%rax
  403b53:	48 39 c7             	cmp    %rax,%rdi
  403b56:	0f 84 ec fa ff ff    	je     403648 <main.cold+0x67>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403b5c:	48 8b 85 20 e0 ff ff 	mov    -0x1fe0(%rbp),%rax
  403b63:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403b67:	e8 b4 f6 ff ff       	call   403220 <_ZdlPvm@plt>
  403b6c:	e9 d7 fa ff ff       	jmp    403648 <main.cold+0x67>
      { return _M_dataplus._M_p; }
  403b71:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  403b78:	48 8d 85 60 e0 ff ff 	lea    -0x1fa0(%rbp),%rax
  403b7f:	48 39 c7             	cmp    %rax,%rdi
  403b82:	0f 84 6c ff ff ff    	je     403af4 <main.cold+0x513>
  403b88:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  403b8f:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403b96:	00 
  403b97:	e8 84 f6 ff ff       	call   403220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403b9c:	e9 53 ff ff ff       	jmp    403af4 <main.cold+0x513>
      { return _M_dataplus._M_p; }
  403ba1:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  403ba8:	48 3b bd b0 de ff ff 	cmp    -0x2150(%rbp),%rdi
  403baf:	0f 84 3f ff ff ff    	je     403af4 <main.cold+0x513>
  403bb5:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  403bbc:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403bc3:	00 
  403bc4:	e8 57 f6 ff ff       	call   403220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403bc9:	e9 26 ff ff ff       	jmp    403af4 <main.cold+0x513>
      { return _M_dataplus._M_p; }
  403bce:	48 8b bd 50 e1 ff ff 	mov    -0x1eb0(%rbp),%rdi
	if (!_M_is_local())
  403bd5:	48 8d 85 60 e1 ff ff 	lea    -0x1ea0(%rbp),%rax
  403bdc:	48 39 c7             	cmp    %rax,%rdi
  403bdf:	74 14                	je     403bf5 <main.cold+0x614>
  403be1:	48 8b 85 60 e1 ff ff 	mov    -0x1ea0(%rbp),%rax
  403be8:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403bef:	00 
  403bf0:	e8 2b f6 ff ff       	call   403220 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  403bf5:	48 8d bd 70 e0 ff ff 	lea    -0x1f90(%rbp),%rdi
  403bfc:	e8 ff f6 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
  403c01:	e9 f2 fa ff ff       	jmp    4036f8 <main.cold+0x117>
      { return _M_dataplus._M_p; }
  403c06:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  403c0d:	48 8d 85 60 e0 ff ff 	lea    -0x1fa0(%rbp),%rax
  403c14:	48 39 c7             	cmp    %rax,%rdi
  403c17:	0f 84 d7 fe ff ff    	je     403af4 <main.cold+0x513>
	::operator delete(__p
  403c1d:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  403c24:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403c2b:	00 
  403c2c:	e8 ef f5 ff ff       	call   403220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403c31:	e9 be fe ff ff       	jmp    403af4 <main.cold+0x513>
      { return _M_dataplus._M_p; }
  403c36:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  403c3d:	48 8d 85 60 e0 ff ff 	lea    -0x1fa0(%rbp),%rax
  403c44:	48 39 c7             	cmp    %rax,%rdi
  403c47:	0f 84 83 fd ff ff    	je     4039d0 <main.cold+0x3ef>
  403c4d:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  403c54:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403c5b:	00 
  403c5c:	e8 bf f5 ff ff       	call   403220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403c61:	e9 6a fd ff ff       	jmp    4039d0 <main.cold+0x3ef>
      { return _M_dataplus._M_p; }
  403c66:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  403c6d:	48 8d 85 60 e0 ff ff 	lea    -0x1fa0(%rbp),%rax
  403c74:	48 39 c7             	cmp    %rax,%rdi
  403c77:	0f 84 d3 f9 ff ff    	je     403650 <main.cold+0x6f>
  403c7d:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  403c84:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403c8b:	00 
  403c8c:	e8 8f f5 ff ff       	call   403220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403c91:	e9 ba f9 ff ff       	jmp    403650 <main.cold+0x6f>
      { return _M_dataplus._M_p; }
  403c96:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  403c9d:	48 8d 85 60 e0 ff ff 	lea    -0x1fa0(%rbp),%rax
  403ca4:	48 39 c7             	cmp    %rax,%rdi
  403ca7:	0f 84 a3 f9 ff ff    	je     403650 <main.cold+0x6f>
  403cad:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  403cb4:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403cbb:	00 
  403cbc:	e8 5f f5 ff ff       	call   403220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403cc1:	e9 8a f9 ff ff       	jmp    403650 <main.cold+0x6f>
      { return _M_dataplus._M_p; }
  403cc6:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  403ccd:	48 8d 85 60 e0 ff ff 	lea    -0x1fa0(%rbp),%rax
  403cd4:	48 39 c7             	cmp    %rax,%rdi
  403cd7:	0f 84 17 fe ff ff    	je     403af4 <main.cold+0x513>
  403cdd:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  403ce4:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403ceb:	00 
  403cec:	e8 2f f5 ff ff       	call   403220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403cf1:	e9 fe fd ff ff       	jmp    403af4 <main.cold+0x513>
      { return _M_dataplus._M_p; }
  403cf6:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  403cfd:	48 3b bd b0 de ff ff 	cmp    -0x2150(%rbp),%rdi
  403d04:	0f 84 ea fd ff ff    	je     403af4 <main.cold+0x513>
  403d0a:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  403d11:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403d18:	00 
  403d19:	e8 02 f5 ff ff       	call   403220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403d1e:	e9 d1 fd ff ff       	jmp    403af4 <main.cold+0x513>
      { return _M_dataplus._M_p; }
  403d23:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  403d2a:	48 3b bd b0 de ff ff 	cmp    -0x2150(%rbp),%rdi
  403d31:	0f 84 19 f9 ff ff    	je     403650 <main.cold+0x6f>
  403d37:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  403d3e:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403d45:	00 
  403d46:	e8 d5 f4 ff ff       	call   403220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403d4b:	e9 00 f9 ff ff       	jmp    403650 <main.cold+0x6f>
      { return _M_dataplus._M_p; }
  403d50:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  403d57:	48 8d 85 60 e0 ff ff 	lea    -0x1fa0(%rbp),%rax
  403d5e:	48 39 c7             	cmp    %rax,%rdi
  403d61:	0f 84 8d fd ff ff    	je     403af4 <main.cold+0x513>
  403d67:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  403d6e:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403d75:	00 
  403d76:	e8 a5 f4 ff ff       	call   403220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403d7b:	e9 74 fd ff ff       	jmp    403af4 <main.cold+0x513>
      { return _M_dataplus._M_p; }
  403d80:	48 8b bd 70 e0 ff ff 	mov    -0x1f90(%rbp),%rdi
	if (!_M_is_local())
  403d87:	48 8d 85 80 e0 ff ff 	lea    -0x1f80(%rbp),%rax
  403d8e:	48 39 c7             	cmp    %rax,%rdi
  403d91:	0f 84 49 f9 ff ff    	je     4036e0 <main.cold+0xff>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403d97:	48 8b 85 80 e0 ff ff 	mov    -0x1f80(%rbp),%rax
  403d9e:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403da2:	e8 79 f4 ff ff       	call   403220 <_ZdlPvm@plt>
  403da7:	e9 34 f9 ff ff       	jmp    4036e0 <main.cold+0xff>
      { return _M_dataplus._M_p; }
  403dac:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  403db3:	48 3b bd b0 de ff ff 	cmp    -0x2150(%rbp),%rdi
  403dba:	0f 84 34 fd ff ff    	je     403af4 <main.cold+0x513>
  403dc0:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  403dc7:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403dce:	00 
  403dcf:	e8 4c f4 ff ff       	call   403220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403dd4:	e9 1b fd ff ff       	jmp    403af4 <main.cold+0x513>
      { return _M_dataplus._M_p; }
  403dd9:	48 8b bd 50 fc ff ff 	mov    -0x3b0(%rbp),%rdi
	if (!_M_is_local())
  403de0:	48 8d 85 60 fc ff ff 	lea    -0x3a0(%rbp),%rax
  403de7:	48 39 c7             	cmp    %rax,%rdi
  403dea:	74 14                	je     403e00 <main.cold+0x81f>
  403dec:	48 8b 85 60 fc ff ff 	mov    -0x3a0(%rbp),%rax
  403df3:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403dfa:	00 
  403dfb:	e8 20 f4 ff ff       	call   403220 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  403e00:	48 8d bd 80 f9 ff ff 	lea    -0x680(%rbp),%rdi
  403e07:	e8 f4 f4 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
  403e0c:	48 89 df             	mov    %rbx,%rdi
  403e0f:	e8 5c f6 ff ff       	call   403470 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
  403e14:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  403e1b:	48 3b bd b0 de ff ff 	cmp    -0x2150(%rbp),%rdi
  403e22:	74 14                	je     403e38 <main.cold+0x857>
	::operator delete(__p
  403e24:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  403e2b:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403e32:	00 
  403e33:	e8 e8 f3 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403e38:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
	if (!_M_is_local())
  403e3f:	48 3b bd b8 de ff ff 	cmp    -0x2148(%rbp),%rdi
  403e46:	74 10                	je     403e58 <main.cold+0x877>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403e48:	48 8b 85 40 e0 ff ff 	mov    -0x1fc0(%rbp),%rax
  403e4f:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403e53:	e8 c8 f3 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403e58:	48 8b bd 10 e0 ff ff 	mov    -0x1ff0(%rbp),%rdi
	if (!_M_is_local())
  403e5f:	48 8d 85 20 e0 ff ff 	lea    -0x1fe0(%rbp),%rax
  403e66:	48 39 c7             	cmp    %rax,%rdi
  403e69:	0f 84 d9 f7 ff ff    	je     403648 <main.cold+0x67>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403e6f:	48 8b 85 20 e0 ff ff 	mov    -0x1fe0(%rbp),%rax
  403e76:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403e7a:	e8 a1 f3 ff ff       	call   403220 <_ZdlPvm@plt>
  403e7f:	e9 c4 f7 ff ff       	jmp    403648 <main.cold+0x67>
      { return _M_dataplus._M_p; }
  403e84:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  403e8b:	48 8d 85 60 e0 ff ff 	lea    -0x1fa0(%rbp),%rax
  403e92:	48 39 c7             	cmp    %rax,%rdi
  403e95:	0f 84 35 fb ff ff    	je     4039d0 <main.cold+0x3ef>
  403e9b:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  403ea2:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403ea9:	00 
  403eaa:	e8 71 f3 ff ff       	call   403220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403eaf:	e9 1c fb ff ff       	jmp    4039d0 <main.cold+0x3ef>
      { return _M_dataplus._M_p; }
  403eb4:	48 8b bd 50 fc ff ff 	mov    -0x3b0(%rbp),%rdi
	if (!_M_is_local())
  403ebb:	48 8d 85 60 fc ff ff 	lea    -0x3a0(%rbp),%rax
  403ec2:	48 39 c7             	cmp    %rax,%rdi
  403ec5:	0f 84 39 f8 ff ff    	je     403704 <main.cold+0x123>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403ecb:	48 8b 85 60 fc ff ff 	mov    -0x3a0(%rbp),%rax
  403ed2:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403ed6:	e8 45 f3 ff ff       	call   403220 <_ZdlPvm@plt>
  403edb:	e9 24 f8 ff ff       	jmp    403704 <main.cold+0x123>
      { return _M_dataplus._M_p; }
  403ee0:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  403ee7:	48 8d 85 60 e0 ff ff 	lea    -0x1fa0(%rbp),%rax
  403eee:	48 39 c7             	cmp    %rax,%rdi
  403ef1:	0f 84 d9 fa ff ff    	je     4039d0 <main.cold+0x3ef>
  403ef7:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  403efe:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403f05:	00 
  403f06:	e8 15 f3 ff ff       	call   403220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403f0b:	e9 c0 fa ff ff       	jmp    4039d0 <main.cold+0x3ef>
      { return _M_dataplus._M_p; }
  403f10:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  403f17:	48 3b bd b0 de ff ff 	cmp    -0x2150(%rbp),%rdi
  403f1e:	74 14                	je     403f34 <main.cold+0x953>
  403f20:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  403f27:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403f2e:	00 
  403f2f:	e8 ec f2 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403f34:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
	if (!_M_is_local())
  403f3b:	48 3b bd b8 de ff ff 	cmp    -0x2148(%rbp),%rdi
  403f42:	74 10                	je     403f54 <main.cold+0x973>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403f44:	48 8b 85 40 e0 ff ff 	mov    -0x1fc0(%rbp),%rax
  403f4b:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403f4f:	e8 cc f2 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403f54:	48 8b bd 10 e0 ff ff 	mov    -0x1ff0(%rbp),%rdi
	if (!_M_is_local())
  403f5b:	48 8d 85 20 e0 ff ff 	lea    -0x1fe0(%rbp),%rax
  403f62:	48 39 c7             	cmp    %rax,%rdi
  403f65:	0f 84 dd f6 ff ff    	je     403648 <main.cold+0x67>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403f6b:	48 8b 85 20 e0 ff ff 	mov    -0x1fe0(%rbp),%rax
  403f72:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403f76:	e8 a5 f2 ff ff       	call   403220 <_ZdlPvm@plt>
  403f7b:	e9 c8 f6 ff ff       	jmp    403648 <main.cold+0x67>
      { return _M_dataplus._M_p; }
  403f80:	48 8b bd 50 fc ff ff 	mov    -0x3b0(%rbp),%rdi
	if (!_M_is_local())
  403f87:	48 8d 85 60 fc ff ff 	lea    -0x3a0(%rbp),%rax
  403f8e:	48 39 c7             	cmp    %rax,%rdi
  403f91:	74 14                	je     403fa7 <main.cold+0x9c6>
  403f93:	48 8b 85 60 fc ff ff 	mov    -0x3a0(%rbp),%rax
  403f9a:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403fa1:	00 
  403fa2:	e8 79 f2 ff ff       	call   403220 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  403fa7:	48 8d bd 50 e1 ff ff 	lea    -0x1eb0(%rbp),%rdi
  403fae:	e8 4d f3 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
  403fb3:	e9 4c f7 ff ff       	jmp    403704 <main.cold+0x123>
      { return _M_dataplus._M_p; }
  403fb8:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  403fbf:	48 3b bd b0 de ff ff 	cmp    -0x2150(%rbp),%rdi
  403fc6:	74 14                	je     403fdc <main.cold+0x9fb>
	::operator delete(__p
  403fc8:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  403fcf:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403fd6:	00 
  403fd7:	e8 44 f2 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403fdc:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
	if (!_M_is_local())
  403fe3:	48 3b bd b8 de ff ff 	cmp    -0x2148(%rbp),%rdi
  403fea:	74 10                	je     403ffc <main.cold+0xa1b>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  403fec:	48 8b 85 40 e0 ff ff 	mov    -0x1fc0(%rbp),%rax
  403ff3:	48 8d 70 01          	lea    0x1(%rax),%rsi
  403ff7:	e8 24 f2 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  403ffc:	48 8b bd 10 e0 ff ff 	mov    -0x1ff0(%rbp),%rdi
	if (!_M_is_local())
  404003:	48 8d 85 20 e0 ff ff 	lea    -0x1fe0(%rbp),%rax
  40400a:	48 39 c7             	cmp    %rax,%rdi
  40400d:	0f 84 35 f6 ff ff    	je     403648 <main.cold+0x67>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  404013:	48 8b 85 20 e0 ff ff 	mov    -0x1fe0(%rbp),%rax
  40401a:	48 8d 70 01          	lea    0x1(%rax),%rsi
  40401e:	e8 fd f1 ff ff       	call   403220 <_ZdlPvm@plt>
  404023:	e9 20 f6 ff ff       	jmp    403648 <main.cold+0x67>
  404028:	48 8d bd 70 e0 ff ff 	lea    -0x1f90(%rbp),%rdi
  40402f:	e8 cc f2 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
  404034:	e9 90 f6 ff ff       	jmp    4036c9 <main.cold+0xe8>
  404039:	48 8d bd 70 e0 ff ff 	lea    -0x1f90(%rbp),%rdi
  404040:	e8 bb f2 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
  404045:	e9 96 f6 ff ff       	jmp    4036e0 <main.cold+0xff>

000000000040404a <.annobin_abi_note.c.exit>:
  40404a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000404050 <_GLOBAL__sub_I__Z17char_to_stringbitB5cxx11c>:
}
  404050:	48 83 ec 08          	sub    $0x8,%rsp
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  ///@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
  404054:	bf 2d c4 40 00       	mov    $0x40c42d,%edi
  404059:	e8 12 f3 ff ff       	call   403370 <_ZNSt8ios_base4InitC1Ev@plt>
  40405e:	ba 08 90 40 00       	mov    $0x409008,%edx
  404063:	be 2d c4 40 00       	mov    $0x40c42d,%esi
  404068:	bf d0 34 40 00       	mov    $0x4034d0,%edi
  40406d:	48 83 c4 08          	add    $0x8,%rsp
  404071:	e9 8a f1 ff ff       	jmp    403200 <__cxa_atexit@plt>
  404076:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  40407d:	00 00 00 

0000000000404080 <main>:
{
  404080:	55                   	push   %rbp
  404081:	48 89 e5             	mov    %rsp,%rbp
  404084:	41 57                	push   %r15
  404086:	41 56                	push   %r14
  404088:	41 55                	push   %r13
  40408a:	41 54                	push   %r12
  40408c:	53                   	push   %rbx
  40408d:	48 89 f3             	mov    %rsi,%rbx
  404090:	48 81 ec 58 21 00 00 	sub    $0x2158,%rsp
	if(argc < 2){
  404097:	83 ff 01             	cmp    $0x1,%edi
  40409a:	0f 8e 5b 2b 00 00    	jle    406bfb <main+0x2b7b>
	if((fd = open(argv[1], O_RDWR)) < 0){
  4040a0:	48 8b 7e 08          	mov    0x8(%rsi),%rdi
  4040a4:	31 c0                	xor    %eax,%eax
  4040a6:	be 02 00 00 00       	mov    $0x2,%esi
  4040ab:	e8 e0 f0 ff ff       	call   403190 <open@plt>
  4040b0:	41 89 c7             	mov    %eax,%r15d
  4040b3:	85 c0                	test   %eax,%eax
  4040b5:	0f 88 2b 2c 00 00    	js     406ce6 <main+0x2c66>
	sf::VideoMode videomode(800, 600);
  4040bb:	ba 58 02 00 00       	mov    $0x258,%edx
  4040c0:	be 20 03 00 00       	mov    $0x320,%esi
  4040c5:	b9 20 00 00 00       	mov    $0x20,%ecx
  4040ca:	48 8d bd 44 df ff ff 	lea    -0x20bc(%rbp),%rdi
  4040d1:	e8 ca f0 ff ff       	call   4031a0 <_ZN2sf9VideoModeC1Ejjj@plt>
    /// \param attributes   Attribute flags of the context
    /// \param sRgb         sRGB capable framebuffer
    ///
    ////////////////////////////////////////////////////////////
    explicit ContextSettings(unsigned int depth = 0, unsigned int stencil = 0, unsigned int antialiasing = 0, unsigned int major = 1, unsigned int minor = 1, unsigned int attributes = Default, bool sRgb = false) :
    depthBits        (depth),
  4040d6:	66 0f 6f 05 c2 54 00 	movdqa 0x54c2(%rip),%xmm0        # 4095a0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x100>
  4040dd:	00 
    stencilBits      (stencil),
    antialiasingLevel(antialiasing),
    majorVersion     (major),
    minorVersion     (minor),
  4040de:	48 8b 05 93 54 00 00 	mov    0x5493(%rip),%rax        # 409578 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xd8>
	sf::RenderWindow window(videomode, "Project IHS", sf::Style::Titlebar | sf::Style::Default); //close button and not resizable
  4040e5:	48 8d bd 80 f9 ff ff 	lea    -0x680(%rbp),%rdi
    attributeFlags   (attributes),
    sRgbCapable      (sRgb)
  4040ec:	c6 85 f8 fa ff ff 00 	movb   $0x0,-0x508(%rbp)
    minorVersion     (minor),
  4040f3:	48 89 85 f0 fa ff ff 	mov    %rax,-0x510(%rbp)
    depthBits        (depth),
  4040fa:	0f 29 85 e0 fa ff ff 	movaps %xmm0,-0x520(%rbp)
  404101:	e8 ba f3 ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  404106:	48 8d 95 80 f9 ff ff 	lea    -0x680(%rbp),%rdx
  40410d:	be 9a 90 40 00       	mov    $0x40909a,%esi
  404112:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  404119:	e8 d2 ef ff ff       	call   4030f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  40411e:	48 8b b5 44 df ff ff 	mov    -0x20bc(%rbp),%rsi
  404125:	8b 95 4c df ff ff    	mov    -0x20b4(%rbp),%edx
  40412b:	4c 8d 8d e0 fa ff ff 	lea    -0x520(%rbp),%r9
  404132:	41 b8 07 00 00 00    	mov    $0x7,%r8d
  404138:	48 8d 8d 50 fc ff ff 	lea    -0x3b0(%rbp),%rcx
  40413f:	48 8d bd c0 fd ff ff 	lea    -0x240(%rbp),%rdi
  404146:	e8 f5 f1 ff ff       	call   403340 <_ZN2sf12RenderWindowC1ENS_9VideoModeERKNS_6StringEjRKNS_15ContextSettingsE@plt>
      { return _M_dataplus._M_p; }
  40414b:	48 8b bd 50 fc ff ff 	mov    -0x3b0(%rbp),%rdi
	if (!_M_is_local())
  404152:	48 8d 85 60 fc ff ff 	lea    -0x3a0(%rbp),%rax
  404159:	48 39 c7             	cmp    %rax,%rdi
  40415c:	74 14                	je     404172 <main+0xf2>
  40415e:	48 8b 85 60 fc ff ff 	mov    -0x3a0(%rbp),%rax
  404165:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  40416c:	00 
  40416d:	e8 ae f0 ff ff       	call   403220 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  404172:	48 8d bd 80 f9 ff ff 	lea    -0x680(%rbp),%rdi
  404179:	e8 82 f1 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
	sf::CircleShape square1(30, 4);
  40417e:	f3 0f 10 05 4a 54 00 	movss  0x544a(%rip),%xmm0        # 4095d0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  404185:	00 
  404186:	be 04 00 00 00       	mov    $0x4,%esi
  40418b:	48 8d bd 20 e2 ff ff 	lea    -0x1de0(%rbp),%rdi
  404192:	e8 29 f0 ff ff       	call   4031c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square1.setFillColor(sf::Color::Magenta);
  404197:	be 10 c4 40 00       	mov    $0x40c410,%esi
  40419c:	48 8d bd 20 e2 ff ff 	lea    -0x1de0(%rbp),%rdi
  4041a3:	e8 e8 f2 ff ff       	call   403490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square1.setPosition(20.f, 50.f);
  4041a8:	f3 0f 10 0d 24 54 00 	movss  0x5424(%rip),%xmm1        # 4095d4 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x134>
  4041af:	00 
  4041b0:	f3 0f 10 05 20 54 00 	movss  0x5420(%rip),%xmm0        # 4095d8 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x138>
  4041b7:	00 
  4041b8:	48 8d bd 28 e2 ff ff 	lea    -0x1dd8(%rbp),%rdi
  4041bf:	e8 6c ef ff ff       	call   403130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square2(30, 4);
  4041c4:	f3 0f 10 05 04 54 00 	movss  0x5404(%rip),%xmm0        # 4095d0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  4041cb:	00 
  4041cc:	be 04 00 00 00       	mov    $0x4,%esi
  4041d1:	48 8d bd 80 e3 ff ff 	lea    -0x1c80(%rbp),%rdi
  4041d8:	e8 e3 ef ff ff       	call   4031c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square2.setFillColor(sf::Color::Magenta);
  4041dd:	be 10 c4 40 00       	mov    $0x40c410,%esi
  4041e2:	48 8d bd 80 e3 ff ff 	lea    -0x1c80(%rbp),%rdi
  4041e9:	e8 a2 f2 ff ff       	call   403490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square2.setPosition(100.f, 50.f);
  4041ee:	f3 0f 10 0d de 53 00 	movss  0x53de(%rip),%xmm1        # 4095d4 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x134>
  4041f5:	00 
  4041f6:	f3 0f 10 05 de 53 00 	movss  0x53de(%rip),%xmm0        # 4095dc <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x13c>
  4041fd:	00 
  4041fe:	48 8d bd 88 e3 ff ff 	lea    -0x1c78(%rbp),%rdi
  404205:	e8 26 ef ff ff       	call   403130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square3(30, 4);
  40420a:	f3 0f 10 05 be 53 00 	movss  0x53be(%rip),%xmm0        # 4095d0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  404211:	00 
  404212:	be 04 00 00 00       	mov    $0x4,%esi
  404217:	48 8d bd e0 e4 ff ff 	lea    -0x1b20(%rbp),%rdi
  40421e:	e8 9d ef ff ff       	call   4031c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square3.setFillColor(sf::Color::Blue);
  404223:	be 28 c4 40 00       	mov    $0x40c428,%esi
  404228:	48 8d bd e0 e4 ff ff 	lea    -0x1b20(%rbp),%rdi
  40422f:	e8 5c f2 ff ff       	call   403490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square3.setPosition(180.f, 50.f);
  404234:	f3 0f 10 0d 98 53 00 	movss  0x5398(%rip),%xmm1        # 4095d4 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x134>
  40423b:	00 
  40423c:	f3 0f 10 05 9c 53 00 	movss  0x539c(%rip),%xmm0        # 4095e0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x140>
  404243:	00 
  404244:	48 8d bd e8 e4 ff ff 	lea    -0x1b18(%rbp),%rdi
  40424b:	e8 e0 ee ff ff       	call   403130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square4(30, 4);
  404250:	f3 0f 10 05 78 53 00 	movss  0x5378(%rip),%xmm0        # 4095d0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  404257:	00 
  404258:	be 04 00 00 00       	mov    $0x4,%esi
  40425d:	48 8d bd 40 e6 ff ff 	lea    -0x19c0(%rbp),%rdi
  404264:	e8 57 ef ff ff       	call   4031c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square4.setFillColor(sf::Color::Magenta);
  404269:	be 10 c4 40 00       	mov    $0x40c410,%esi
  40426e:	48 8d bd 40 e6 ff ff 	lea    -0x19c0(%rbp),%rdi
  404275:	e8 16 f2 ff ff       	call   403490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square4.setPosition(20.f, 120.f);
  40427a:	f3 0f 10 0d 62 53 00 	movss  0x5362(%rip),%xmm1        # 4095e4 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x144>
  404281:	00 
  404282:	f3 0f 10 05 4e 53 00 	movss  0x534e(%rip),%xmm0        # 4095d8 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x138>
  404289:	00 
  40428a:	48 8d bd 48 e6 ff ff 	lea    -0x19b8(%rbp),%rdi
  404291:	e8 9a ee ff ff       	call   403130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square5(30, 4);
  404296:	f3 0f 10 05 32 53 00 	movss  0x5332(%rip),%xmm0        # 4095d0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  40429d:	00 
  40429e:	be 04 00 00 00       	mov    $0x4,%esi
  4042a3:	48 8d bd a0 e7 ff ff 	lea    -0x1860(%rbp),%rdi
  4042aa:	e8 11 ef ff ff       	call   4031c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square5.setFillColor(sf::Color::Blue);
  4042af:	be 28 c4 40 00       	mov    $0x40c428,%esi
  4042b4:	48 8d bd a0 e7 ff ff 	lea    -0x1860(%rbp),%rdi
  4042bb:	e8 d0 f1 ff ff       	call   403490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square5.setPosition(100.f, 120.f);
  4042c0:	f3 0f 10 0d 1c 53 00 	movss  0x531c(%rip),%xmm1        # 4095e4 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x144>
  4042c7:	00 
  4042c8:	f3 0f 10 05 0c 53 00 	movss  0x530c(%rip),%xmm0        # 4095dc <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x13c>
  4042cf:	00 
  4042d0:	48 8d bd a8 e7 ff ff 	lea    -0x1858(%rbp),%rdi
  4042d7:	e8 54 ee ff ff       	call   403130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square6(30, 4);
  4042dc:	f3 0f 10 05 ec 52 00 	movss  0x52ec(%rip),%xmm0        # 4095d0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  4042e3:	00 
  4042e4:	be 04 00 00 00       	mov    $0x4,%esi
  4042e9:	48 8d bd 00 e9 ff ff 	lea    -0x1700(%rbp),%rdi
  4042f0:	e8 cb ee ff ff       	call   4031c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square6.setFillColor(sf::Color::Magenta);
  4042f5:	be 10 c4 40 00       	mov    $0x40c410,%esi
  4042fa:	48 8d bd 00 e9 ff ff 	lea    -0x1700(%rbp),%rdi
  404301:	e8 8a f1 ff ff       	call   403490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square6.setPosition(180.f, 120.f);
  404306:	f3 0f 10 0d d6 52 00 	movss  0x52d6(%rip),%xmm1        # 4095e4 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x144>
  40430d:	00 
  40430e:	f3 0f 10 05 ca 52 00 	movss  0x52ca(%rip),%xmm0        # 4095e0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x140>
  404315:	00 
  404316:	48 8d bd 08 e9 ff ff 	lea    -0x16f8(%rbp),%rdi
  40431d:	e8 0e ee ff ff       	call   403130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square7(30, 4);
  404322:	f3 0f 10 05 a6 52 00 	movss  0x52a6(%rip),%xmm0        # 4095d0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  404329:	00 
  40432a:	be 04 00 00 00       	mov    $0x4,%esi
  40432f:	48 8d bd 60 ea ff ff 	lea    -0x15a0(%rbp),%rdi
  404336:	e8 85 ee ff ff       	call   4031c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square7.setFillColor(sf::Color::Blue);
  40433b:	be 28 c4 40 00       	mov    $0x40c428,%esi
  404340:	48 8d bd 60 ea ff ff 	lea    -0x15a0(%rbp),%rdi
  404347:	e8 44 f1 ff ff       	call   403490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square7.setPosition(20.f, 190.f);
  40434c:	f3 0f 10 0d 94 52 00 	movss  0x5294(%rip),%xmm1        # 4095e8 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x148>
  404353:	00 
  404354:	f3 0f 10 05 7c 52 00 	movss  0x527c(%rip),%xmm0        # 4095d8 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x138>
  40435b:	00 
  40435c:	48 8d bd 68 ea ff ff 	lea    -0x1598(%rbp),%rdi
  404363:	e8 c8 ed ff ff       	call   403130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square8(30, 4);
  404368:	f3 0f 10 05 60 52 00 	movss  0x5260(%rip),%xmm0        # 4095d0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  40436f:	00 
  404370:	be 04 00 00 00       	mov    $0x4,%esi
  404375:	48 8d bd c0 eb ff ff 	lea    -0x1440(%rbp),%rdi
  40437c:	e8 3f ee ff ff       	call   4031c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square8.setFillColor(sf::Color::Magenta);
  404381:	be 10 c4 40 00       	mov    $0x40c410,%esi
  404386:	48 8d bd c0 eb ff ff 	lea    -0x1440(%rbp),%rdi
  40438d:	e8 fe f0 ff ff       	call   403490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square8.setPosition(100.f, 190.f);
  404392:	f3 0f 10 0d 4e 52 00 	movss  0x524e(%rip),%xmm1        # 4095e8 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x148>
  404399:	00 
  40439a:	f3 0f 10 05 3a 52 00 	movss  0x523a(%rip),%xmm0        # 4095dc <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x13c>
  4043a1:	00 
  4043a2:	48 8d bd c8 eb ff ff 	lea    -0x1438(%rbp),%rdi
  4043a9:	e8 82 ed ff ff       	call   403130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square9(30, 4);
  4043ae:	f3 0f 10 05 1a 52 00 	movss  0x521a(%rip),%xmm0        # 4095d0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  4043b5:	00 
  4043b6:	be 04 00 00 00       	mov    $0x4,%esi
  4043bb:	48 8d bd 20 ed ff ff 	lea    -0x12e0(%rbp),%rdi
  4043c2:	e8 f9 ed ff ff       	call   4031c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square9.setFillColor(sf::Color::Blue);
  4043c7:	be 28 c4 40 00       	mov    $0x40c428,%esi
  4043cc:	48 8d bd 20 ed ff ff 	lea    -0x12e0(%rbp),%rdi
  4043d3:	e8 b8 f0 ff ff       	call   403490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square9.setPosition(180.f, 190.f);
  4043d8:	f3 0f 10 0d 08 52 00 	movss  0x5208(%rip),%xmm1        # 4095e8 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x148>
  4043df:	00 
  4043e0:	f3 0f 10 05 f8 51 00 	movss  0x51f8(%rip),%xmm0        # 4095e0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x140>
  4043e7:	00 
  4043e8:	48 8d bd 28 ed ff ff 	lea    -0x12d8(%rbp),%rdi
  4043ef:	e8 3c ed ff ff       	call   403130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square10(30, 4);
  4043f4:	f3 0f 10 05 d4 51 00 	movss  0x51d4(%rip),%xmm0        # 4095d0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  4043fb:	00 
  4043fc:	be 04 00 00 00       	mov    $0x4,%esi
  404401:	48 8d bd 80 ee ff ff 	lea    -0x1180(%rbp),%rdi
  404408:	e8 b3 ed ff ff       	call   4031c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square10.setFillColor(sf::Color::Magenta);
  40440d:	be 10 c4 40 00       	mov    $0x40c410,%esi
  404412:	48 8d bd 80 ee ff ff 	lea    -0x1180(%rbp),%rdi
  404419:	e8 72 f0 ff ff       	call   403490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square10.setPosition(20.f, 260.f);
  40441e:	f3 0f 10 0d c6 51 00 	movss  0x51c6(%rip),%xmm1        # 4095ec <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x14c>
  404425:	00 
  404426:	f3 0f 10 05 aa 51 00 	movss  0x51aa(%rip),%xmm0        # 4095d8 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x138>
  40442d:	00 
  40442e:	48 8d bd 88 ee ff ff 	lea    -0x1178(%rbp),%rdi
  404435:	e8 f6 ec ff ff       	call   403130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square11(30, 4);
  40443a:	f3 0f 10 05 8e 51 00 	movss  0x518e(%rip),%xmm0        # 4095d0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  404441:	00 
  404442:	be 04 00 00 00       	mov    $0x4,%esi
  404447:	48 8d bd e0 ef ff ff 	lea    -0x1020(%rbp),%rdi
  40444e:	e8 6d ed ff ff       	call   4031c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square11.setFillColor(sf::Color::Magenta);
  404453:	be 10 c4 40 00       	mov    $0x40c410,%esi
  404458:	48 8d bd e0 ef ff ff 	lea    -0x1020(%rbp),%rdi
  40445f:	e8 2c f0 ff ff       	call   403490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square11.setPosition(100.f, 260.f);
  404464:	f3 0f 10 0d 80 51 00 	movss  0x5180(%rip),%xmm1        # 4095ec <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x14c>
  40446b:	00 
  40446c:	f3 0f 10 05 68 51 00 	movss  0x5168(%rip),%xmm0        # 4095dc <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x13c>
  404473:	00 
  404474:	48 8d bd e8 ef ff ff 	lea    -0x1018(%rbp),%rdi
  40447b:	e8 b0 ec ff ff       	call   403130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square12(30, 4);
  404480:	f3 0f 10 05 48 51 00 	movss  0x5148(%rip),%xmm0        # 4095d0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  404487:	00 
  404488:	be 04 00 00 00       	mov    $0x4,%esi
  40448d:	48 8d bd 40 f1 ff ff 	lea    -0xec0(%rbp),%rdi
  404494:	e8 27 ed ff ff       	call   4031c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square12.setFillColor(sf::Color::Magenta);
  404499:	be 10 c4 40 00       	mov    $0x40c410,%esi
  40449e:	48 8d bd 40 f1 ff ff 	lea    -0xec0(%rbp),%rdi
  4044a5:	e8 e6 ef ff ff       	call   403490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square12.setPosition(180.f, 260.f);
  4044aa:	f3 0f 10 0d 3a 51 00 	movss  0x513a(%rip),%xmm1        # 4095ec <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x14c>
  4044b1:	00 
  4044b2:	f3 0f 10 05 26 51 00 	movss  0x5126(%rip),%xmm0        # 4095e0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x140>
  4044b9:	00 
  4044ba:	48 8d bd 48 f1 ff ff 	lea    -0xeb8(%rbp),%rdi
  4044c1:	e8 6a ec ff ff       	call   403130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square13(30, 4);
  4044c6:	f3 0f 10 05 02 51 00 	movss  0x5102(%rip),%xmm0        # 4095d0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  4044cd:	00 
  4044ce:	be 04 00 00 00       	mov    $0x4,%esi
  4044d3:	48 8d bd a0 f2 ff ff 	lea    -0xd60(%rbp),%rdi
  4044da:	e8 e1 ec ff ff       	call   4031c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square13.setFillColor(sf::Color::Magenta);
  4044df:	be 10 c4 40 00       	mov    $0x40c410,%esi
  4044e4:	48 8d bd a0 f2 ff ff 	lea    -0xd60(%rbp),%rdi
  4044eb:	e8 a0 ef ff ff       	call   403490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square13.setPosition(20.f, 330.f);
  4044f0:	f3 0f 10 0d f8 50 00 	movss  0x50f8(%rip),%xmm1        # 4095f0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x150>
  4044f7:	00 
  4044f8:	f3 0f 10 05 d8 50 00 	movss  0x50d8(%rip),%xmm0        # 4095d8 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x138>
  4044ff:	00 
  404500:	48 8d bd a8 f2 ff ff 	lea    -0xd58(%rbp),%rdi
  404507:	e8 24 ec ff ff       	call   403130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square14(30, 4);
  40450c:	f3 0f 10 05 bc 50 00 	movss  0x50bc(%rip),%xmm0        # 4095d0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  404513:	00 
  404514:	be 04 00 00 00       	mov    $0x4,%esi
  404519:	48 8d bd 00 f4 ff ff 	lea    -0xc00(%rbp),%rdi
  404520:	e8 9b ec ff ff       	call   4031c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square14.setFillColor(sf::Color::Blue);
  404525:	be 28 c4 40 00       	mov    $0x40c428,%esi
  40452a:	48 8d bd 00 f4 ff ff 	lea    -0xc00(%rbp),%rdi
  404531:	e8 5a ef ff ff       	call   403490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square14.setPosition(100.f, 330.f);
  404536:	f3 0f 10 0d b2 50 00 	movss  0x50b2(%rip),%xmm1        # 4095f0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x150>
  40453d:	00 
  40453e:	f3 0f 10 05 96 50 00 	movss  0x5096(%rip),%xmm0        # 4095dc <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x13c>
  404545:	00 
  404546:	48 8d bd 08 f4 ff ff 	lea    -0xbf8(%rbp),%rdi
  40454d:	e8 de eb ff ff       	call   403130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square15(30, 4);
  404552:	f3 0f 10 05 76 50 00 	movss  0x5076(%rip),%xmm0        # 4095d0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  404559:	00 
  40455a:	be 04 00 00 00       	mov    $0x4,%esi
  40455f:	48 8d bd 60 f5 ff ff 	lea    -0xaa0(%rbp),%rdi
  404566:	e8 55 ec ff ff       	call   4031c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square15.setFillColor(sf::Color::Magenta);
  40456b:	be 10 c4 40 00       	mov    $0x40c410,%esi
  404570:	48 8d bd 60 f5 ff ff 	lea    -0xaa0(%rbp),%rdi
  404577:	e8 14 ef ff ff       	call   403490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square15.setPosition(180.f, 330.f);
  40457c:	f3 0f 10 0d 6c 50 00 	movss  0x506c(%rip),%xmm1        # 4095f0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x150>
  404583:	00 
  404584:	f3 0f 10 05 54 50 00 	movss  0x5054(%rip),%xmm0        # 4095e0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x140>
  40458b:	00 
  40458c:	48 8d bd 68 f5 ff ff 	lea    -0xa98(%rbp),%rdi
  404593:	e8 98 eb ff ff       	call   403130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square16(30, 4);
  404598:	f3 0f 10 05 30 50 00 	movss  0x5030(%rip),%xmm0        # 4095d0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  40459f:	00 
  4045a0:	be 04 00 00 00       	mov    $0x4,%esi
  4045a5:	48 8d bd c0 f6 ff ff 	lea    -0x940(%rbp),%rdi
  4045ac:	e8 0f ec ff ff       	call   4031c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square16.setFillColor(sf::Color::Blue);
  4045b1:	be 28 c4 40 00       	mov    $0x40c428,%esi
  4045b6:	48 8d bd c0 f6 ff ff 	lea    -0x940(%rbp),%rdi
  4045bd:	e8 ce ee ff ff       	call   403490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square16.setPosition(20.f, 400.f);
  4045c2:	f3 0f 10 0d 2a 50 00 	movss  0x502a(%rip),%xmm1        # 4095f4 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x154>
  4045c9:	00 
  4045ca:	f3 0f 10 05 06 50 00 	movss  0x5006(%rip),%xmm0        # 4095d8 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x138>
  4045d1:	00 
  4045d2:	48 8d bd c8 f6 ff ff 	lea    -0x938(%rbp),%rdi
  4045d9:	e8 52 eb ff ff       	call   403130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square17(30, 4);
  4045de:	f3 0f 10 05 ea 4f 00 	movss  0x4fea(%rip),%xmm0        # 4095d0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  4045e5:	00 
  4045e6:	be 04 00 00 00       	mov    $0x4,%esi
  4045eb:	48 8d bd 20 f8 ff ff 	lea    -0x7e0(%rbp),%rdi
  4045f2:	e8 c9 eb ff ff       	call   4031c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square17.setFillColor(sf::Color::Magenta);
  4045f7:	be 10 c4 40 00       	mov    $0x40c410,%esi
  4045fc:	48 8d bd 20 f8 ff ff 	lea    -0x7e0(%rbp),%rdi
  404603:	e8 88 ee ff ff       	call   403490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square17.setPosition(100.f, 400.f);
  404608:	f3 0f 10 0d e4 4f 00 	movss  0x4fe4(%rip),%xmm1        # 4095f4 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x154>
  40460f:	00 
  404610:	f3 0f 10 05 c4 4f 00 	movss  0x4fc4(%rip),%xmm0        # 4095dc <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x13c>
  404617:	00 
  404618:	48 8d bd 28 f8 ff ff 	lea    -0x7d8(%rbp),%rdi
  40461f:	e8 0c eb ff ff       	call   403130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square18(30, 4);
  404624:	f3 0f 10 05 a4 4f 00 	movss  0x4fa4(%rip),%xmm0        # 4095d0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  40462b:	00 
  40462c:	be 04 00 00 00       	mov    $0x4,%esi
  404631:	48 8d bd 80 f9 ff ff 	lea    -0x680(%rbp),%rdi
  404638:	e8 83 eb ff ff       	call   4031c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square18.setFillColor(sf::Color::Blue);
  40463d:	be 28 c4 40 00       	mov    $0x40c428,%esi
  404642:	48 8d bd 80 f9 ff ff 	lea    -0x680(%rbp),%rdi
  404649:	e8 42 ee ff ff       	call   403490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square18.setPosition(180.f, 400.f);
  40464e:	f3 0f 10 0d 9e 4f 00 	movss  0x4f9e(%rip),%xmm1        # 4095f4 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x154>
  404655:	00 
  404656:	f3 0f 10 05 82 4f 00 	movss  0x4f82(%rip),%xmm0        # 4095e0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x140>
  40465d:	00 
  40465e:	48 8d bd 88 f9 ff ff 	lea    -0x678(%rbp),%rdi
  404665:	e8 c6 ea ff ff       	call   403130 <_ZN2sf13Transformable11setPositionEff@plt>
	window.setFramerateLimit(12);
  40466a:	be 0c 00 00 00       	mov    $0xc,%esi
  40466f:	48 8d bd c0 fd ff ff 	lea    -0x240(%rbp),%rdi
  404676:	e8 35 ec ff ff       	call   4032b0 <_ZN2sf6Window17setFramerateLimitEj@plt>
	sf::Font font;
  40467b:	48 8d bd c0 e0 ff ff 	lea    -0x1f40(%rbp),%rdi
  404682:	e8 29 ea ff ff       	call   4030b0 <_ZN2sf4FontC1Ev@plt>
	font.loadFromFile("/home/de2i-150/Desktop/Projeto-IHS/IHS-Project/ihs-project-layout/app/fonts/Hack-Regular.ttf");
  404687:	48 8d 95 e0 fa ff ff 	lea    -0x520(%rbp),%rdx
  40468e:	be e0 91 40 00       	mov    $0x4091e0,%esi
  404693:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  40469a:	e8 41 3a 00 00       	call   4080e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
  40469f:	48 8d b5 50 fc ff ff 	lea    -0x3b0(%rbp),%rsi
  4046a6:	48 8d bd c0 e0 ff ff 	lea    -0x1f40(%rbp),%rdi
  4046ad:	e8 5e eb ff ff       	call   403210 <_ZN2sf4Font12loadFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>
      { return _M_dataplus._M_p; }
  4046b2:	48 8b bd 50 fc ff ff 	mov    -0x3b0(%rbp),%rdi
	if (!_M_is_local())
  4046b9:	48 8d 85 60 fc ff ff 	lea    -0x3a0(%rbp),%rax
  4046c0:	48 39 c7             	cmp    %rax,%rdi
  4046c3:	74 10                	je     4046d5 <main+0x655>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4046c5:	48 8b 85 60 fc ff ff 	mov    -0x3a0(%rbp),%rax
  4046cc:	48 8d 70 01          	lea    0x1(%rax),%rsi
	::operator delete(__p
  4046d0:	e8 4b eb ff ff       	call   403220 <_ZdlPvm@plt>
	sf::Text text("", font, 16);
  4046d5:	48 8d bd 50 e1 ff ff 	lea    -0x1eb0(%rbp),%rdi
  4046dc:	e8 df ed ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  4046e1:	48 8d 95 50 e1 ff ff 	lea    -0x1eb0(%rbp),%rdx
  4046e8:	be ed 90 40 00       	mov    $0x4090ed,%esi
  4046ed:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  4046f4:	e8 f7 e9 ff ff       	call   4030f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  4046f9:	b9 10 00 00 00       	mov    $0x10,%ecx
  4046fe:	48 8d 95 c0 e0 ff ff 	lea    -0x1f40(%rbp),%rdx
  404705:	48 8d b5 50 fc ff ff 	lea    -0x3b0(%rbp),%rsi
  40470c:	48 8d bd e0 fa ff ff 	lea    -0x520(%rbp),%rdi
  404713:	e8 d8 ea ff ff       	call   4031f0 <_ZN2sf4TextC1ERKNS_6StringERKNS_4FontEj@plt>
      { return _M_dataplus._M_p; }
  404718:	48 8b bd 50 fc ff ff 	mov    -0x3b0(%rbp),%rdi
	if (!_M_is_local())
  40471f:	48 8d 85 60 fc ff ff 	lea    -0x3a0(%rbp),%rax
  404726:	48 39 c7             	cmp    %rax,%rdi
  404729:	74 14                	je     40473f <main+0x6bf>
  40472b:	48 8b 85 60 fc ff ff 	mov    -0x3a0(%rbp),%rax
  404732:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  404739:	00 
  40473a:	e8 e1 ea ff ff       	call   403220 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  40473f:	48 8d bd 50 e1 ff ff 	lea    -0x1eb0(%rbp),%rdi
  404746:	e8 b5 eb ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
	text.setFillColor(sf::Color(39, 225, 122));
  40474b:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  404751:	b9 7a 00 00 00       	mov    $0x7a,%ecx
  404756:	ba e1 00 00 00       	mov    $0xe1,%edx
  40475b:	be 27 00 00 00       	mov    $0x27,%esi
  404760:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  404767:	e8 94 e9 ff ff       	call   403100 <_ZN2sf5ColorC1Ehhhh@plt>
  40476c:	48 8d b5 50 fc ff ff 	lea    -0x3b0(%rbp),%rsi
  404773:	48 8d bd e0 fa ff ff 	lea    -0x520(%rbp),%rdi
  40477a:	e8 21 ed ff ff       	call   4034a0 <_ZN2sf4Text12setFillColorERKNS_5ColorE@plt>
	sf::Text challenge1_text("", font, 16);
  40477f:	48 8d bd 70 e0 ff ff 	lea    -0x1f90(%rbp),%rdi
  404786:	e8 35 ed ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  40478b:	48 8d 95 70 e0 ff ff 	lea    -0x1f90(%rbp),%rdx
  404792:	be ed 90 40 00       	mov    $0x4090ed,%esi
  404797:	48 8d bd 50 e1 ff ff 	lea    -0x1eb0(%rbp),%rdi
  40479e:	e8 4d e9 ff ff       	call   4030f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  4047a3:	b9 10 00 00 00       	mov    $0x10,%ecx
  4047a8:	48 8d 95 c0 e0 ff ff 	lea    -0x1f40(%rbp),%rdx
  4047af:	48 8d b5 50 e1 ff ff 	lea    -0x1eb0(%rbp),%rsi
  4047b6:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  4047bd:	e8 2e ea ff ff       	call   4031f0 <_ZN2sf4TextC1ERKNS_6StringERKNS_4FontEj@plt>
      { return _M_dataplus._M_p; }
  4047c2:	48 8b bd 50 e1 ff ff 	mov    -0x1eb0(%rbp),%rdi
	if (!_M_is_local())
  4047c9:	48 8d 85 60 e1 ff ff 	lea    -0x1ea0(%rbp),%rax
  4047d0:	48 39 c7             	cmp    %rax,%rdi
  4047d3:	74 14                	je     4047e9 <main+0x769>
	::operator delete(__p
  4047d5:	48 8b 85 60 e1 ff ff 	mov    -0x1ea0(%rbp),%rax
  4047dc:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4047e3:	00 
  4047e4:	e8 37 ea ff ff       	call   403220 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  4047e9:	48 8d bd 70 e0 ff ff 	lea    -0x1f90(%rbp),%rdi
  4047f0:	e8 0b eb ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
	challenge1_text.setFillColor(sf::Color(39, 225, 122));
  4047f5:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  4047fb:	b9 7a 00 00 00       	mov    $0x7a,%ecx
  404800:	ba e1 00 00 00       	mov    $0xe1,%edx
  404805:	be 27 00 00 00       	mov    $0x27,%esi
  40480a:	48 8d bd 50 e1 ff ff 	lea    -0x1eb0(%rbp),%rdi
  404811:	e8 ea e8 ff ff       	call   403100 <_ZN2sf5ColorC1Ehhhh@plt>
  404816:	48 8d b5 50 e1 ff ff 	lea    -0x1eb0(%rbp),%rsi
  40481d:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  404824:	e8 77 ec ff ff       	call   4034a0 <_ZN2sf4Text12setFillColorERKNS_5ColorE@plt>
	sf::Music typing;
  404829:	48 8d bd 50 e1 ff ff 	lea    -0x1eb0(%rbp),%rdi
  404830:	e8 3b e8 ff ff       	call   403070 <_ZN2sf5MusicC1Ev@plt>
	if (!typing.openFromFile("/home/de2i-150/Desktop/Projeto-IHS/IHS-Project/ihs-project-layout/app/assets/sounds/typing.ogg"))
  404835:	48 8d 95 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdx
  40483c:	be 40 92 40 00       	mov    $0x409240,%esi
  404841:	48 8d bd 70 e0 ff ff 	lea    -0x1f90(%rbp),%rdi
  404848:	e8 93 38 00 00       	call   4080e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
  40484d:	48 8d b5 70 e0 ff ff 	lea    -0x1f90(%rbp),%rsi
  404854:	48 8d bd 50 e1 ff ff 	lea    -0x1eb0(%rbp),%rdi
  40485b:	e8 20 e8 ff ff       	call   403080 <_ZN2sf5Music12openFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>
      { return _M_dataplus._M_p; }
  404860:	48 8b bd 70 e0 ff ff 	mov    -0x1f90(%rbp),%rdi
  404867:	89 c3                	mov    %eax,%ebx
	if (!_M_is_local())
  404869:	48 8d 85 80 e0 ff ff 	lea    -0x1f80(%rbp),%rax
  404870:	48 39 c7             	cmp    %rax,%rdi
  404873:	74 10                	je     404885 <main+0x805>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  404875:	48 8b 85 80 e0 ff ff 	mov    -0x1f80(%rbp),%rax
  40487c:	48 8d 70 01          	lea    0x1(%rax),%rsi
	::operator delete(__p
  404880:	e8 9b e9 ff ff       	call   403220 <_ZdlPvm@plt>
  404885:	84 db                	test   %bl,%bl
  404887:	0f 84 84 1e 00 00    	je     406711 <main+0x2691>
	sf::String typedtext = "[root@mbois ~] $ Ola, vejo que voce encontrou minha caixa...\n\n[root@mbois ~] $ Espero (ou nao) que voce consiga completar\nos desafios que preparei para hoje.\n\n[root@mbois ~] $ Mas cuidado com o tempo e tente nao perder\na cabeca!!\n\n[root@mbois ~] $ ASS ?";
  40488d:	48 8d bd 70 e0 ff ff 	lea    -0x1f90(%rbp),%rdi
  404894:	e8 27 ec ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  404899:	48 8d 95 70 e0 ff ff 	lea    -0x1f90(%rbp),%rdx
  4048a0:	be c0 92 40 00       	mov    $0x4092c0,%esi
  4048a5:	48 8d bd 90 df ff ff 	lea    -0x2070(%rbp),%rdi
  4048ac:	e8 3f e8 ff ff       	call   4030f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  4048b1:	48 8d bd 70 e0 ff ff 	lea    -0x1f90(%rbp),%rdi
  4048b8:	e8 43 ea ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
	sf::String challenge1_string = "[root@mbois ~] $ Voce deveria saber matematica";
  4048bd:	48 8d bd 70 e0 ff ff 	lea    -0x1f90(%rbp),%rdi
  4048c4:	e8 f7 eb ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  4048c9:	48 8d 95 70 e0 ff ff 	lea    -0x1f90(%rbp),%rdx
  4048d0:	be c0 93 40 00       	mov    $0x4093c0,%esi
  4048d5:	48 8d bd b0 df ff ff 	lea    -0x2050(%rbp),%rdi
  4048dc:	e8 0f e8 ff ff       	call   4030f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  4048e1:	48 8d bd 70 e0 ff ff 	lea    -0x1f90(%rbp),%rdi
  4048e8:	e8 13 ea ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
	sf::Clock clock_text;
  4048ed:	48 8d bd 00 df ff ff 	lea    -0x2100(%rbp),%rdi
  4048f4:	e8 e7 e9 ff ff       	call   4032e0 <_ZN2sf5ClockC1Ev@plt>
	sf::Time elapsedtime_text;
  4048f9:	48 8d bd 08 df ff ff 	lea    -0x20f8(%rbp),%rdi
  404900:	e8 4b e7 ff ff       	call   403050 <_ZN2sf4TimeC1Ev@plt>
	sf::Clock temp_clock;
  404905:	48 8d bd 10 df ff ff 	lea    -0x20f0(%rbp),%rdi
  40490c:	e8 cf e9 ff ff       	call   4032e0 <_ZN2sf5ClockC1Ev@plt>
	sf::Time temp_time;
  404911:	48 8d bd 18 df ff ff 	lea    -0x20e8(%rbp),%rdi
  404918:	e8 33 e7 ff ff       	call   403050 <_ZN2sf4TimeC1Ev@plt>
	sf::Clock clock_bomb;
  40491d:	48 8d bd 20 df ff ff 	lea    -0x20e0(%rbp),%rdi
  404924:	e8 b7 e9 ff ff       	call   4032e0 <_ZN2sf5ClockC1Ev@plt>
	sf::Time time_bomb;
  404929:	48 8d bd 28 df ff ff 	lea    -0x20d8(%rbp),%rdi
  404930:	e8 1b e7 ff ff       	call   403050 <_ZN2sf4TimeC1Ev@plt>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  404935:	48 8d 85 e0 df ff ff 	lea    -0x2020(%rbp),%rax
	unsigned int oldSwitches = 0x0AA15;
  40493c:	bb 15 aa 00 00       	mov    $0xaa15,%ebx
      { _M_string_length = __length; }
  404941:	48 c7 85 d8 df ff ff 	movq   $0x0,-0x2028(%rbp)
  404948:	00 00 00 00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  40494c:	48 89 85 d0 df ff ff 	mov    %rax,-0x2030(%rbp)
  404953:	48 8d 85 00 e0 ff ff 	lea    -0x2000(%rbp),%rax
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { __c1 = __c2; }
  40495a:	c6 85 e0 df ff ff 00 	movb   $0x0,-0x2020(%rbp)
  404961:	48 89 85 f0 df ff ff 	mov    %rax,-0x2010(%rbp)
      { _M_string_length = __length; }
  404968:	48 c7 85 f8 df ff ff 	movq   $0x0,-0x2008(%rbp)
  40496f:	00 00 00 00 
  404973:	c6 85 00 e0 ff ff 00 	movb   $0x0,-0x2000(%rbp)
	int flag_correct = 1;
  40497a:	c7 85 88 de ff ff 01 	movl   $0x1,-0x2178(%rbp)
  404981:	00 00 00 
	int flag = 1;
  404984:	c7 85 9c de ff ff 01 	movl   $0x1,-0x2164(%rbp)
  40498b:	00 00 00 
	int old_button = 0xF;
  40498e:	c7 85 8c de ff ff 0f 	movl   $0xf,-0x2174(%rbp)
  404995:	00 00 00 
	unsigned int switches = 0x00000;
  404998:	c7 85 a8 de ff ff 00 	movl   $0x0,-0x2158(%rbp)
  40499f:	00 00 00 
	int screen = 0;
  4049a2:	c7 85 ac de ff ff 00 	movl   $0x0,-0x2154(%rbp)
  4049a9:	00 00 00 
  4049ac:	0f 1f 40 00          	nopl   0x0(%rax)
	while (window.isOpen())
  4049b0:	48 8d bd c0 fd ff ff 	lea    -0x240(%rbp),%rdi
  4049b7:	e8 84 e8 ff ff       	call   403240 <_ZNK2sf6Window6isOpenEv@plt>
  4049bc:	84 c0                	test   %al,%al
  4049be:	75 16                	jne    4049d6 <main+0x956>
  4049c0:	e9 02 1a 00 00       	jmp    4063c7 <main+0x2347>
  4049c5:	0f 1f 00             	nopl   (%rax)
			if (event.type == sf::Event::Closed)
  4049c8:	8b b5 50 df ff ff    	mov    -0x20b0(%rbp),%esi
  4049ce:	85 f6                	test   %esi,%esi
  4049d0:	0f 84 3a 0c 00 00    	je     405610 <main+0x1590>
		while (window.pollEvent(event))
  4049d6:	48 8d b5 50 df ff ff 	lea    -0x20b0(%rbp),%rsi
  4049dd:	48 8d bd c0 fd ff ff 	lea    -0x240(%rbp),%rdi
  4049e4:	e8 f7 e7 ff ff       	call   4031e0 <_ZN2sf6Window9pollEventERNS_5EventE@plt>
  4049e9:	84 c0                	test   %al,%al
  4049eb:	75 db                	jne    4049c8 <main+0x948>
		window.clear(sf::Color(48, 49, 52));
  4049ed:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  4049f3:	b9 34 00 00 00       	mov    $0x34,%ecx
  4049f8:	ba 31 00 00 00       	mov    $0x31,%edx
  4049fd:	be 30 00 00 00       	mov    $0x30,%esi
  404a02:	48 8d bd 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdi
  404a09:	e8 f2 e6 ff ff       	call   403100 <_ZN2sf5ColorC1Ehhhh@plt>
  404a0e:	48 8d b5 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rsi
  404a15:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  404a1c:	e8 5f e7 ff ff       	call   403180 <_ZN2sf12RenderTarget5clearERKNS_5ColorE@plt>
		if(screen == 0){
  404a21:	8b 85 ac de ff ff    	mov    -0x2154(%rbp),%eax
  404a27:	85 c0                	test   %eax,%eax
  404a29:	0f 84 f9 0b 00 00    	je     405628 <main+0x15a8>
		if (screen != 1 && screen != 6)
  404a2f:	83 f8 01             	cmp    $0x1,%eax
  404a32:	74 56                	je     404a8a <main+0xa0a>
  404a34:	83 f8 06             	cmp    $0x6,%eax
  404a37:	74 51                	je     404a8a <main+0xa0a>
			time_bomb = clock_bomb.getElapsedTime();
  404a39:	48 8d bd 20 df ff ff 	lea    -0x20e0(%rbp),%rdi
  404a40:	e8 5b e9 ff ff       	call   4033a0 <_ZNK2sf5Clock14getElapsedTimeEv@plt>
			seconds = 300 - time_bomb.asSeconds();
  404a45:	48 8d bd 28 df ff ff 	lea    -0x20d8(%rbp),%rdi
			time_bomb = clock_bomb.getElapsedTime();
  404a4c:	48 89 85 28 df ff ff 	mov    %rax,-0x20d8(%rbp)
			seconds = 300 - time_bomb.asSeconds();
  404a53:	e8 d8 e9 ff ff       	call   403430 <_ZNK2sf4Time9asSecondsEv@plt>
  404a58:	0f 28 c8             	movaps %xmm0,%xmm1
  404a5b:	f3 0f 10 05 95 4b 00 	movss  0x4b95(%rip),%xmm0        # 4095f8 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x158>
  404a62:	00 
			int_to_string(fd, seconds, min_string, sec_string);		
  404a63:	48 8d 8d d0 df ff ff 	lea    -0x2030(%rbp),%rcx
  404a6a:	44 89 ff             	mov    %r15d,%edi
  404a6d:	48 8d 95 f0 df ff ff 	lea    -0x2010(%rbp),%rdx
			seconds = 300 - time_bomb.asSeconds();
  404a74:	f3 0f 5c c1          	subss  %xmm1,%xmm0
  404a78:	f3 4c 0f 2c f0       	cvttss2si %xmm0,%r14
  404a7d:	44 89 f6             	mov    %r14d,%esi
			int_to_string(fd, seconds, min_string, sec_string);		
  404a80:	e8 5b 2d 00 00       	call   4077e0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
			if (seconds <= 0)
  404a85:	45 85 f6             	test   %r14d,%r14d
  404a88:	74 16                	je     404aa0 <main+0xa20>
		switch (screen) {
  404a8a:	8b 85 ac de ff ff    	mov    -0x2154(%rbp),%eax
  404a90:	83 f8 06             	cmp    $0x6,%eax
  404a93:	0f 87 74 01 00 00    	ja     404c0d <main+0xb8d>
  404a99:	ff 24 c5 58 91 40 00 	jmp    *0x409158(,%rax,8)
				text.setString("");
  404aa0:	4c 8d b5 30 e0 ff ff 	lea    -0x1fd0(%rbp),%r14
  404aa7:	4c 89 f7             	mov    %r14,%rdi
  404aaa:	e8 11 ea ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  404aaf:	4c 89 f2             	mov    %r14,%rdx
  404ab2:	be ed 90 40 00       	mov    $0x4090ed,%esi
  404ab7:	48 8d bd 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdi
  404abe:	e8 2d e6 ff ff       	call   4030f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  404ac3:	48 8d b5 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rsi
  404aca:	48 8d bd e0 fa ff ff 	lea    -0x520(%rbp),%rdi
  404ad1:	e8 8a e9 ff ff       	call   403460 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  404ad6:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  404add:	48 8d 85 60 e0 ff ff 	lea    -0x1fa0(%rbp),%rax
  404ae4:	48 89 85 b0 de ff ff 	mov    %rax,-0x2150(%rbp)
  404aeb:	48 39 c7             	cmp    %rax,%rdi
  404aee:	74 14                	je     404b04 <main+0xa84>
  404af0:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  404af7:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  404afe:	00 
  404aff:	e8 1c e7 ff ff       	call   403220 <_ZdlPvm@plt>
  404b04:	4c 89 f7             	mov    %r14,%rdi
  404b07:	e8 f4 e7 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
				typedtext.insert(0, "BOOM!!!");
  404b0c:	4c 89 f7             	mov    %r14,%rdi
  404b0f:	e8 ac e9 ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  404b14:	4c 89 f2             	mov    %r14,%rdx
  404b17:	be a6 90 40 00       	mov    $0x4090a6,%esi
  404b1c:	48 8d bd 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdi
  404b23:	e8 c8 e5 ff ff       	call   4030f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  404b28:	48 8d 95 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdx
  404b2f:	31 f6                	xor    %esi,%esi
  404b31:	48 8d bd 90 df ff ff 	lea    -0x2070(%rbp),%rdi
  404b38:	e8 73 e6 ff ff       	call   4031b0 <_ZN2sf6String6insertEmRKS0_@plt>
      { return _M_dataplus._M_p; }
  404b3d:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  404b44:	48 3b bd b0 de ff ff 	cmp    -0x2150(%rbp),%rdi
  404b4b:	74 14                	je     404b61 <main+0xae1>
  404b4d:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  404b54:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  404b5b:	00 
  404b5c:	e8 bf e6 ff ff       	call   403220 <_ZdlPvm@plt>
  404b61:	4c 89 f7             	mov    %r14,%rdi
  404b64:	e8 97 e7 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
				clock_text.restart();
  404b69:	48 8d bd 00 df ff ff 	lea    -0x2100(%rbp),%rdi
  404b70:	e8 5b e8 ff ff       	call   4033d0 <_ZN2sf5Clock7restartEv@plt>
				elapsedtime_text += clock_text.restart();
  404b75:	48 8d bd 00 df ff ff 	lea    -0x2100(%rbp),%rdi
  404b7c:	e8 4f e8 ff ff       	call   4033d0 <_ZN2sf5Clock7restartEv@plt>
  404b81:	48 89 c6             	mov    %rax,%rsi
  404b84:	48 8d bd 08 df ff ff 	lea    -0x20f8(%rbp),%rdi
  404b8b:	e8 30 e8 ff ff       	call   4033c0 <_ZN2sfpLERNS_4TimeES0_@plt>
  404b90:	44 8b 35 6d 4a 00 00 	mov    0x4a6d(%rip),%r14d        # 409604 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x164>
  404b97:	eb 35                	jmp    404bce <main+0xb4e>
  404b99:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
					elapsedtime_text -= sf::seconds(.1f);
  404ba0:	66 41 0f 6e c6       	movd   %r14d,%xmm0
  404ba5:	e8 a6 e5 ff ff       	call   403150 <_ZN2sf7secondsEf@plt>
  404baa:	48 89 c6             	mov    %rax,%rsi
  404bad:	48 8d bd 08 df ff ff 	lea    -0x20f8(%rbp),%rdi
  404bb4:	e8 47 e8 ff ff       	call   403400 <_ZN2sfmIERNS_4TimeES0_@plt>
					if (typedtext.getSize() > 0)
  404bb9:	48 8d bd 90 df ff ff 	lea    -0x2070(%rbp),%rdi
  404bc0:	e8 9b e7 ff ff       	call   403360 <_ZNK2sf6String7getSizeEv@plt>
  404bc5:	48 85 c0             	test   %rax,%rax
  404bc8:	0f 85 5a 0f 00 00    	jne    405b28 <main+0x1aa8>
				while (elapsedtime_text >= sf::seconds(.1f))
  404bce:	66 41 0f 6e c6       	movd   %r14d,%xmm0
  404bd3:	e8 78 e5 ff ff       	call   403150 <_ZN2sf7secondsEf@plt>
  404bd8:	48 8b bd 08 df ff ff 	mov    -0x20f8(%rbp),%rdi
  404bdf:	48 89 c6             	mov    %rax,%rsi
  404be2:	e8 b9 e6 ff ff       	call   4032a0 <_ZN2sfgeENS_4TimeES0_@plt>
  404be7:	84 c0                	test   %al,%al
  404be9:	75 b5                	jne    404ba0 <main+0xb20>
				window.draw(text);
  404beb:	ba 80 c2 40 00       	mov    $0x40c280,%edx
  404bf0:	48 8d b5 e0 fa ff ff 	lea    -0x520(%rbp),%rsi
  404bf7:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  404bfe:	e8 ed e7 ff ff       	call   4033f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
  404c03:	c7 85 ac de ff ff 06 	movl   $0x6,-0x2154(%rbp)
  404c0a:	00 00 00 
		window.display();
  404c0d:	48 8d bd c0 fd ff ff 	lea    -0x240(%rbp),%rdi
  404c14:	e8 b7 e6 ff ff       	call   4032d0 <_ZN2sf6Window7displayEv@plt>
  404c19:	e9 92 fd ff ff       	jmp    4049b0 <main+0x930>
				elapsedtime_text += clock_text.restart();
  404c1e:	48 8d bd 00 df ff ff 	lea    -0x2100(%rbp),%rdi
  404c25:	e8 a6 e7 ff ff       	call   4033d0 <_ZN2sf5Clock7restartEv@plt>
  404c2a:	48 89 c6             	mov    %rax,%rsi
  404c2d:	48 8d bd 08 df ff ff 	lea    -0x20f8(%rbp),%rdi
  404c34:	e8 87 e7 ff ff       	call   4033c0 <_ZN2sfpLERNS_4TimeES0_@plt>
  404c39:	44 8b 35 c4 49 00 00 	mov    0x49c4(%rip),%r14d        # 409604 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x164>
  404c40:	eb 34                	jmp    404c76 <main+0xbf6>
  404c42:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
					elapsedtime_text -= sf::seconds(.1f);
  404c48:	66 41 0f 6e c6       	movd   %r14d,%xmm0
  404c4d:	e8 fe e4 ff ff       	call   403150 <_ZN2sf7secondsEf@plt>
  404c52:	48 89 c6             	mov    %rax,%rsi
  404c55:	48 8d bd 08 df ff ff 	lea    -0x20f8(%rbp),%rdi
  404c5c:	e8 9f e7 ff ff       	call   403400 <_ZN2sfmIERNS_4TimeES0_@plt>
					if (typedtext.getSize() > 0)
  404c61:	48 8d bd 90 df ff ff 	lea    -0x2070(%rbp),%rdi
  404c68:	e8 f3 e6 ff ff       	call   403360 <_ZNK2sf6String7getSizeEv@plt>
  404c6d:	48 85 c0             	test   %rax,%rax
  404c70:	0f 85 9e 15 00 00    	jne    406214 <main+0x2194>
				while (elapsedtime_text >= sf::seconds(.1f))
  404c76:	66 41 0f 6e c6       	movd   %r14d,%xmm0
  404c7b:	e8 d0 e4 ff ff       	call   403150 <_ZN2sf7secondsEf@plt>
  404c80:	48 8b bd 08 df ff ff 	mov    -0x20f8(%rbp),%rdi
  404c87:	48 89 c6             	mov    %rax,%rsi
  404c8a:	e8 11 e6 ff ff       	call   4032a0 <_ZN2sfgeENS_4TimeES0_@plt>
  404c8f:	84 c0                	test   %al,%al
  404c91:	75 b5                	jne    404c48 <main+0xbc8>
				window.draw(text);
  404c93:	ba 80 c2 40 00       	mov    $0x40c280,%edx
  404c98:	48 8d b5 e0 fa ff ff 	lea    -0x520(%rbp),%rsi
  404c9f:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  404ca6:	e8 45 e7 ff ff       	call   4033f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				int seqGreenLeds[BUTTON_AMOUNT] = {48, 12, 192, 48, 3, 48}; // 2^4+2^5, 2^2+2^3, 2^6+2^7, 2^0+2^1
  404cab:	66 0f 6f 25 fd 48 00 	movdqa 0x48fd(%rip),%xmm4        # 4095b0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x110>
  404cb2:	00 
  404cb3:	48 8b 05 ce 48 00 00 	mov    0x48ce(%rip),%rax        # 409588 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe8>
				temp_time = temp_clock.getElapsedTime();
  404cba:	48 8d bd 10 df ff ff 	lea    -0x20f0(%rbp),%rdi
				int seqGreenLeds[BUTTON_AMOUNT] = {48, 12, 192, 48, 3, 48}; // 2^4+2^5, 2^2+2^3, 2^6+2^7, 2^0+2^1
  404cc1:	48 89 85 20 e0 ff ff 	mov    %rax,-0x1fe0(%rbp)
  404cc8:	0f 29 a5 10 e0 ff ff 	movaps %xmm4,-0x1ff0(%rbp)
				temp_time = temp_clock.getElapsedTime();
  404ccf:	e8 cc e6 ff ff       	call   4033a0 <_ZNK2sf5Clock14getElapsedTimeEv@plt>
				if(temp_time >= sf::seconds(3.0f) && i < BUTTON_AMOUNT && flag){
  404cd4:	f3 0f 10 05 2c 49 00 	movss  0x492c(%rip),%xmm0        # 409608 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x168>
  404cdb:	00 
				temp_time = temp_clock.getElapsedTime();
  404cdc:	48 89 85 18 df ff ff 	mov    %rax,-0x20e8(%rbp)
				if(temp_time >= sf::seconds(3.0f) && i < BUTTON_AMOUNT && flag){
  404ce3:	e8 68 e4 ff ff       	call   403150 <_ZN2sf7secondsEf@plt>
  404ce8:	48 8b bd 18 df ff ff 	mov    -0x20e8(%rbp),%rdi
  404cef:	48 89 c6             	mov    %rax,%rsi
  404cf2:	e8 a9 e5 ff ff       	call   4032a0 <_ZN2sfgeENS_4TimeES0_@plt>
  404cf7:	0f b6 95 9c de ff ff 	movzbl -0x2164(%rbp),%edx
  404cfe:	84 c0                	test   %al,%al
  404d00:	0f 85 a0 19 00 00    	jne    4066a6 <main+0x2626>
				else if (i >= BUTTON_AMOUNT && flag && temp_time >= sf::seconds(3.0f)){
  404d06:	83 bd 98 de ff ff 05 	cmpl   $0x5,-0x2168(%rbp)
  404d0d:	7e 08                	jle    404d17 <main+0xc97>
  404d0f:	84 d2                	test   %dl,%dl
  404d11:	0f 85 fd 1e 00 00    	jne    406c14 <main+0x2b94>
				int answer[BUTTON_AMOUNT] = {11, 13, 7, 11, 14, 11}; // 0xB, 0xD, 0x7, 0xE
  404d17:	48 8b 05 72 48 00 00 	mov    0x4872(%rip),%rax        # 409590 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xf0>
  404d1e:	66 0f 6f 2d 9a 48 00 	movdqa 0x489a(%rip),%xmm5        # 4095c0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x120>
  404d25:	00 
	ioctl(fd, RD_PBUTTONS);
  404d26:	be 62 61 00 00       	mov    $0x6162,%esi
  404d2b:	44 89 ff             	mov    %r15d,%edi
				int answer[BUTTON_AMOUNT] = {11, 13, 7, 11, 14, 11}; // 0xB, 0xD, 0x7, 0xE
  404d2e:	48 89 85 40 e0 ff ff 	mov    %rax,-0x1fc0(%rbp)
				int button = readButton(fd, button);
  404d35:	8b 85 94 de ff ff    	mov    -0x216c(%rbp),%eax
				int answer[BUTTON_AMOUNT] = {11, 13, 7, 11, 14, 11}; // 0xB, 0xD, 0x7, 0xE
  404d3b:	0f 29 ad 30 e0 ff ff 	movaps %xmm5,-0x1fd0(%rbp)
  404d42:	89 85 50 e0 ff ff    	mov    %eax,-0x1fb0(%rbp)
	ioctl(fd, RD_PBUTTONS);
  404d48:	31 c0                	xor    %eax,%eax
  404d4a:	e8 a1 e5 ff ff       	call   4032f0 <ioctl@plt>
	read(fd, &data, 1);
  404d4f:	ba 01 00 00 00       	mov    $0x1,%edx
  404d54:	48 8d b5 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rsi
  404d5b:	44 89 ff             	mov    %r15d,%edi
  404d5e:	e8 bd e5 ff ff       	call   403320 <read@plt>
	return data;
  404d63:	8b 8d 50 e0 ff ff    	mov    -0x1fb0(%rbp),%ecx
  404d69:	89 8d 94 de ff ff    	mov    %ecx,-0x216c(%rbp)
				if(button != 0xF && button != old_button && j < BUTTON_AMOUNT){
  404d6f:	83 f9 0f             	cmp    $0xf,%ecx
  404d72:	0f 84 71 1e 00 00    	je     406be9 <main+0x2b69>
  404d78:	39 8d 8c de ff ff    	cmp    %ecx,-0x2174(%rbp)
  404d7e:	0f 84 65 1e 00 00    	je     406be9 <main+0x2b69>
  404d84:	8b 95 90 de ff ff    	mov    -0x2170(%rbp),%edx
  404d8a:	83 fa 06             	cmp    $0x6,%edx
  404d8d:	0f 85 3d 1e 00 00    	jne    406bd0 <main+0x2b50>
					printf("%d %d %d %d %d %d\n", input[0], input[1], input[2], input[3], input[4], input[5]);
  404d93:	8b 85 84 df ff ff    	mov    -0x207c(%rbp),%eax
  404d99:	51                   	push   %rcx
  404d9a:	bf db 90 40 00       	mov    $0x4090db,%edi
  404d9f:	44 8b 8d 80 df ff ff 	mov    -0x2080(%rbp),%r9d
  404da6:	44 8b 85 7c df ff ff 	mov    -0x2084(%rbp),%r8d
  404dad:	8b 8d 78 df ff ff    	mov    -0x2088(%rbp),%ecx
  404db3:	8b 95 74 df ff ff    	mov    -0x208c(%rbp),%edx
  404db9:	50                   	push   %rax
  404dba:	31 c0                	xor    %eax,%eax
  404dbc:	8b b5 70 df ff ff    	mov    -0x2090(%rbp),%esi
  404dc2:	e8 79 e2 ff ff       	call   403040 <printf@plt>
  404dc7:	58                   	pop    %rax
  404dc8:	4c 8d b5 30 e0 ff ff 	lea    -0x1fd0(%rbp),%r14
  404dcf:	5a                   	pop    %rdx
  404dd0:	31 c0                	xor    %eax,%eax
						if(answer[k] != input[k]){
  404dd2:	41 8b 34 06          	mov    (%r14,%rax,1),%esi
  404dd6:	8b 94 05 70 df ff ff 	mov    -0x2090(%rbp,%rax,1),%edx
  404ddd:	39 d6                	cmp    %edx,%esi
  404ddf:	0f 85 22 1f 00 00    	jne    406d07 <main+0x2c87>
					for (int k = 0; k < BUTTON_AMOUNT; k++){
  404de5:	48 83 c0 04          	add    $0x4,%rax
  404de9:	48 83 f8 18          	cmp    $0x18,%rax
  404ded:	75 e3                	jne    404dd2 <main+0xd52>
					if(flag_correct){
  404def:	83 bd 88 de ff ff 00 	cmpl   $0x0,-0x2178(%rbp)
  404df6:	c7 85 90 de ff ff 06 	movl   $0x6,-0x2170(%rbp)
  404dfd:	00 00 00 
  404e00:	0f 84 07 fe ff ff    	je     404c0d <main+0xb8d>
						text.setString("");
  404e06:	48 8d 85 38 df ff ff 	lea    -0x20c8(%rbp),%rax
  404e0d:	49 89 c6             	mov    %rax,%r14
  404e10:	48 89 c7             	mov    %rax,%rdi
  404e13:	48 89 85 c0 de ff ff 	mov    %rax,-0x2140(%rbp)
  404e1a:	e8 a1 e6 ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  404e1f:	4c 89 f2             	mov    %r14,%rdx
  404e22:	be ed 90 40 00       	mov    $0x4090ed,%esi
  404e27:	48 8d bd 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdi
  404e2e:	e8 bd e2 ff ff       	call   4030f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  404e33:	48 8d b5 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rsi
  404e3a:	48 8d bd e0 fa ff ff 	lea    -0x520(%rbp),%rdi
  404e41:	e8 1a e6 ff ff       	call   403460 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  404e46:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  404e4d:	48 8d 85 60 e0 ff ff 	lea    -0x1fa0(%rbp),%rax
  404e54:	48 89 85 b0 de ff ff 	mov    %rax,-0x2150(%rbp)
  404e5b:	48 39 c7             	cmp    %rax,%rdi
  404e5e:	74 14                	je     404e74 <main+0xdf4>
  404e60:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  404e67:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  404e6e:	00 
  404e6f:	e8 ac e3 ff ff       	call   403220 <_ZdlPvm@plt>
  404e74:	4c 8b b5 c0 de ff ff 	mov    -0x2140(%rbp),%r14
  404e7b:	4c 89 f7             	mov    %r14,%rdi
  404e7e:	e8 7d e4 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
						typedtext.insert(0, "Quinta fase");
  404e83:	4c 89 f7             	mov    %r14,%rdi
  404e86:	e8 35 e6 ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  404e8b:	4c 89 f2             	mov    %r14,%rdx
  404e8e:	be fb 90 40 00       	mov    $0x4090fb,%esi
  404e93:	48 8d bd 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdi
  404e9a:	e8 51 e2 ff ff       	call   4030f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  404e9f:	48 8d 95 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdx
  404ea6:	31 f6                	xor    %esi,%esi
  404ea8:	48 8d bd 90 df ff ff 	lea    -0x2070(%rbp),%rdi
  404eaf:	e8 fc e2 ff ff       	call   4031b0 <_ZN2sf6String6insertEmRKS0_@plt>
      { return _M_dataplus._M_p; }
  404eb4:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  404ebb:	48 3b bd b0 de ff ff 	cmp    -0x2150(%rbp),%rdi
  404ec2:	74 14                	je     404ed8 <main+0xe58>
  404ec4:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  404ecb:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  404ed2:	00 
  404ed3:	e8 48 e3 ff ff       	call   403220 <_ZdlPvm@plt>
  404ed8:	48 8b bd c0 de ff ff 	mov    -0x2140(%rbp),%rdi
  404edf:	e8 1c e4 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
						clock_text.restart();
  404ee4:	48 8d bd 00 df ff ff 	lea    -0x2100(%rbp),%rdi
  404eeb:	e8 e0 e4 ff ff       	call   4033d0 <_ZN2sf5Clock7restartEv@plt>
  404ef0:	c7 85 90 de ff ff 06 	movl   $0x6,-0x2170(%rbp)
  404ef7:	00 00 00 
						screen = 5;
  404efa:	c7 85 ac de ff ff 05 	movl   $0x5,-0x2154(%rbp)
  404f01:	00 00 00 
  404f04:	e9 04 fd ff ff       	jmp    404c0d <main+0xb8d>
				elapsedtime_text += clock_text.restart();
  404f09:	48 8d bd 00 df ff ff 	lea    -0x2100(%rbp),%rdi
  404f10:	e8 bb e4 ff ff       	call   4033d0 <_ZN2sf5Clock7restartEv@plt>
  404f15:	48 89 c6             	mov    %rax,%rsi
  404f18:	48 8d bd 08 df ff ff 	lea    -0x20f8(%rbp),%rdi
  404f1f:	e8 9c e4 ff ff       	call   4033c0 <_ZN2sfpLERNS_4TimeES0_@plt>
  404f24:	44 8b 35 d9 46 00 00 	mov    0x46d9(%rip),%r14d        # 409604 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x164>
  404f2b:	eb 31                	jmp    404f5e <main+0xede>
  404f2d:	0f 1f 00             	nopl   (%rax)
					elapsedtime_text -= sf::seconds(.1f);
  404f30:	66 41 0f 6e c6       	movd   %r14d,%xmm0
  404f35:	e8 16 e2 ff ff       	call   403150 <_ZN2sf7secondsEf@plt>
  404f3a:	48 89 c6             	mov    %rax,%rsi
  404f3d:	48 8d bd 08 df ff ff 	lea    -0x20f8(%rbp),%rdi
  404f44:	e8 b7 e4 ff ff       	call   403400 <_ZN2sfmIERNS_4TimeES0_@plt>
					if (typedtext.getSize() > 0)
  404f49:	48 8d bd 90 df ff ff 	lea    -0x2070(%rbp),%rdi
  404f50:	e8 0b e4 ff ff       	call   403360 <_ZNK2sf6String7getSizeEv@plt>
  404f55:	48 85 c0             	test   %rax,%rax
  404f58:	0f 85 03 11 00 00    	jne    406061 <main+0x1fe1>
				while (elapsedtime_text >= sf::seconds(.1f))
  404f5e:	66 41 0f 6e c6       	movd   %r14d,%xmm0
  404f63:	e8 e8 e1 ff ff       	call   403150 <_ZN2sf7secondsEf@plt>
  404f68:	48 8b bd 08 df ff ff 	mov    -0x20f8(%rbp),%rdi
  404f6f:	48 89 c6             	mov    %rax,%rsi
  404f72:	e8 29 e3 ff ff       	call   4032a0 <_ZN2sfgeENS_4TimeES0_@plt>
  404f77:	84 c0                	test   %al,%al
  404f79:	75 b5                	jne    404f30 <main+0xeb0>
				window.draw(text);
  404f7b:	ba 80 c2 40 00       	mov    $0x40c280,%edx
  404f80:	48 8d b5 e0 fa ff ff 	lea    -0x520(%rbp),%rsi
  404f87:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  404f8e:	e8 5d e4 ff ff       	call   4033f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square1);
  404f93:	ba 80 c2 40 00       	mov    $0x40c280,%edx
  404f98:	48 8d b5 20 e2 ff ff 	lea    -0x1de0(%rbp),%rsi
  404f9f:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  404fa6:	e8 45 e4 ff ff       	call   4033f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square2);
  404fab:	ba 80 c2 40 00       	mov    $0x40c280,%edx
  404fb0:	48 8d b5 80 e3 ff ff 	lea    -0x1c80(%rbp),%rsi
  404fb7:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  404fbe:	e8 2d e4 ff ff       	call   4033f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square3);
  404fc3:	ba 80 c2 40 00       	mov    $0x40c280,%edx
  404fc8:	48 8d b5 e0 e4 ff ff 	lea    -0x1b20(%rbp),%rsi
  404fcf:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  404fd6:	e8 15 e4 ff ff       	call   4033f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square4);
  404fdb:	ba 80 c2 40 00       	mov    $0x40c280,%edx
  404fe0:	48 8d b5 40 e6 ff ff 	lea    -0x19c0(%rbp),%rsi
  404fe7:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  404fee:	e8 fd e3 ff ff       	call   4033f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square5);
  404ff3:	ba 80 c2 40 00       	mov    $0x40c280,%edx
  404ff8:	48 8d b5 a0 e7 ff ff 	lea    -0x1860(%rbp),%rsi
  404fff:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  405006:	e8 e5 e3 ff ff       	call   4033f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square6);
  40500b:	ba 80 c2 40 00       	mov    $0x40c280,%edx
  405010:	48 8d b5 00 e9 ff ff 	lea    -0x1700(%rbp),%rsi
  405017:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  40501e:	e8 cd e3 ff ff       	call   4033f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square7);
  405023:	ba 80 c2 40 00       	mov    $0x40c280,%edx
  405028:	48 8d b5 60 ea ff ff 	lea    -0x15a0(%rbp),%rsi
  40502f:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  405036:	e8 b5 e3 ff ff       	call   4033f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square8);
  40503b:	ba 80 c2 40 00       	mov    $0x40c280,%edx
  405040:	48 8d b5 c0 eb ff ff 	lea    -0x1440(%rbp),%rsi
  405047:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  40504e:	e8 9d e3 ff ff       	call   4033f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square9);
  405053:	ba 80 c2 40 00       	mov    $0x40c280,%edx
  405058:	48 8d b5 20 ed ff ff 	lea    -0x12e0(%rbp),%rsi
  40505f:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  405066:	e8 85 e3 ff ff       	call   4033f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square10);
  40506b:	ba 80 c2 40 00       	mov    $0x40c280,%edx
  405070:	48 8d b5 80 ee ff ff 	lea    -0x1180(%rbp),%rsi
  405077:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  40507e:	e8 6d e3 ff ff       	call   4033f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square11);
  405083:	ba 80 c2 40 00       	mov    $0x40c280,%edx
  405088:	48 8d b5 e0 ef ff ff 	lea    -0x1020(%rbp),%rsi
  40508f:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  405096:	e8 55 e3 ff ff       	call   4033f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square12);
  40509b:	ba 80 c2 40 00       	mov    $0x40c280,%edx
  4050a0:	48 8d b5 40 f1 ff ff 	lea    -0xec0(%rbp),%rsi
  4050a7:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  4050ae:	e8 3d e3 ff ff       	call   4033f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square13);
  4050b3:	ba 80 c2 40 00       	mov    $0x40c280,%edx
  4050b8:	48 8d b5 a0 f2 ff ff 	lea    -0xd60(%rbp),%rsi
  4050bf:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  4050c6:	e8 25 e3 ff ff       	call   4033f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square14);
  4050cb:	ba 80 c2 40 00       	mov    $0x40c280,%edx
  4050d0:	48 8d b5 00 f4 ff ff 	lea    -0xc00(%rbp),%rsi
  4050d7:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  4050de:	e8 0d e3 ff ff       	call   4033f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square15);
  4050e3:	ba 80 c2 40 00       	mov    $0x40c280,%edx
  4050e8:	48 8d b5 60 f5 ff ff 	lea    -0xaa0(%rbp),%rsi
  4050ef:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  4050f6:	e8 f5 e2 ff ff       	call   4033f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square16);
  4050fb:	ba 80 c2 40 00       	mov    $0x40c280,%edx
  405100:	48 8d b5 c0 f6 ff ff 	lea    -0x940(%rbp),%rsi
  405107:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  40510e:	e8 dd e2 ff ff       	call   4033f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square17);
  405113:	ba 80 c2 40 00       	mov    $0x40c280,%edx
  405118:	48 8d b5 20 f8 ff ff 	lea    -0x7e0(%rbp),%rsi
  40511f:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  405126:	e8 c5 e2 ff ff       	call   4033f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square18);
  40512b:	ba 80 c2 40 00       	mov    $0x40c280,%edx
  405130:	48 8d b5 80 f9 ff ff 	lea    -0x680(%rbp),%rsi
  405137:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  40513e:	e8 ad e2 ff ff       	call   4033f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				switches = readSwitch(fd, switches);
  405143:	8b 85 a8 de ff ff    	mov    -0x2158(%rbp),%eax
	ioctl(fd, RD_SWITCHES);
  405149:	be 61 61 00 00       	mov    $0x6161,%esi
  40514e:	44 89 ff             	mov    %r15d,%edi
  405151:	89 85 f4 de ff ff    	mov    %eax,-0x210c(%rbp)
  405157:	31 c0                	xor    %eax,%eax
  405159:	e8 92 e1 ff ff       	call   4032f0 <ioctl@plt>
	read(fd, &data, 3);
  40515e:	ba 03 00 00 00       	mov    $0x3,%edx
  405163:	48 8d b5 f4 de ff ff 	lea    -0x210c(%rbp),%rsi
  40516a:	44 89 ff             	mov    %r15d,%edi
  40516d:	e8 ae e1 ff ff       	call   403320 <read@plt>
	return data;
  405172:	44 8b b5 f4 de ff ff 	mov    -0x210c(%rbp),%r14d
	ioctl(fd, WR_RED_LEDS);
  405179:	be 65 61 00 00       	mov    $0x6165,%esi
  40517e:	44 89 ff             	mov    %r15d,%edi
  405181:	31 c0                	xor    %eax,%eax
	return data;
  405183:	44 89 b5 a8 de ff ff 	mov    %r14d,-0x2158(%rbp)
				writeRedLed(fd, switches);
  40518a:	44 89 b5 f8 de ff ff 	mov    %r14d,-0x2108(%rbp)
	ioctl(fd, WR_RED_LEDS);
  405191:	e8 5a e1 ff ff       	call   4032f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  405196:	ba 04 00 00 00       	mov    $0x4,%edx
  40519b:	48 8d b5 f8 de ff ff 	lea    -0x2108(%rbp),%rsi
  4051a2:	44 89 ff             	mov    %r15d,%edi
  4051a5:	e8 36 df ff ff       	call   4030e0 <write@plt>
				if(switches == 0x0AA15){
  4051aa:	41 81 fe 15 aa 00 00 	cmp    $0xaa15,%r14d
  4051b1:	0f 85 56 fa ff ff    	jne    404c0d <main+0xb8d>
					text.setString("");
  4051b7:	4c 8d b5 30 e0 ff ff 	lea    -0x1fd0(%rbp),%r14
  4051be:	4c 89 f7             	mov    %r14,%rdi
  4051c1:	e8 fa e2 ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  4051c6:	4c 89 f2             	mov    %r14,%rdx
  4051c9:	be ed 90 40 00       	mov    $0x4090ed,%esi
  4051ce:	48 8d bd 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdi
  4051d5:	e8 16 df ff ff       	call   4030f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  4051da:	48 8d b5 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rsi
  4051e1:	48 8d bd e0 fa ff ff 	lea    -0x520(%rbp),%rdi
  4051e8:	e8 73 e2 ff ff       	call   403460 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  4051ed:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  4051f4:	48 8d 85 60 e0 ff ff 	lea    -0x1fa0(%rbp),%rax
  4051fb:	48 89 85 b0 de ff ff 	mov    %rax,-0x2150(%rbp)
  405202:	48 39 c7             	cmp    %rax,%rdi
  405205:	74 14                	je     40521b <main+0x119b>
  405207:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  40520e:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405215:	00 
  405216:	e8 05 e0 ff ff       	call   403220 <_ZdlPvm@plt>
  40521b:	4c 89 f7             	mov    %r14,%rdi
  40521e:	e8 dd e0 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
					typedtext.insert(0, "Tem alguma coisa piscando,\nvoce deveria prestar atencao");
  405223:	4c 89 f7             	mov    %r14,%rdi
  405226:	e8 95 e2 ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  40522b:	4c 89 f2             	mov    %r14,%rdx
  40522e:	be 60 94 40 00       	mov    $0x409460,%esi
  405233:	48 8d bd 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdi
  40523a:	e8 b1 de ff ff       	call   4030f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  40523f:	48 8d 95 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdx
  405246:	31 f6                	xor    %esi,%esi
  405248:	48 8d bd 90 df ff ff 	lea    -0x2070(%rbp),%rdi
  40524f:	e8 5c df ff ff       	call   4031b0 <_ZN2sf6String6insertEmRKS0_@plt>
      { return _M_dataplus._M_p; }
  405254:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  40525b:	48 3b bd b0 de ff ff 	cmp    -0x2150(%rbp),%rdi
  405262:	74 14                	je     405278 <main+0x11f8>
  405264:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  40526b:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405272:	00 
  405273:	e8 a8 df ff ff       	call   403220 <_ZdlPvm@plt>
  405278:	4c 89 f7             	mov    %r14,%rdi
  40527b:	e8 80 e0 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
					temp_clock.restart();
  405280:	48 8d bd 10 df ff ff 	lea    -0x20f0(%rbp),%rdi
  405287:	e8 44 e1 ff ff       	call   4033d0 <_ZN2sf5Clock7restartEv@plt>
	ioctl(fd, WR_GREEN_LEDS);
  40528c:	be 66 61 00 00       	mov    $0x6166,%esi
  405291:	44 89 ff             	mov    %r15d,%edi
  405294:	31 c0                	xor    %eax,%eax
  405296:	c7 85 fc de ff ff 00 	movl   $0x0,-0x2104(%rbp)
  40529d:	00 00 00 
  4052a0:	e8 4b e0 ff ff       	call   4032f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  4052a5:	ba 04 00 00 00       	mov    $0x4,%edx
  4052aa:	48 8d b5 fc de ff ff 	lea    -0x2104(%rbp),%rsi
  4052b1:	44 89 ff             	mov    %r15d,%edi
  4052b4:	e8 27 de ff ff       	call   4030e0 <write@plt>
					flag = 1;
  4052b9:	c7 85 9c de ff ff 01 	movl   $0x1,-0x2164(%rbp)
  4052c0:	00 00 00 
					old_button = 0xF;
  4052c3:	c7 85 8c de ff ff 0f 	movl   $0xf,-0x2174(%rbp)
  4052ca:	00 00 00 
					i = 0;
  4052cd:	c7 85 98 de ff ff 00 	movl   $0x0,-0x2168(%rbp)
  4052d4:	00 00 00 
					screen = 4;
  4052d7:	c7 85 ac de ff ff 04 	movl   $0x4,-0x2154(%rbp)
  4052de:	00 00 00 
  4052e1:	e9 27 f9 ff ff       	jmp    404c0d <main+0xb8d>
				elapsedtime_text += clock_text.restart();
  4052e6:	48 8d bd 00 df ff ff 	lea    -0x2100(%rbp),%rdi
  4052ed:	e8 de e0 ff ff       	call   4033d0 <_ZN2sf5Clock7restartEv@plt>
  4052f2:	48 89 c6             	mov    %rax,%rsi
  4052f5:	48 8d bd 08 df ff ff 	lea    -0x20f8(%rbp),%rdi
  4052fc:	e8 bf e0 ff ff       	call   4033c0 <_ZN2sfpLERNS_4TimeES0_@plt>
  405301:	44 8b 35 fc 42 00 00 	mov    0x42fc(%rip),%r14d        # 409604 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x164>
  405308:	eb 34                	jmp    40533e <main+0x12be>
  40530a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
					elapsedtime_text -= sf::seconds(.1f);
  405310:	66 41 0f 6e c6       	movd   %r14d,%xmm0
  405315:	e8 36 de ff ff       	call   403150 <_ZN2sf7secondsEf@plt>
  40531a:	48 89 c6             	mov    %rax,%rsi
  40531d:	48 8d bd 08 df ff ff 	lea    -0x20f8(%rbp),%rdi
  405324:	e8 d7 e0 ff ff       	call   403400 <_ZN2sfmIERNS_4TimeES0_@plt>
					if (typedtext.getSize() > 0)
  405329:	48 8d bd 90 df ff ff 	lea    -0x2070(%rbp),%rdi
  405330:	e8 2b e0 ff ff       	call   403360 <_ZNK2sf6String7getSizeEv@plt>
  405335:	48 85 c0             	test   %rax,%rax
  405338:	0f 85 70 0b 00 00    	jne    405eae <main+0x1e2e>
				while (elapsedtime_text >= sf::seconds(.1f))
  40533e:	66 41 0f 6e c6       	movd   %r14d,%xmm0
  405343:	e8 08 de ff ff       	call   403150 <_ZN2sf7secondsEf@plt>
  405348:	48 8b bd 08 df ff ff 	mov    -0x20f8(%rbp),%rdi
  40534f:	48 89 c6             	mov    %rax,%rsi
  405352:	e8 49 df ff ff       	call   4032a0 <_ZN2sfgeENS_4TimeES0_@plt>
  405357:	84 c0                	test   %al,%al
  405359:	75 b5                	jne    405310 <main+0x1290>
				window.draw(text);
  40535b:	ba 80 c2 40 00       	mov    $0x40c280,%edx
  405360:	48 8d b5 e0 fa ff ff 	lea    -0x520(%rbp),%rsi
  405367:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  40536e:	e8 7d e0 ff ff       	call   4033f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				switches = readSwitch(fd, switches);
  405373:	8b 85 a8 de ff ff    	mov    -0x2158(%rbp),%eax
	ioctl(fd, RD_SWITCHES);
  405379:	be 61 61 00 00       	mov    $0x6161,%esi
  40537e:	44 89 ff             	mov    %r15d,%edi
  405381:	89 85 30 df ff ff    	mov    %eax,-0x20d0(%rbp)
  405387:	31 c0                	xor    %eax,%eax
  405389:	e8 62 df ff ff       	call   4032f0 <ioctl@plt>
	read(fd, &data, 3);
  40538e:	ba 03 00 00 00       	mov    $0x3,%edx
  405393:	48 8d b5 30 df ff ff 	lea    -0x20d0(%rbp),%rsi
  40539a:	44 89 ff             	mov    %r15d,%edi
  40539d:	e8 7e df ff ff       	call   403320 <read@plt>
	return data;
  4053a2:	8b 85 30 df ff ff    	mov    -0x20d0(%rbp),%eax
  4053a8:	89 85 a8 de ff ff    	mov    %eax,-0x2158(%rbp)
				if(mask != 0){
  4053ae:	39 c3                	cmp    %eax,%ebx
  4053b0:	0f 85 9d 13 00 00    	jne    406753 <main+0x26d3>
				if (switches == 0x3FFFF)
  4053b6:	81 bd a8 de ff ff ff 	cmpl   $0x3ffff,-0x2158(%rbp)
  4053bd:	ff 03 00 
  4053c0:	0f 85 47 f8 ff ff    	jne    404c0d <main+0xb8d>
					window.clear(sf::Color::Green);
  4053c6:	be e8 c2 40 00       	mov    $0x40c2e8,%esi
  4053cb:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  4053d2:	e8 a9 dd ff ff       	call   403180 <_ZN2sf12RenderTarget5clearERKNS_5ColorE@plt>
  4053d7:	e9 31 f8 ff ff       	jmp    404c0d <main+0xb8d>
				elapsedtime_text += clock_text.restart();
  4053dc:	48 8d bd 00 df ff ff 	lea    -0x2100(%rbp),%rdi
  4053e3:	e8 e8 df ff ff       	call   4033d0 <_ZN2sf5Clock7restartEv@plt>
  4053e8:	48 89 c6             	mov    %rax,%rsi
  4053eb:	48 8d bd 08 df ff ff 	lea    -0x20f8(%rbp),%rdi
  4053f2:	e8 c9 df ff ff       	call   4033c0 <_ZN2sfpLERNS_4TimeES0_@plt>
  4053f7:	44 8b 35 06 42 00 00 	mov    0x4206(%rip),%r14d        # 409604 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x164>
  4053fe:	eb 2e                	jmp    40542e <main+0x13ae>
					elapsedtime_text -= sf::seconds(.1f);
  405400:	66 41 0f 6e c6       	movd   %r14d,%xmm0
  405405:	e8 46 dd ff ff       	call   403150 <_ZN2sf7secondsEf@plt>
  40540a:	48 89 c6             	mov    %rax,%rsi
  40540d:	48 8d bd 08 df ff ff 	lea    -0x20f8(%rbp),%rdi
  405414:	e8 e7 df ff ff       	call   403400 <_ZN2sfmIERNS_4TimeES0_@plt>
					if (typedtext.getSize() > 0)
  405419:	48 8d bd 90 df ff ff 	lea    -0x2070(%rbp),%rdi
  405420:	e8 3b df ff ff       	call   403360 <_ZNK2sf6String7getSizeEv@plt>
  405425:	48 85 c0             	test   %rax,%rax
  405428:	0f 85 cd 08 00 00    	jne    405cfb <main+0x1c7b>
				while (elapsedtime_text >= sf::seconds(.1f))
  40542e:	66 41 0f 6e c6       	movd   %r14d,%xmm0
  405433:	e8 18 dd ff ff       	call   403150 <_ZN2sf7secondsEf@plt>
  405438:	48 8b bd 08 df ff ff 	mov    -0x20f8(%rbp),%rdi
  40543f:	48 89 c6             	mov    %rax,%rsi
  405442:	e8 59 de ff ff       	call   4032a0 <_ZN2sfgeENS_4TimeES0_@plt>
  405447:	84 c0                	test   %al,%al
  405449:	75 b5                	jne    405400 <main+0x1380>
				window.draw(text);
  40544b:	ba 80 c2 40 00       	mov    $0x40c280,%edx
  405450:	48 8d b5 e0 fa ff ff 	lea    -0x520(%rbp),%rsi
  405457:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  40545e:	e8 8d df ff ff       	call   4033f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
	ioctl(fd, WR_R_DISPLAY);
  405463:	be 64 61 00 00       	mov    $0x6164,%esi
  405468:	44 89 ff             	mov    %r15d,%edi
  40546b:	31 c0                	xor    %eax,%eax
  40546d:	c7 85 e8 de ff ff a4 	movl   $0x90f999a4,-0x2118(%rbp)
  405474:	99 f9 90 
  405477:	e8 74 de ff ff       	call   4032f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  40547c:	ba 04 00 00 00       	mov    $0x4,%edx
  405481:	48 8d b5 e8 de ff ff 	lea    -0x2118(%rbp),%rsi
  405488:	44 89 ff             	mov    %r15d,%edi
  40548b:	e8 50 dc ff ff       	call   4030e0 <write@plt>
				switches = readSwitch(fd, switches);
  405490:	8b 85 a8 de ff ff    	mov    -0x2158(%rbp),%eax
	ioctl(fd, RD_SWITCHES);
  405496:	be 61 61 00 00       	mov    $0x6161,%esi
  40549b:	44 89 ff             	mov    %r15d,%edi
  40549e:	89 85 ec de ff ff    	mov    %eax,-0x2114(%rbp)
  4054a4:	31 c0                	xor    %eax,%eax
  4054a6:	e8 45 de ff ff       	call   4032f0 <ioctl@plt>
	read(fd, &data, 3);
  4054ab:	ba 03 00 00 00       	mov    $0x3,%edx
  4054b0:	48 8d b5 ec de ff ff 	lea    -0x2114(%rbp),%rsi
  4054b7:	44 89 ff             	mov    %r15d,%edi
  4054ba:	e8 61 de ff ff       	call   403320 <read@plt>
	return data;
  4054bf:	8b 85 ec de ff ff    	mov    -0x2114(%rbp),%eax
  4054c5:	89 85 a8 de ff ff    	mov    %eax,-0x2158(%rbp)
				if (switches == 0x23B6) // 9142 em hexa
  4054cb:	3d b6 23 00 00       	cmp    $0x23b6,%eax
  4054d0:	0f 85 37 f7 ff ff    	jne    404c0d <main+0xb8d>
	ioctl(fd, WR_R_DISPLAY);
  4054d6:	be 64 61 00 00       	mov    $0x6164,%esi
  4054db:	44 89 ff             	mov    %r15d,%edi
  4054de:	31 c0                	xor    %eax,%eax
  4054e0:	c7 85 f0 de ff ff 00 	movl   $0x0,-0x2110(%rbp)
  4054e7:	00 00 00 
  4054ea:	e8 01 de ff ff       	call   4032f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  4054ef:	ba 04 00 00 00       	mov    $0x4,%edx
  4054f4:	48 8d b5 f0 de ff ff 	lea    -0x2110(%rbp),%rsi
  4054fb:	44 89 ff             	mov    %r15d,%edi
  4054fe:	e8 dd db ff ff       	call   4030e0 <write@plt>
					text.setString("");
  405503:	4c 8d b5 30 e0 ff ff 	lea    -0x1fd0(%rbp),%r14
  40550a:	4c 89 f7             	mov    %r14,%rdi
  40550d:	e8 ae df ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  405512:	4c 89 f2             	mov    %r14,%rdx
  405515:	be ed 90 40 00       	mov    $0x4090ed,%esi
  40551a:	48 8d bd 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdi
  405521:	e8 ca db ff ff       	call   4030f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  405526:	48 8d b5 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rsi
  40552d:	48 8d bd e0 fa ff ff 	lea    -0x520(%rbp),%rdi
  405534:	e8 27 df ff ff       	call   403460 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  405539:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  405540:	48 8d 85 60 e0 ff ff 	lea    -0x1fa0(%rbp),%rax
  405547:	48 89 85 b0 de ff ff 	mov    %rax,-0x2150(%rbp)
  40554e:	48 39 c7             	cmp    %rax,%rdi
  405551:	74 14                	je     405567 <main+0x14e7>
  405553:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  40555a:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405561:	00 
  405562:	e8 b9 dc ff ff       	call   403220 <_ZdlPvm@plt>
  405567:	4c 89 f7             	mov    %r14,%rdi
  40556a:	e8 91 dd ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
					typedtext.insert(0, "Isso faz algum sentido?");
  40556f:	4c 89 f7             	mov    %r14,%rdi
  405572:	e8 49 df ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  405577:	4c 89 f2             	mov    %r14,%rdx
  40557a:	be c3 90 40 00       	mov    $0x4090c3,%esi
  40557f:	48 8d bd 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdi
  405586:	e8 65 db ff ff       	call   4030f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  40558b:	48 8d 95 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdx
  405592:	31 f6                	xor    %esi,%esi
  405594:	48 8d bd 90 df ff ff 	lea    -0x2070(%rbp),%rdi
  40559b:	e8 10 dc ff ff       	call   4031b0 <_ZN2sf6String6insertEmRKS0_@plt>
      { return _M_dataplus._M_p; }
  4055a0:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  4055a7:	48 3b bd b0 de ff ff 	cmp    -0x2150(%rbp),%rdi
  4055ae:	74 14                	je     4055c4 <main+0x1544>
  4055b0:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  4055b7:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4055be:	00 
  4055bf:	e8 5c dc ff ff       	call   403220 <_ZdlPvm@plt>
  4055c4:	4c 89 f7             	mov    %r14,%rdi
  4055c7:	e8 34 dd ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
					window.clear();
  4055cc:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  4055d2:	31 c9                	xor    %ecx,%ecx
  4055d4:	31 d2                	xor    %edx,%edx
  4055d6:	31 f6                	xor    %esi,%esi
  4055d8:	48 8d bd 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdi
  4055df:	e8 1c db ff ff       	call   403100 <_ZN2sf5ColorC1Ehhhh@plt>
  4055e4:	48 8d b5 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rsi
  4055eb:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  4055f2:	e8 89 db ff ff       	call   403180 <_ZN2sf12RenderTarget5clearERKNS_5ColorE@plt>
					screen = 3;
  4055f7:	c7 85 ac de ff ff 03 	movl   $0x3,-0x2154(%rbp)
  4055fe:	00 00 00 
  405601:	e9 07 f6 ff ff       	jmp    404c0d <main+0xb8d>
  405606:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  40560d:	00 00 00 
				window.close();
  405610:	48 8d bd c0 fd ff ff 	lea    -0x240(%rbp),%rdi
  405617:	e8 94 de ff ff       	call   4034b0 <_ZN2sf6Window5closeEv@plt>
  40561c:	e9 b5 f3 ff ff       	jmp    4049d6 <main+0x956>
  405621:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
			typing.play();
  405628:	48 8d bd 50 e1 ff ff 	lea    -0x1eb0(%rbp),%rdi
  40562f:	e8 ac dd ff ff       	call   4033e0 <_ZN2sf11SoundStream4playEv@plt>
	ioctl(fd, WR_L_DISPLAY);
  405634:	be 63 61 00 00       	mov    $0x6163,%esi
  405639:	44 89 ff             	mov    %r15d,%edi
  40563c:	31 c0                	xor    %eax,%eax
  40563e:	c7 85 d4 de ff ff 00 	movl   $0x0,-0x212c(%rbp)
  405645:	00 00 00 
  405648:	e8 a3 dc ff ff       	call   4032f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  40564d:	ba 04 00 00 00       	mov    $0x4,%edx
  405652:	48 8d b5 d4 de ff ff 	lea    -0x212c(%rbp),%rsi
  405659:	44 89 ff             	mov    %r15d,%edi
  40565c:	e8 7f da ff ff       	call   4030e0 <write@plt>
	ioctl(fd, WR_R_DISPLAY);
  405661:	be 64 61 00 00       	mov    $0x6164,%esi
  405666:	44 89 ff             	mov    %r15d,%edi
  405669:	31 c0                	xor    %eax,%eax
  40566b:	c7 85 d8 de ff ff 00 	movl   $0x0,-0x2128(%rbp)
  405672:	00 00 00 
  405675:	e8 76 dc ff ff       	call   4032f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  40567a:	ba 04 00 00 00       	mov    $0x4,%edx
  40567f:	48 8d b5 d8 de ff ff 	lea    -0x2128(%rbp),%rsi
  405686:	44 89 ff             	mov    %r15d,%edi
  405689:	e8 52 da ff ff       	call   4030e0 <write@plt>
	ioctl(fd, WR_GREEN_LEDS);
  40568e:	be 66 61 00 00       	mov    $0x6166,%esi
  405693:	44 89 ff             	mov    %r15d,%edi
  405696:	31 c0                	xor    %eax,%eax
  405698:	c7 85 dc de ff ff 00 	movl   $0x0,-0x2124(%rbp)
  40569f:	00 00 00 
  4056a2:	e8 49 dc ff ff       	call   4032f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  4056a7:	ba 04 00 00 00       	mov    $0x4,%edx
  4056ac:	48 8d b5 dc de ff ff 	lea    -0x2124(%rbp),%rsi
  4056b3:	44 89 ff             	mov    %r15d,%edi
  4056b6:	e8 25 da ff ff       	call   4030e0 <write@plt>
	ioctl(fd, WR_RED_LEDS);
  4056bb:	be 65 61 00 00       	mov    $0x6165,%esi
  4056c0:	44 89 ff             	mov    %r15d,%edi
  4056c3:	31 c0                	xor    %eax,%eax
  4056c5:	c7 85 e0 de ff ff 00 	movl   $0x0,-0x2120(%rbp)
  4056cc:	00 00 00 
  4056cf:	e8 1c dc ff ff       	call   4032f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  4056d4:	ba 04 00 00 00       	mov    $0x4,%edx
  4056d9:	48 8d b5 e0 de ff ff 	lea    -0x2120(%rbp),%rsi
  4056e0:	44 89 ff             	mov    %r15d,%edi
  4056e3:	e8 f8 d9 ff ff       	call   4030e0 <write@plt>
				elapsedtime_text += clock_text.restart();
  4056e8:	48 8d bd 00 df ff ff 	lea    -0x2100(%rbp),%rdi
  4056ef:	e8 dc dc ff ff       	call   4033d0 <_ZN2sf5Clock7restartEv@plt>
  4056f4:	48 89 c6             	mov    %rax,%rsi
  4056f7:	48 8d bd 08 df ff ff 	lea    -0x20f8(%rbp),%rdi
  4056fe:	e8 bd dc ff ff       	call   4033c0 <_ZN2sfpLERNS_4TimeES0_@plt>
  405703:	c7 85 ac de ff ff 01 	movl   $0x1,-0x2154(%rbp)
  40570a:	00 00 00 
  40570d:	0f 1f 00             	nopl   (%rax)
				while (elapsedtime_text >= sf::seconds(.001f))
  405710:	f3 0f 10 05 e4 3e 00 	movss  0x3ee4(%rip),%xmm0        # 4095fc <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x15c>
  405717:	00 
  405718:	e8 33 da ff ff       	call   403150 <_ZN2sf7secondsEf@plt>
  40571d:	48 8b bd 08 df ff ff 	mov    -0x20f8(%rbp),%rdi
  405724:	48 89 c6             	mov    %rax,%rsi
  405727:	e8 74 db ff ff       	call   4032a0 <_ZN2sfgeENS_4TimeES0_@plt>
  40572c:	84 c0                	test   %al,%al
  40572e:	0f 84 aa 05 00 00    	je     405cde <main+0x1c5e>
					elapsedtime_text -= sf::seconds(.001f);
  405734:	f3 0f 10 05 c0 3e 00 	movss  0x3ec0(%rip),%xmm0        # 4095fc <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x15c>
  40573b:	00 
  40573c:	e8 0f da ff ff       	call   403150 <_ZN2sf7secondsEf@plt>
  405741:	48 89 c6             	mov    %rax,%rsi
  405744:	48 8d bd 08 df ff ff 	lea    -0x20f8(%rbp),%rdi
  40574b:	e8 b0 dc ff ff       	call   403400 <_ZN2sfmIERNS_4TimeES0_@plt>
					if (typedtext.getSize() > 0)
  405750:	48 8d bd 90 df ff ff 	lea    -0x2070(%rbp),%rdi
  405757:	e8 04 dc ff ff       	call   403360 <_ZNK2sf6String7getSizeEv@plt>
  40575c:	48 85 c0             	test   %rax,%rax
  40575f:	0f 84 0b 02 00 00    	je     405970 <main+0x18f0>
						text.setString(text.getString() + typedtext[0]);
  405765:	31 f6                	xor    %esi,%esi
  405767:	48 8d bd 90 df ff ff 	lea    -0x2070(%rbp),%rdi
  40576e:	e8 0d db ff ff       	call   403280 <_ZN2sf6StringixEm@plt>
  405773:	4c 8d b5 30 e0 ff ff 	lea    -0x1fd0(%rbp),%r14
  40577a:	8b 30                	mov    (%rax),%esi
  40577c:	4c 89 f7             	mov    %r14,%rdi
  40577f:	e8 3c d9 ff ff       	call   4030c0 <_ZN2sf6StringC1Ej@plt>
  405784:	48 8d bd e0 fa ff ff 	lea    -0x520(%rbp),%rdi
  40578b:	e8 20 dc ff ff       	call   4033b0 <_ZNK2sf4Text9getStringEv@plt>
  405790:	48 89 c6             	mov    %rax,%rsi
  405793:	4c 89 f2             	mov    %r14,%rdx
  405796:	48 8d bd 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdi
  40579d:	e8 2e d9 ff ff       	call   4030d0 <_ZN2sfplERKNS_6StringES2_@plt>
  4057a2:	48 8d b5 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rsi
  4057a9:	48 8d bd e0 fa ff ff 	lea    -0x520(%rbp),%rdi
  4057b0:	e8 ab dc ff ff       	call   403460 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  4057b5:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  4057bc:	48 8d 85 60 e0 ff ff 	lea    -0x1fa0(%rbp),%rax
  4057c3:	48 89 85 b0 de ff ff 	mov    %rax,-0x2150(%rbp)
  4057ca:	48 39 c7             	cmp    %rax,%rdi
  4057cd:	74 14                	je     4057e3 <main+0x1763>
  4057cf:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  4057d6:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4057dd:	00 
  4057de:	e8 3d da ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  4057e3:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
	if (!_M_is_local())
  4057ea:	48 8d 85 40 e0 ff ff 	lea    -0x1fc0(%rbp),%rax
  4057f1:	48 89 85 b8 de ff ff 	mov    %rax,-0x2148(%rbp)
  4057f8:	48 39 c7             	cmp    %rax,%rdi
  4057fb:	74 14                	je     405811 <main+0x1791>
  4057fd:	48 8b 85 40 e0 ff ff 	mov    -0x1fc0(%rbp),%rax
  405804:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  40580b:	00 
  40580c:	e8 0f da ff ff       	call   403220 <_ZdlPvm@plt>
						typedtext = typedtext.toAnsiString().substr(1);
  405811:	48 8d 85 38 df ff ff 	lea    -0x20c8(%rbp),%rax
  405818:	4c 8d ad 30 df ff ff 	lea    -0x20d0(%rbp),%r13
  40581f:	48 89 c7             	mov    %rax,%rdi
  405822:	48 89 85 c0 de ff ff 	mov    %rax,-0x2140(%rbp)
  405829:	e8 92 dc ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  40582e:	4c 89 ef             	mov    %r13,%rdi
  405831:	e8 8a dc ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  405836:	4c 89 ea             	mov    %r13,%rdx
  405839:	48 8d b5 90 df ff ff 	lea    -0x2070(%rbp),%rsi
  405840:	48 8d bd 10 e0 ff ff 	lea    -0x1ff0(%rbp),%rdi
  405847:	e8 04 dc ff ff       	call   403450 <_ZNK2sf6String12toAnsiStringB5cxx11ERKSt6locale@plt>
      // Capacity:
      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
  40584c:	4c 8b a5 18 e0 ff ff 	mov    -0x1fe8(%rbp),%r12
	if (__pos > this->size())
  405853:	4d 85 e4             	test   %r12,%r12
  405856:	0f 84 ce 15 00 00    	je     406e2a <main+0x2daa>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  40585c:	48 8b 85 b8 de ff ff 	mov    -0x2148(%rbp),%rax
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
  405863:	49 83 ec 01          	sub    $0x1,%r12
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
  405867:	4c 89 a5 50 e0 ff ff 	mov    %r12,-0x1fb0(%rbp)
  40586e:	48 89 85 30 e0 ff ff 	mov    %rax,-0x1fd0(%rbp)
      { return _M_dataplus._M_p; }
  405875:	48 8b 85 10 e0 ff ff 	mov    -0x1ff0(%rbp),%rax
  40587c:	48 89 85 a0 de ff ff 	mov    %rax,-0x2160(%rbp)

	if (__dnew > size_type(_S_local_capacity))
  405883:	49 83 fc 0f          	cmp    $0xf,%r12
  405887:	0f 87 4c 02 00 00    	ja     405ad9 <main+0x1a59>
	if (__n == 1)
  40588d:	49 83 fc 01          	cmp    $0x1,%r12
  405891:	0f 85 2d 02 00 00    	jne    405ac4 <main+0x1a44>
  405897:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  40589b:	88 85 40 e0 ff ff    	mov    %al,-0x1fc0(%rbp)
  4058a1:	48 8b 85 b8 de ff ff 	mov    -0x2148(%rbp),%rax
      { _M_string_length = __length; }
  4058a8:	4c 89 a5 38 e0 ff ff 	mov    %r12,-0x1fc8(%rbp)
  4058af:	48 8b 95 c0 de ff ff 	mov    -0x2140(%rbp),%rdx
  4058b6:	4c 89 f6             	mov    %r14,%rsi
  4058b9:	48 8d bd 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdi
  4058c0:	42 c6 04 20 00       	movb   $0x0,(%rax,%r12,1)
  4058c5:	e8 d6 d7 ff ff       	call   4030a0 <_ZN2sf6StringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6locale@plt>
  4058ca:	48 8d b5 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rsi
  4058d1:	48 8d bd 90 df ff ff 	lea    -0x2070(%rbp),%rdi
  4058d8:	e8 43 db ff ff       	call   403420 <_ZN2sf6StringaSERKS0_@plt>
      { return _M_dataplus._M_p; }
  4058dd:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  4058e4:	48 3b bd b0 de ff ff 	cmp    -0x2150(%rbp),%rdi
  4058eb:	74 14                	je     405901 <main+0x1881>
  4058ed:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  4058f4:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4058fb:	00 
  4058fc:	e8 1f d9 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  405901:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
	if (!_M_is_local())
  405908:	48 3b bd b8 de ff ff 	cmp    -0x2148(%rbp),%rdi
  40590f:	74 10                	je     405921 <main+0x18a1>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  405911:	48 8b 85 40 e0 ff ff 	mov    -0x1fc0(%rbp),%rax
  405918:	48 8d 70 01          	lea    0x1(%rax),%rsi
  40591c:	e8 ff d8 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  405921:	48 8b bd 10 e0 ff ff 	mov    -0x1ff0(%rbp),%rdi
	if (!_M_is_local())
  405928:	48 8d 85 20 e0 ff ff 	lea    -0x1fe0(%rbp),%rax
  40592f:	48 39 c7             	cmp    %rax,%rdi
  405932:	74 10                	je     405944 <main+0x18c4>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  405934:	48 8b 85 20 e0 ff ff 	mov    -0x1fe0(%rbp),%rax
  40593b:	48 8d 70 01          	lea    0x1(%rax),%rsi
  40593f:	e8 dc d8 ff ff       	call   403220 <_ZdlPvm@plt>
  405944:	4c 89 ef             	mov    %r13,%rdi
  405947:	e8 b4 d9 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
  40594c:	48 8b bd c0 de ff ff 	mov    -0x2140(%rbp),%rdi
  405953:	e8 a8 d9 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
						temp_clock.restart();
  405958:	48 8d bd 10 df ff ff 	lea    -0x20f0(%rbp),%rdi
  40595f:	e8 6c da ff ff       	call   4033d0 <_ZN2sf5Clock7restartEv@plt>
  405964:	e9 a7 fd ff ff       	jmp    405710 <main+0x1690>
  405969:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
						temp_time = temp_clock.getElapsedTime();
  405970:	48 8d bd 10 df ff ff 	lea    -0x20f0(%rbp),%rdi
  405977:	e8 24 da ff ff       	call   4033a0 <_ZNK2sf5Clock14getElapsedTimeEv@plt>
						if (temp_time >= sf::seconds(5.0f))
  40597c:	f3 0f 10 05 7c 3c 00 	movss  0x3c7c(%rip),%xmm0        # 409600 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x160>
  405983:	00 
						temp_time = temp_clock.getElapsedTime();
  405984:	48 89 85 18 df ff ff 	mov    %rax,-0x20e8(%rbp)
						if (temp_time >= sf::seconds(5.0f))
  40598b:	e8 c0 d7 ff ff       	call   403150 <_ZN2sf7secondsEf@plt>
  405990:	48 8b bd 18 df ff ff 	mov    -0x20e8(%rbp),%rdi
  405997:	48 89 c6             	mov    %rax,%rsi
  40599a:	e8 01 d9 ff ff       	call   4032a0 <_ZN2sfgeENS_4TimeES0_@plt>
  40599f:	84 c0                	test   %al,%al
  4059a1:	0f 84 69 fd ff ff    	je     405710 <main+0x1690>
	ioctl(fd, WR_R_DISPLAY);
  4059a7:	be 64 61 00 00       	mov    $0x6164,%esi
  4059ac:	44 89 ff             	mov    %r15d,%edi
  4059af:	31 c0                	xor    %eax,%eax
  4059b1:	c7 85 e4 de ff ff ff 	movl   $0xffffffff,-0x211c(%rbp)
  4059b8:	ff ff ff 
  4059bb:	e8 30 d9 ff ff       	call   4032f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  4059c0:	ba 04 00 00 00       	mov    $0x4,%edx
  4059c5:	48 8d b5 e4 de ff ff 	lea    -0x211c(%rbp),%rsi
  4059cc:	44 89 ff             	mov    %r15d,%edi
  4059cf:	e8 0c d7 ff ff       	call   4030e0 <write@plt>
							text.setString("");
  4059d4:	4c 8d b5 30 e0 ff ff 	lea    -0x1fd0(%rbp),%r14
  4059db:	4c 89 f7             	mov    %r14,%rdi
  4059de:	e8 dd da ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  4059e3:	4c 89 f2             	mov    %r14,%rdx
  4059e6:	be ed 90 40 00       	mov    $0x4090ed,%esi
  4059eb:	48 8d bd 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdi
  4059f2:	e8 f9 d6 ff ff       	call   4030f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  4059f7:	48 8d b5 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rsi
  4059fe:	48 8d bd e0 fa ff ff 	lea    -0x520(%rbp),%rdi
  405a05:	e8 56 da ff ff       	call   403460 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  405a0a:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  405a11:	48 8d 85 60 e0 ff ff 	lea    -0x1fa0(%rbp),%rax
  405a18:	48 89 85 b0 de ff ff 	mov    %rax,-0x2150(%rbp)
  405a1f:	48 39 c7             	cmp    %rax,%rdi
  405a22:	74 14                	je     405a38 <main+0x19b8>
  405a24:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  405a2b:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405a32:	00 
  405a33:	e8 e8 d7 ff ff       	call   403220 <_ZdlPvm@plt>
  405a38:	4c 89 f7             	mov    %r14,%rdi
  405a3b:	e8 c0 d8 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
							typedtext.insert(0, "[root@mbois ~] $ Voce deveria saber matematica...");
  405a40:	4c 89 f7             	mov    %r14,%rdi
  405a43:	e8 78 da ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  405a48:	4c 89 f2             	mov    %r14,%rdx
  405a4b:	be 28 94 40 00       	mov    $0x409428,%esi
  405a50:	48 8d bd 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdi
  405a57:	e8 94 d6 ff ff       	call   4030f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  405a5c:	48 8d 95 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdx
  405a63:	31 f6                	xor    %esi,%esi
  405a65:	48 8d bd 90 df ff ff 	lea    -0x2070(%rbp),%rdi
  405a6c:	e8 3f d7 ff ff       	call   4031b0 <_ZN2sf6String6insertEmRKS0_@plt>
      { return _M_dataplus._M_p; }
  405a71:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  405a78:	48 3b bd b0 de ff ff 	cmp    -0x2150(%rbp),%rdi
  405a7f:	74 14                	je     405a95 <main+0x1a15>
  405a81:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  405a88:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405a8f:	00 
  405a90:	e8 8b d7 ff ff       	call   403220 <_ZdlPvm@plt>
  405a95:	4c 89 f7             	mov    %r14,%rdi
  405a98:	e8 63 d8 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
							clock_text.restart();
  405a9d:	48 8d bd 00 df ff ff 	lea    -0x2100(%rbp),%rdi
  405aa4:	e8 27 d9 ff ff       	call   4033d0 <_ZN2sf5Clock7restartEv@plt>
							clock_bomb.restart();
  405aa9:	48 8d bd 20 df ff ff 	lea    -0x20e0(%rbp),%rdi
  405ab0:	e8 1b d9 ff ff       	call   4033d0 <_ZN2sf5Clock7restartEv@plt>
							screen = 2;
  405ab5:	c7 85 ac de ff ff 02 	movl   $0x2,-0x2154(%rbp)
  405abc:	00 00 00 
  405abf:	e9 4c fc ff ff       	jmp    405710 <main+0x1690>
      }

      static _GLIBCXX20_CONSTEXPR char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
	if (__n == 0)
  405ac4:	4d 85 e4             	test   %r12,%r12
  405ac7:	0f 85 75 13 00 00    	jne    406e42 <main+0x2dc2>
  405acd:	48 8b 85 b8 de ff ff 	mov    -0x2148(%rbp),%rax
  405ad4:	e9 cf fd ff ff       	jmp    4058a8 <main+0x1828>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
  405ad9:	31 d2                	xor    %edx,%edx
  405adb:	48 8d b5 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rsi
  405ae2:	4c 89 f7             	mov    %r14,%rdi
  405ae5:	e8 96 d9 ff ff       	call   403480 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
  405aea:	48 89 85 30 e0 ff ff 	mov    %rax,-0x1fd0(%rbp)
  405af1:	48 89 c7             	mov    %rax,%rdi
      { _M_allocated_capacity = __capacity; }
  405af4:	48 8b 85 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rax
  405afb:	48 89 85 40 e0 ff ff 	mov    %rax,-0x1fc0(%rbp)
	const _CharT* __start = __str._M_data()
  405b02:	48 8b b5 a0 de ff ff 	mov    -0x2160(%rbp),%rsi
	  return __s1;
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
  405b09:	4c 89 e2             	mov    %r12,%rdx
  405b0c:	48 83 c6 01          	add    $0x1,%rsi
  405b10:	e8 bb d6 ff ff       	call   4031d0 <memcpy@plt>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
  405b15:	4c 8b a5 50 e0 ff ff 	mov    -0x1fb0(%rbp),%r12
      { return _M_dataplus._M_p; }
  405b1c:	48 8b 85 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rax
  405b23:	e9 80 fd ff ff       	jmp    4058a8 <main+0x1828>
						text.setString(text.getString() + typedtext[0]);
  405b28:	31 f6                	xor    %esi,%esi
  405b2a:	48 8d bd 90 df ff ff 	lea    -0x2070(%rbp),%rdi
  405b31:	e8 4a d7 ff ff       	call   403280 <_ZN2sf6StringixEm@plt>
  405b36:	8b 30                	mov    (%rax),%esi
  405b38:	48 8d bd 30 e0 ff ff 	lea    -0x1fd0(%rbp),%rdi
  405b3f:	e8 7c d5 ff ff       	call   4030c0 <_ZN2sf6StringC1Ej@plt>
  405b44:	48 8d bd e0 fa ff ff 	lea    -0x520(%rbp),%rdi
  405b4b:	e8 60 d8 ff ff       	call   4033b0 <_ZNK2sf4Text9getStringEv@plt>
  405b50:	48 89 c6             	mov    %rax,%rsi
  405b53:	48 8d 95 30 e0 ff ff 	lea    -0x1fd0(%rbp),%rdx
  405b5a:	48 8d bd 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdi
  405b61:	e8 6a d5 ff ff       	call   4030d0 <_ZN2sfplERKNS_6StringES2_@plt>
  405b66:	48 8d b5 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rsi
  405b6d:	48 8d bd e0 fa ff ff 	lea    -0x520(%rbp),%rdi
  405b74:	e8 e7 d8 ff ff       	call   403460 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
  405b79:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  405b80:	48 8d 85 60 e0 ff ff 	lea    -0x1fa0(%rbp),%rax
  405b87:	48 89 85 b0 de ff ff 	mov    %rax,-0x2150(%rbp)
  405b8e:	48 39 c7             	cmp    %rax,%rdi
  405b91:	74 14                	je     405ba7 <main+0x1b27>
  405b93:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  405b9a:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405ba1:	00 
  405ba2:	e8 79 d6 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  405ba7:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
	if (!_M_is_local())
  405bae:	48 8d 85 40 e0 ff ff 	lea    -0x1fc0(%rbp),%rax
  405bb5:	48 89 85 b8 de ff ff 	mov    %rax,-0x2148(%rbp)
  405bbc:	48 39 c7             	cmp    %rax,%rdi
  405bbf:	74 14                	je     405bd5 <main+0x1b55>
  405bc1:	48 8b 85 40 e0 ff ff 	mov    -0x1fc0(%rbp),%rax
  405bc8:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405bcf:	00 
  405bd0:	e8 4b d6 ff ff       	call   403220 <_ZdlPvm@plt>
						typedtext = typedtext.toAnsiString().substr(1);
  405bd5:	48 8d 85 38 df ff ff 	lea    -0x20c8(%rbp),%rax
  405bdc:	4c 8d ad 30 df ff ff 	lea    -0x20d0(%rbp),%r13
  405be3:	48 89 c7             	mov    %rax,%rdi
  405be6:	48 89 85 c0 de ff ff 	mov    %rax,-0x2140(%rbp)
  405bed:	4c 8d a5 10 e0 ff ff 	lea    -0x1ff0(%rbp),%r12
  405bf4:	e8 c7 d8 ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  405bf9:	4c 89 ef             	mov    %r13,%rdi
  405bfc:	e8 bf d8 ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  405c01:	4c 89 ea             	mov    %r13,%rdx
  405c04:	48 8d b5 90 df ff ff 	lea    -0x2070(%rbp),%rsi
  405c0b:	4c 89 e7             	mov    %r12,%rdi
  405c0e:	e8 3d d8 ff ff       	call   403450 <_ZNK2sf6String12toAnsiStringB5cxx11ERKSt6locale@plt>
  405c13:	48 8d 85 30 e0 ff ff 	lea    -0x1fd0(%rbp),%rax
  405c1a:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
  405c21:	ba 01 00 00 00       	mov    $0x1,%edx
  405c26:	4c 89 e6             	mov    %r12,%rsi
  405c29:	48 89 c7             	mov    %rax,%rdi
  405c2c:	e8 ff d5 ff ff       	call   403230 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@plt>
  405c31:	48 8b 95 c0 de ff ff 	mov    -0x2140(%rbp),%rdx
  405c38:	48 8d b5 30 e0 ff ff 	lea    -0x1fd0(%rbp),%rsi
  405c3f:	48 8d bd 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdi
  405c46:	e8 55 d4 ff ff       	call   4030a0 <_ZN2sf6StringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6locale@plt>
  405c4b:	48 8d b5 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rsi
  405c52:	48 8d bd 90 df ff ff 	lea    -0x2070(%rbp),%rdi
  405c59:	e8 c2 d7 ff ff       	call   403420 <_ZN2sf6StringaSERKS0_@plt>
      { return _M_dataplus._M_p; }
  405c5e:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  405c65:	48 3b bd b0 de ff ff 	cmp    -0x2150(%rbp),%rdi
  405c6c:	74 14                	je     405c82 <main+0x1c02>
  405c6e:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  405c75:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405c7c:	00 
  405c7d:	e8 9e d5 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  405c82:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
	if (!_M_is_local())
  405c89:	48 3b bd b8 de ff ff 	cmp    -0x2148(%rbp),%rdi
  405c90:	74 10                	je     405ca2 <main+0x1c22>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  405c92:	48 8b 85 40 e0 ff ff 	mov    -0x1fc0(%rbp),%rax
  405c99:	48 8d 70 01          	lea    0x1(%rax),%rsi
  405c9d:	e8 7e d5 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  405ca2:	48 8b bd 10 e0 ff ff 	mov    -0x1ff0(%rbp),%rdi
	if (!_M_is_local())
  405ca9:	48 8d 85 20 e0 ff ff 	lea    -0x1fe0(%rbp),%rax
  405cb0:	48 39 c7             	cmp    %rax,%rdi
  405cb3:	74 10                	je     405cc5 <main+0x1c45>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  405cb5:	48 8b 85 20 e0 ff ff 	mov    -0x1fe0(%rbp),%rax
  405cbc:	48 8d 70 01          	lea    0x1(%rax),%rsi
  405cc0:	e8 5b d5 ff ff       	call   403220 <_ZdlPvm@plt>
  405cc5:	4c 89 ef             	mov    %r13,%rdi
  405cc8:	e8 33 d6 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
  405ccd:	48 8b bd c0 de ff ff 	mov    -0x2140(%rbp),%rdi
  405cd4:	e8 27 d6 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
  405cd9:	e9 f0 ee ff ff       	jmp    404bce <main+0xb4e>
				window.draw(text);
  405cde:	ba 80 c2 40 00       	mov    $0x40c280,%edx
  405ce3:	48 8d b5 e0 fa ff ff 	lea    -0x520(%rbp),%rsi
  405cea:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  405cf1:	e8 fa d6 ff ff       	call   4033f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
  405cf6:	e9 12 ef ff ff       	jmp    404c0d <main+0xb8d>
						text.setString(text.getString() + typedtext[0]);
  405cfb:	31 f6                	xor    %esi,%esi
  405cfd:	48 8d bd 90 df ff ff 	lea    -0x2070(%rbp),%rdi
  405d04:	e8 77 d5 ff ff       	call   403280 <_ZN2sf6StringixEm@plt>
  405d09:	8b 30                	mov    (%rax),%esi
  405d0b:	48 8d bd 30 e0 ff ff 	lea    -0x1fd0(%rbp),%rdi
  405d12:	e8 a9 d3 ff ff       	call   4030c0 <_ZN2sf6StringC1Ej@plt>
  405d17:	48 8d bd e0 fa ff ff 	lea    -0x520(%rbp),%rdi
  405d1e:	e8 8d d6 ff ff       	call   4033b0 <_ZNK2sf4Text9getStringEv@plt>
  405d23:	48 89 c6             	mov    %rax,%rsi
  405d26:	48 8d 95 30 e0 ff ff 	lea    -0x1fd0(%rbp),%rdx
  405d2d:	48 8d bd 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdi
  405d34:	e8 97 d3 ff ff       	call   4030d0 <_ZN2sfplERKNS_6StringES2_@plt>
  405d39:	48 8d b5 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rsi
  405d40:	48 8d bd e0 fa ff ff 	lea    -0x520(%rbp),%rdi
  405d47:	e8 14 d7 ff ff       	call   403460 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  405d4c:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  405d53:	48 8d 85 60 e0 ff ff 	lea    -0x1fa0(%rbp),%rax
  405d5a:	48 89 85 b0 de ff ff 	mov    %rax,-0x2150(%rbp)
  405d61:	48 39 c7             	cmp    %rax,%rdi
  405d64:	74 14                	je     405d7a <main+0x1cfa>
  405d66:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  405d6d:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405d74:	00 
  405d75:	e8 a6 d4 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  405d7a:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
	if (!_M_is_local())
  405d81:	48 8d 85 40 e0 ff ff 	lea    -0x1fc0(%rbp),%rax
  405d88:	48 89 85 b8 de ff ff 	mov    %rax,-0x2148(%rbp)
  405d8f:	48 39 c7             	cmp    %rax,%rdi
  405d92:	74 14                	je     405da8 <main+0x1d28>
  405d94:	48 8b 85 40 e0 ff ff 	mov    -0x1fc0(%rbp),%rax
  405d9b:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405da2:	00 
  405da3:	e8 78 d4 ff ff       	call   403220 <_ZdlPvm@plt>
						typedtext = typedtext.toAnsiString().substr(1);
  405da8:	48 8d 85 38 df ff ff 	lea    -0x20c8(%rbp),%rax
  405daf:	4c 8d ad 30 df ff ff 	lea    -0x20d0(%rbp),%r13
  405db6:	48 89 c7             	mov    %rax,%rdi
  405db9:	48 89 85 c0 de ff ff 	mov    %rax,-0x2140(%rbp)
  405dc0:	4c 8d a5 10 e0 ff ff 	lea    -0x1ff0(%rbp),%r12
  405dc7:	e8 f4 d6 ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  405dcc:	4c 89 ef             	mov    %r13,%rdi
  405dcf:	e8 ec d6 ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  405dd4:	4c 89 ea             	mov    %r13,%rdx
  405dd7:	48 8d b5 90 df ff ff 	lea    -0x2070(%rbp),%rsi
  405dde:	4c 89 e7             	mov    %r12,%rdi
  405de1:	e8 6a d6 ff ff       	call   403450 <_ZNK2sf6String12toAnsiStringB5cxx11ERKSt6locale@plt>
  405de6:	48 8d 85 30 e0 ff ff 	lea    -0x1fd0(%rbp),%rax
  405ded:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
  405df1:	ba 01 00 00 00       	mov    $0x1,%edx
  405df6:	4c 89 e6             	mov    %r12,%rsi
  405df9:	48 89 c7             	mov    %rax,%rdi
  405dfc:	e8 2f d4 ff ff       	call   403230 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@plt>
  405e01:	48 8b 95 c0 de ff ff 	mov    -0x2140(%rbp),%rdx
  405e08:	48 8d b5 30 e0 ff ff 	lea    -0x1fd0(%rbp),%rsi
  405e0f:	48 8d bd 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdi
  405e16:	e8 85 d2 ff ff       	call   4030a0 <_ZN2sf6StringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6locale@plt>
  405e1b:	48 8d b5 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rsi
  405e22:	48 8d bd 90 df ff ff 	lea    -0x2070(%rbp),%rdi
  405e29:	e8 f2 d5 ff ff       	call   403420 <_ZN2sf6StringaSERKS0_@plt>
      { return _M_dataplus._M_p; }
  405e2e:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  405e35:	48 3b bd b0 de ff ff 	cmp    -0x2150(%rbp),%rdi
  405e3c:	74 14                	je     405e52 <main+0x1dd2>
  405e3e:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  405e45:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405e4c:	00 
  405e4d:	e8 ce d3 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  405e52:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
	if (!_M_is_local())
  405e59:	48 3b bd b8 de ff ff 	cmp    -0x2148(%rbp),%rdi
  405e60:	74 10                	je     405e72 <main+0x1df2>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  405e62:	48 8b 85 40 e0 ff ff 	mov    -0x1fc0(%rbp),%rax
  405e69:	48 8d 70 01          	lea    0x1(%rax),%rsi
  405e6d:	e8 ae d3 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  405e72:	48 8b bd 10 e0 ff ff 	mov    -0x1ff0(%rbp),%rdi
	if (!_M_is_local())
  405e79:	48 8d 85 20 e0 ff ff 	lea    -0x1fe0(%rbp),%rax
  405e80:	48 39 c7             	cmp    %rax,%rdi
  405e83:	74 10                	je     405e95 <main+0x1e15>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  405e85:	48 8b 85 20 e0 ff ff 	mov    -0x1fe0(%rbp),%rax
  405e8c:	48 8d 70 01          	lea    0x1(%rax),%rsi
  405e90:	e8 8b d3 ff ff       	call   403220 <_ZdlPvm@plt>
  405e95:	4c 89 ef             	mov    %r13,%rdi
  405e98:	e8 63 d4 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
  405e9d:	48 8b bd c0 de ff ff 	mov    -0x2140(%rbp),%rdi
  405ea4:	e8 57 d4 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
  405ea9:	e9 80 f5 ff ff       	jmp    40542e <main+0x13ae>
						text.setString(text.getString() + typedtext[0]);
  405eae:	31 f6                	xor    %esi,%esi
  405eb0:	48 8d bd 90 df ff ff 	lea    -0x2070(%rbp),%rdi
  405eb7:	e8 c4 d3 ff ff       	call   403280 <_ZN2sf6StringixEm@plt>
  405ebc:	8b 30                	mov    (%rax),%esi
  405ebe:	48 8d bd 30 e0 ff ff 	lea    -0x1fd0(%rbp),%rdi
  405ec5:	e8 f6 d1 ff ff       	call   4030c0 <_ZN2sf6StringC1Ej@plt>
  405eca:	48 8d bd e0 fa ff ff 	lea    -0x520(%rbp),%rdi
  405ed1:	e8 da d4 ff ff       	call   4033b0 <_ZNK2sf4Text9getStringEv@plt>
  405ed6:	48 89 c6             	mov    %rax,%rsi
  405ed9:	48 8d 95 30 e0 ff ff 	lea    -0x1fd0(%rbp),%rdx
  405ee0:	48 8d bd 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdi
  405ee7:	e8 e4 d1 ff ff       	call   4030d0 <_ZN2sfplERKNS_6StringES2_@plt>
  405eec:	48 8d b5 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rsi
  405ef3:	48 8d bd e0 fa ff ff 	lea    -0x520(%rbp),%rdi
  405efa:	e8 61 d5 ff ff       	call   403460 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  405eff:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  405f06:	48 8d 85 60 e0 ff ff 	lea    -0x1fa0(%rbp),%rax
  405f0d:	48 89 85 b0 de ff ff 	mov    %rax,-0x2150(%rbp)
  405f14:	48 39 c7             	cmp    %rax,%rdi
  405f17:	74 14                	je     405f2d <main+0x1ead>
  405f19:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  405f20:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405f27:	00 
  405f28:	e8 f3 d2 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  405f2d:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
	if (!_M_is_local())
  405f34:	48 8d 85 40 e0 ff ff 	lea    -0x1fc0(%rbp),%rax
  405f3b:	48 89 85 b8 de ff ff 	mov    %rax,-0x2148(%rbp)
  405f42:	48 39 c7             	cmp    %rax,%rdi
  405f45:	74 14                	je     405f5b <main+0x1edb>
  405f47:	48 8b 85 40 e0 ff ff 	mov    -0x1fc0(%rbp),%rax
  405f4e:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405f55:	00 
  405f56:	e8 c5 d2 ff ff       	call   403220 <_ZdlPvm@plt>
						typedtext = typedtext.toAnsiString().substr(1);
  405f5b:	48 8d 85 38 df ff ff 	lea    -0x20c8(%rbp),%rax
  405f62:	4c 8d ad 30 df ff ff 	lea    -0x20d0(%rbp),%r13
  405f69:	48 89 c7             	mov    %rax,%rdi
  405f6c:	48 89 85 c0 de ff ff 	mov    %rax,-0x2140(%rbp)
  405f73:	4c 8d a5 10 e0 ff ff 	lea    -0x1ff0(%rbp),%r12
  405f7a:	e8 41 d5 ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  405f7f:	4c 89 ef             	mov    %r13,%rdi
  405f82:	e8 39 d5 ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  405f87:	4c 89 ea             	mov    %r13,%rdx
  405f8a:	48 8d b5 90 df ff ff 	lea    -0x2070(%rbp),%rsi
  405f91:	4c 89 e7             	mov    %r12,%rdi
  405f94:	e8 b7 d4 ff ff       	call   403450 <_ZNK2sf6String12toAnsiStringB5cxx11ERKSt6locale@plt>
  405f99:	48 8d 85 30 e0 ff ff 	lea    -0x1fd0(%rbp),%rax
  405fa0:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
  405fa4:	ba 01 00 00 00       	mov    $0x1,%edx
  405fa9:	4c 89 e6             	mov    %r12,%rsi
  405fac:	48 89 c7             	mov    %rax,%rdi
  405faf:	e8 7c d2 ff ff       	call   403230 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@plt>
  405fb4:	48 8b 95 c0 de ff ff 	mov    -0x2140(%rbp),%rdx
  405fbb:	48 8d b5 30 e0 ff ff 	lea    -0x1fd0(%rbp),%rsi
  405fc2:	48 8d bd 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdi
  405fc9:	e8 d2 d0 ff ff       	call   4030a0 <_ZN2sf6StringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6locale@plt>
  405fce:	48 8d b5 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rsi
  405fd5:	48 8d bd 90 df ff ff 	lea    -0x2070(%rbp),%rdi
  405fdc:	e8 3f d4 ff ff       	call   403420 <_ZN2sf6StringaSERKS0_@plt>
      { return _M_dataplus._M_p; }
  405fe1:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  405fe8:	48 3b bd b0 de ff ff 	cmp    -0x2150(%rbp),%rdi
  405fef:	74 14                	je     406005 <main+0x1f85>
  405ff1:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  405ff8:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405fff:	00 
  406000:	e8 1b d2 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  406005:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
	if (!_M_is_local())
  40600c:	48 3b bd b8 de ff ff 	cmp    -0x2148(%rbp),%rdi
  406013:	74 10                	je     406025 <main+0x1fa5>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  406015:	48 8b 85 40 e0 ff ff 	mov    -0x1fc0(%rbp),%rax
  40601c:	48 8d 70 01          	lea    0x1(%rax),%rsi
  406020:	e8 fb d1 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  406025:	48 8b bd 10 e0 ff ff 	mov    -0x1ff0(%rbp),%rdi
	if (!_M_is_local())
  40602c:	48 8d 85 20 e0 ff ff 	lea    -0x1fe0(%rbp),%rax
  406033:	48 39 c7             	cmp    %rax,%rdi
  406036:	74 10                	je     406048 <main+0x1fc8>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  406038:	48 8b 85 20 e0 ff ff 	mov    -0x1fe0(%rbp),%rax
  40603f:	48 8d 70 01          	lea    0x1(%rax),%rsi
  406043:	e8 d8 d1 ff ff       	call   403220 <_ZdlPvm@plt>
  406048:	4c 89 ef             	mov    %r13,%rdi
  40604b:	e8 b0 d2 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
  406050:	48 8b bd c0 de ff ff 	mov    -0x2140(%rbp),%rdi
  406057:	e8 a4 d2 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
  40605c:	e9 dd f2 ff ff       	jmp    40533e <main+0x12be>
						text.setString(text.getString() + typedtext[0]);
  406061:	31 f6                	xor    %esi,%esi
  406063:	48 8d bd 90 df ff ff 	lea    -0x2070(%rbp),%rdi
  40606a:	e8 11 d2 ff ff       	call   403280 <_ZN2sf6StringixEm@plt>
  40606f:	8b 30                	mov    (%rax),%esi
  406071:	48 8d bd 30 e0 ff ff 	lea    -0x1fd0(%rbp),%rdi
  406078:	e8 43 d0 ff ff       	call   4030c0 <_ZN2sf6StringC1Ej@plt>
  40607d:	48 8d bd e0 fa ff ff 	lea    -0x520(%rbp),%rdi
  406084:	e8 27 d3 ff ff       	call   4033b0 <_ZNK2sf4Text9getStringEv@plt>
  406089:	48 89 c6             	mov    %rax,%rsi
  40608c:	48 8d 95 30 e0 ff ff 	lea    -0x1fd0(%rbp),%rdx
  406093:	48 8d bd 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdi
  40609a:	e8 31 d0 ff ff       	call   4030d0 <_ZN2sfplERKNS_6StringES2_@plt>
  40609f:	48 8d b5 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rsi
  4060a6:	48 8d bd e0 fa ff ff 	lea    -0x520(%rbp),%rdi
  4060ad:	e8 ae d3 ff ff       	call   403460 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  4060b2:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  4060b9:	48 8d 85 60 e0 ff ff 	lea    -0x1fa0(%rbp),%rax
  4060c0:	48 89 85 b0 de ff ff 	mov    %rax,-0x2150(%rbp)
  4060c7:	48 39 c7             	cmp    %rax,%rdi
  4060ca:	74 14                	je     4060e0 <main+0x2060>
  4060cc:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  4060d3:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4060da:	00 
  4060db:	e8 40 d1 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  4060e0:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
	if (!_M_is_local())
  4060e7:	48 8d 85 40 e0 ff ff 	lea    -0x1fc0(%rbp),%rax
  4060ee:	48 89 85 b8 de ff ff 	mov    %rax,-0x2148(%rbp)
  4060f5:	48 39 c7             	cmp    %rax,%rdi
  4060f8:	74 14                	je     40610e <main+0x208e>
  4060fa:	48 8b 85 40 e0 ff ff 	mov    -0x1fc0(%rbp),%rax
  406101:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  406108:	00 
  406109:	e8 12 d1 ff ff       	call   403220 <_ZdlPvm@plt>
						typedtext = typedtext.toAnsiString().substr(1);
  40610e:	48 8d 85 38 df ff ff 	lea    -0x20c8(%rbp),%rax
  406115:	4c 8d ad 30 df ff ff 	lea    -0x20d0(%rbp),%r13
  40611c:	48 89 c7             	mov    %rax,%rdi
  40611f:	48 89 85 c0 de ff ff 	mov    %rax,-0x2140(%rbp)
  406126:	4c 8d a5 10 e0 ff ff 	lea    -0x1ff0(%rbp),%r12
  40612d:	e8 8e d3 ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  406132:	4c 89 ef             	mov    %r13,%rdi
  406135:	e8 86 d3 ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  40613a:	4c 89 ea             	mov    %r13,%rdx
  40613d:	48 8d b5 90 df ff ff 	lea    -0x2070(%rbp),%rsi
  406144:	4c 89 e7             	mov    %r12,%rdi
  406147:	e8 04 d3 ff ff       	call   403450 <_ZNK2sf6String12toAnsiStringB5cxx11ERKSt6locale@plt>
  40614c:	48 8d 85 30 e0 ff ff 	lea    -0x1fd0(%rbp),%rax
  406153:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
  406157:	ba 01 00 00 00       	mov    $0x1,%edx
  40615c:	4c 89 e6             	mov    %r12,%rsi
  40615f:	48 89 c7             	mov    %rax,%rdi
  406162:	e8 c9 d0 ff ff       	call   403230 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@plt>
  406167:	48 8b 95 c0 de ff ff 	mov    -0x2140(%rbp),%rdx
  40616e:	48 8d b5 30 e0 ff ff 	lea    -0x1fd0(%rbp),%rsi
  406175:	48 8d bd 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdi
  40617c:	e8 1f cf ff ff       	call   4030a0 <_ZN2sf6StringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6locale@plt>
  406181:	48 8d b5 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rsi
  406188:	48 8d bd 90 df ff ff 	lea    -0x2070(%rbp),%rdi
  40618f:	e8 8c d2 ff ff       	call   403420 <_ZN2sf6StringaSERKS0_@plt>
      { return _M_dataplus._M_p; }
  406194:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  40619b:	48 3b bd b0 de ff ff 	cmp    -0x2150(%rbp),%rdi
  4061a2:	74 14                	je     4061b8 <main+0x2138>
  4061a4:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  4061ab:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4061b2:	00 
  4061b3:	e8 68 d0 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  4061b8:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
	if (!_M_is_local())
  4061bf:	48 3b bd b8 de ff ff 	cmp    -0x2148(%rbp),%rdi
  4061c6:	74 10                	je     4061d8 <main+0x2158>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4061c8:	48 8b 85 40 e0 ff ff 	mov    -0x1fc0(%rbp),%rax
  4061cf:	48 8d 70 01          	lea    0x1(%rax),%rsi
  4061d3:	e8 48 d0 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  4061d8:	48 8b bd 10 e0 ff ff 	mov    -0x1ff0(%rbp),%rdi
	if (!_M_is_local())
  4061df:	48 8d 85 20 e0 ff ff 	lea    -0x1fe0(%rbp),%rax
  4061e6:	48 39 c7             	cmp    %rax,%rdi
  4061e9:	74 10                	je     4061fb <main+0x217b>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4061eb:	48 8b 85 20 e0 ff ff 	mov    -0x1fe0(%rbp),%rax
  4061f2:	48 8d 70 01          	lea    0x1(%rax),%rsi
  4061f6:	e8 25 d0 ff ff       	call   403220 <_ZdlPvm@plt>
  4061fb:	4c 89 ef             	mov    %r13,%rdi
  4061fe:	e8 fd d0 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
  406203:	48 8b bd c0 de ff ff 	mov    -0x2140(%rbp),%rdi
  40620a:	e8 f1 d0 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
  40620f:	e9 4a ed ff ff       	jmp    404f5e <main+0xede>
						text.setString(text.getString() + typedtext[0]);
  406214:	31 f6                	xor    %esi,%esi
  406216:	48 8d bd 90 df ff ff 	lea    -0x2070(%rbp),%rdi
  40621d:	e8 5e d0 ff ff       	call   403280 <_ZN2sf6StringixEm@plt>
  406222:	8b 30                	mov    (%rax),%esi
  406224:	48 8d bd 30 e0 ff ff 	lea    -0x1fd0(%rbp),%rdi
  40622b:	e8 90 ce ff ff       	call   4030c0 <_ZN2sf6StringC1Ej@plt>
  406230:	48 8d bd e0 fa ff ff 	lea    -0x520(%rbp),%rdi
  406237:	e8 74 d1 ff ff       	call   4033b0 <_ZNK2sf4Text9getStringEv@plt>
  40623c:	48 89 c6             	mov    %rax,%rsi
  40623f:	48 8d 95 30 e0 ff ff 	lea    -0x1fd0(%rbp),%rdx
  406246:	48 8d bd 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdi
  40624d:	e8 7e ce ff ff       	call   4030d0 <_ZN2sfplERKNS_6StringES2_@plt>
  406252:	48 8d b5 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rsi
  406259:	48 8d bd e0 fa ff ff 	lea    -0x520(%rbp),%rdi
  406260:	e8 fb d1 ff ff       	call   403460 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  406265:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  40626c:	48 8d 85 60 e0 ff ff 	lea    -0x1fa0(%rbp),%rax
  406273:	48 89 85 b0 de ff ff 	mov    %rax,-0x2150(%rbp)
  40627a:	48 39 c7             	cmp    %rax,%rdi
  40627d:	74 14                	je     406293 <main+0x2213>
  40627f:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  406286:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  40628d:	00 
  40628e:	e8 8d cf ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  406293:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
	if (!_M_is_local())
  40629a:	48 8d 85 40 e0 ff ff 	lea    -0x1fc0(%rbp),%rax
  4062a1:	48 89 85 b8 de ff ff 	mov    %rax,-0x2148(%rbp)
  4062a8:	48 39 c7             	cmp    %rax,%rdi
  4062ab:	74 14                	je     4062c1 <main+0x2241>
  4062ad:	48 8b 85 40 e0 ff ff 	mov    -0x1fc0(%rbp),%rax
  4062b4:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4062bb:	00 
  4062bc:	e8 5f cf ff ff       	call   403220 <_ZdlPvm@plt>
						typedtext = typedtext.toAnsiString().substr(1);
  4062c1:	48 8d 85 38 df ff ff 	lea    -0x20c8(%rbp),%rax
  4062c8:	4c 8d ad 30 df ff ff 	lea    -0x20d0(%rbp),%r13
  4062cf:	48 89 c7             	mov    %rax,%rdi
  4062d2:	48 89 85 c0 de ff ff 	mov    %rax,-0x2140(%rbp)
  4062d9:	4c 8d a5 10 e0 ff ff 	lea    -0x1ff0(%rbp),%r12
  4062e0:	e8 db d1 ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  4062e5:	4c 89 ef             	mov    %r13,%rdi
  4062e8:	e8 d3 d1 ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  4062ed:	4c 89 ea             	mov    %r13,%rdx
  4062f0:	48 8d b5 90 df ff ff 	lea    -0x2070(%rbp),%rsi
  4062f7:	4c 89 e7             	mov    %r12,%rdi
  4062fa:	e8 51 d1 ff ff       	call   403450 <_ZNK2sf6String12toAnsiStringB5cxx11ERKSt6locale@plt>
  4062ff:	48 8d 85 30 e0 ff ff 	lea    -0x1fd0(%rbp),%rax
  406306:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
  40630a:	ba 01 00 00 00       	mov    $0x1,%edx
  40630f:	4c 89 e6             	mov    %r12,%rsi
  406312:	48 89 c7             	mov    %rax,%rdi
  406315:	e8 16 cf ff ff       	call   403230 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@plt>
  40631a:	48 8b 95 c0 de ff ff 	mov    -0x2140(%rbp),%rdx
  406321:	48 8d b5 30 e0 ff ff 	lea    -0x1fd0(%rbp),%rsi
  406328:	48 8d bd 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdi
  40632f:	e8 6c cd ff ff       	call   4030a0 <_ZN2sf6StringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6locale@plt>
  406334:	48 8d b5 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rsi
  40633b:	48 8d bd 90 df ff ff 	lea    -0x2070(%rbp),%rdi
  406342:	e8 d9 d0 ff ff       	call   403420 <_ZN2sf6StringaSERKS0_@plt>
      { return _M_dataplus._M_p; }
  406347:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  40634e:	48 3b bd b0 de ff ff 	cmp    -0x2150(%rbp),%rdi
  406355:	74 14                	je     40636b <main+0x22eb>
  406357:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  40635e:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  406365:	00 
  406366:	e8 b5 ce ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  40636b:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
	if (!_M_is_local())
  406372:	48 3b bd b8 de ff ff 	cmp    -0x2148(%rbp),%rdi
  406379:	74 10                	je     40638b <main+0x230b>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  40637b:	48 8b 85 40 e0 ff ff 	mov    -0x1fc0(%rbp),%rax
  406382:	48 8d 70 01          	lea    0x1(%rax),%rsi
  406386:	e8 95 ce ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  40638b:	48 8b bd 10 e0 ff ff 	mov    -0x1ff0(%rbp),%rdi
	if (!_M_is_local())
  406392:	48 8d 85 20 e0 ff ff 	lea    -0x1fe0(%rbp),%rax
  406399:	48 39 c7             	cmp    %rax,%rdi
  40639c:	74 10                	je     4063ae <main+0x232e>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  40639e:	48 8b 85 20 e0 ff ff 	mov    -0x1fe0(%rbp),%rax
  4063a5:	48 8d 70 01          	lea    0x1(%rax),%rsi
  4063a9:	e8 72 ce ff ff       	call   403220 <_ZdlPvm@plt>
  4063ae:	4c 89 ef             	mov    %r13,%rdi
  4063b1:	e8 4a cf ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
  4063b6:	48 8b bd c0 de ff ff 	mov    -0x2140(%rbp),%rdi
  4063bd:	e8 3e cf ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
  4063c2:	e9 af e8 ff ff       	jmp    404c76 <main+0xbf6>
  4063c7:	b8 f0 bc 40 00       	mov    $0x40bcf0,%eax
      { return _M_dataplus._M_p; }
  4063cc:	48 8b bd f0 df ff ff 	mov    -0x2010(%rbp),%rdi
  4063d3:	66 48 0f 6e d8       	movq   %rax,%xmm3
	if (!_M_is_local())
  4063d8:	48 8d 85 00 e0 ff ff 	lea    -0x2000(%rbp),%rax
  4063df:	0f 16 1d b2 31 00 00 	movhps 0x31b2(%rip),%xmm3        # 409598 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xf8>
  4063e6:	0f 29 9d c0 de ff ff 	movaps %xmm3,-0x2140(%rbp)
  4063ed:	48 39 c7             	cmp    %rax,%rdi
  4063f0:	74 10                	je     406402 <main+0x2382>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4063f2:	48 8b 85 00 e0 ff ff 	mov    -0x2000(%rbp),%rax
  4063f9:	48 8d 70 01          	lea    0x1(%rax),%rsi
  4063fd:	e8 1e ce ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  406402:	48 8b bd d0 df ff ff 	mov    -0x2030(%rbp),%rdi
	if (!_M_is_local())
  406409:	48 8d 85 e0 df ff ff 	lea    -0x2020(%rbp),%rax
  406410:	48 39 c7             	cmp    %rax,%rdi
  406413:	74 10                	je     406425 <main+0x23a5>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  406415:	48 8b 85 e0 df ff ff 	mov    -0x2020(%rbp),%rax
  40641c:	48 8d 70 01          	lea    0x1(%rax),%rsi
  406420:	e8 fb cd ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  406425:	48 8b bd b0 df ff ff 	mov    -0x2050(%rbp),%rdi
	if (!_M_is_local())
  40642c:	48 8d 85 c0 df ff ff 	lea    -0x2040(%rbp),%rax
  406433:	48 39 c7             	cmp    %rax,%rdi
  406436:	74 14                	je     40644c <main+0x23cc>
  406438:	48 8b 85 c0 df ff ff 	mov    -0x2040(%rbp),%rax
  40643f:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  406446:	00 
  406447:	e8 d4 cd ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  40644c:	48 8b bd 90 df ff ff 	mov    -0x2070(%rbp),%rdi
	if (!_M_is_local())
  406453:	48 8d 85 a0 df ff ff 	lea    -0x2060(%rbp),%rax
  40645a:	48 39 c7             	cmp    %rax,%rdi
  40645d:	74 14                	je     406473 <main+0x23f3>
  40645f:	48 8b 85 a0 df ff ff 	mov    -0x2060(%rbp),%rax
  406466:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  40646d:	00 
  40646e:	e8 ad cd ff ff       	call   403220 <_ZdlPvm@plt>
}
  406473:	48 8d bd 50 e1 ff ff 	lea    -0x1eb0(%rbp),%rdi
  40647a:	e8 b1 ce ff ff       	call   403330 <_ZN2sf5MusicD1Ev@plt>
  40647f:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  406486:	e8 05 1d 00 00       	call   408190 <_ZN2sf4TextD1Ev>
  40648b:	48 8d bd e0 fa ff ff 	lea    -0x520(%rbp),%rdi
  406492:	e8 f9 1c 00 00       	call   408190 <_ZN2sf4TextD1Ev>
  406497:	48 8d bd c0 e0 ff ff 	lea    -0x1f40(%rbp),%rdi
  40649e:	e8 ad cd ff ff       	call   403250 <_ZN2sf4FontD1Ev@plt>
  4064a3:	66 0f 6f 95 c0 de ff 	movdqa -0x2140(%rbp),%xmm2
  4064aa:	ff 
  4064ab:	48 8d bd 80 f9 ff ff 	lea    -0x680(%rbp),%rdi
  4064b2:	0f 29 95 80 f9 ff ff 	movaps %xmm2,-0x680(%rbp)
  4064b9:	e8 a2 cb ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4064be:	66 0f 6f 95 c0 de ff 	movdqa -0x2140(%rbp),%xmm2
  4064c5:	ff 
  4064c6:	48 8d bd 20 f8 ff ff 	lea    -0x7e0(%rbp),%rdi
  4064cd:	0f 29 95 20 f8 ff ff 	movaps %xmm2,-0x7e0(%rbp)
  4064d4:	e8 87 cb ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4064d9:	66 0f 6f 95 c0 de ff 	movdqa -0x2140(%rbp),%xmm2
  4064e0:	ff 
  4064e1:	48 8d bd c0 f6 ff ff 	lea    -0x940(%rbp),%rdi
  4064e8:	0f 29 95 c0 f6 ff ff 	movaps %xmm2,-0x940(%rbp)
  4064ef:	e8 6c cb ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4064f4:	66 0f 6f 95 c0 de ff 	movdqa -0x2140(%rbp),%xmm2
  4064fb:	ff 
  4064fc:	48 8d bd 60 f5 ff ff 	lea    -0xaa0(%rbp),%rdi
  406503:	0f 29 95 60 f5 ff ff 	movaps %xmm2,-0xaa0(%rbp)
  40650a:	e8 51 cb ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  40650f:	66 0f 6f 95 c0 de ff 	movdqa -0x2140(%rbp),%xmm2
  406516:	ff 
  406517:	48 8d bd 00 f4 ff ff 	lea    -0xc00(%rbp),%rdi
  40651e:	0f 29 95 00 f4 ff ff 	movaps %xmm2,-0xc00(%rbp)
  406525:	e8 36 cb ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  40652a:	66 0f 6f 95 c0 de ff 	movdqa -0x2140(%rbp),%xmm2
  406531:	ff 
  406532:	48 8d bd a0 f2 ff ff 	lea    -0xd60(%rbp),%rdi
  406539:	0f 29 95 a0 f2 ff ff 	movaps %xmm2,-0xd60(%rbp)
  406540:	e8 1b cb ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  406545:	66 0f 6f 95 c0 de ff 	movdqa -0x2140(%rbp),%xmm2
  40654c:	ff 
  40654d:	48 8d bd 40 f1 ff ff 	lea    -0xec0(%rbp),%rdi
  406554:	0f 29 95 40 f1 ff ff 	movaps %xmm2,-0xec0(%rbp)
  40655b:	e8 00 cb ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  406560:	66 0f 6f 95 c0 de ff 	movdqa -0x2140(%rbp),%xmm2
  406567:	ff 
  406568:	48 8d bd e0 ef ff ff 	lea    -0x1020(%rbp),%rdi
  40656f:	0f 29 95 e0 ef ff ff 	movaps %xmm2,-0x1020(%rbp)
  406576:	e8 e5 ca ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  40657b:	66 0f 6f 95 c0 de ff 	movdqa -0x2140(%rbp),%xmm2
  406582:	ff 
  406583:	48 8d bd 80 ee ff ff 	lea    -0x1180(%rbp),%rdi
  40658a:	0f 29 95 80 ee ff ff 	movaps %xmm2,-0x1180(%rbp)
  406591:	e8 ca ca ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  406596:	66 0f 6f 95 c0 de ff 	movdqa -0x2140(%rbp),%xmm2
  40659d:	ff 
  40659e:	48 8d bd 20 ed ff ff 	lea    -0x12e0(%rbp),%rdi
  4065a5:	0f 29 95 20 ed ff ff 	movaps %xmm2,-0x12e0(%rbp)
  4065ac:	e8 af ca ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4065b1:	66 0f 6f 95 c0 de ff 	movdqa -0x2140(%rbp),%xmm2
  4065b8:	ff 
  4065b9:	48 8d bd c0 eb ff ff 	lea    -0x1440(%rbp),%rdi
  4065c0:	0f 29 95 c0 eb ff ff 	movaps %xmm2,-0x1440(%rbp)
  4065c7:	e8 94 ca ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4065cc:	66 0f 6f 95 c0 de ff 	movdqa -0x2140(%rbp),%xmm2
  4065d3:	ff 
  4065d4:	48 8d bd 60 ea ff ff 	lea    -0x15a0(%rbp),%rdi
  4065db:	0f 29 95 60 ea ff ff 	movaps %xmm2,-0x15a0(%rbp)
  4065e2:	e8 79 ca ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  4065e7:	66 0f 6f 95 c0 de ff 	movdqa -0x2140(%rbp),%xmm2
  4065ee:	ff 
  4065ef:	48 8d bd 00 e9 ff ff 	lea    -0x1700(%rbp),%rdi
  4065f6:	0f 29 95 00 e9 ff ff 	movaps %xmm2,-0x1700(%rbp)
  4065fd:	e8 5e ca ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  406602:	66 0f 6f 95 c0 de ff 	movdqa -0x2140(%rbp),%xmm2
  406609:	ff 
  40660a:	48 8d bd a0 e7 ff ff 	lea    -0x1860(%rbp),%rdi
  406611:	0f 29 95 a0 e7 ff ff 	movaps %xmm2,-0x1860(%rbp)
  406618:	e8 43 ca ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  40661d:	66 0f 6f 95 c0 de ff 	movdqa -0x2140(%rbp),%xmm2
  406624:	ff 
  406625:	48 8d bd 40 e6 ff ff 	lea    -0x19c0(%rbp),%rdi
  40662c:	0f 29 95 40 e6 ff ff 	movaps %xmm2,-0x19c0(%rbp)
  406633:	e8 28 ca ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  406638:	66 0f 6f 95 c0 de ff 	movdqa -0x2140(%rbp),%xmm2
  40663f:	ff 
  406640:	48 8d bd e0 e4 ff ff 	lea    -0x1b20(%rbp),%rdi
  406647:	0f 29 95 e0 e4 ff ff 	movaps %xmm2,-0x1b20(%rbp)
  40664e:	e8 0d ca ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  406653:	66 0f 6f 95 c0 de ff 	movdqa -0x2140(%rbp),%xmm2
  40665a:	ff 
  40665b:	48 8d bd 80 e3 ff ff 	lea    -0x1c80(%rbp),%rdi
  406662:	0f 29 95 80 e3 ff ff 	movaps %xmm2,-0x1c80(%rbp)
  406669:	e8 f2 c9 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  40666e:	66 0f 6f 95 c0 de ff 	movdqa -0x2140(%rbp),%xmm2
  406675:	ff 
  406676:	48 8d bd 20 e2 ff ff 	lea    -0x1de0(%rbp),%rdi
  40667d:	0f 29 95 20 e2 ff ff 	movaps %xmm2,-0x1de0(%rbp)
  406684:	e8 d7 c9 ff ff       	call   403060 <_ZN2sf5ShapeD2Ev@plt>
  406689:	48 8d bd c0 fd ff ff 	lea    -0x240(%rbp),%rdi
  406690:	e8 ab cd ff ff       	call   403440 <_ZN2sf12RenderWindowD1Ev@plt>
  406695:	31 c0                	xor    %eax,%eax
  406697:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
  40669b:	5b                   	pop    %rbx
  40669c:	41 5c                	pop    %r12
  40669e:	41 5d                	pop    %r13
  4066a0:	41 5e                	pop    %r14
  4066a2:	41 5f                	pop    %r15
  4066a4:	5d                   	pop    %rbp
  4066a5:	c3                   	ret    
				if(temp_time >= sf::seconds(3.0f) && i < BUTTON_AMOUNT && flag){
  4066a6:	83 bd 98 de ff ff 05 	cmpl   $0x5,-0x2168(%rbp)
  4066ad:	0f 8f 5c e6 ff ff    	jg     404d0f <main+0xc8f>
  4066b3:	84 d2                	test   %dl,%dl
  4066b5:	0f 84 4b e6 ff ff    	je     404d06 <main+0xc86>
					temp_clock.restart();
  4066bb:	48 8d bd 10 df ff ff 	lea    -0x20f0(%rbp),%rdi
  4066c2:	e8 09 cd ff ff       	call   4033d0 <_ZN2sf5Clock7restartEv@plt>
					writeGreenLed(fd, seqGreenLeds[i]);
  4066c7:	48 63 85 98 de ff ff 	movslq -0x2168(%rbp),%rax
	ioctl(fd, WR_GREEN_LEDS);
  4066ce:	be 66 61 00 00       	mov    $0x6166,%esi
  4066d3:	44 89 ff             	mov    %r15d,%edi
					writeGreenLed(fd, seqGreenLeds[i]);
  4066d6:	49 89 c6             	mov    %rax,%r14
  4066d9:	8b 84 85 10 e0 ff ff 	mov    -0x1ff0(%rbp,%rax,4),%eax
  4066e0:	89 85 38 df ff ff    	mov    %eax,-0x20c8(%rbp)
	ioctl(fd, WR_GREEN_LEDS);
  4066e6:	31 c0                	xor    %eax,%eax
  4066e8:	e8 03 cc ff ff       	call   4032f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  4066ed:	ba 04 00 00 00       	mov    $0x4,%edx
  4066f2:	48 8d b5 38 df ff ff 	lea    -0x20c8(%rbp),%rsi
  4066f9:	44 89 ff             	mov    %r15d,%edi
  4066fc:	e8 df c9 ff ff       	call   4030e0 <write@plt>
					i++;
  406701:	41 83 c6 01          	add    $0x1,%r14d
  406705:	44 89 b5 98 de ff ff 	mov    %r14d,-0x2168(%rbp)
  40670c:	e9 06 e6 ff ff       	jmp    404d17 <main+0xc97>
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
	__out.setstate(ios_base::badbit);
      else
	__ostream_insert(__out, __s,
  406711:	ba 1e 00 00 00       	mov    $0x1e,%edx
  406716:	be a0 92 40 00       	mov    $0x4092a0,%esi
  40671b:	bf 00 c3 40 00       	mov    $0x40c300,%edi
  406720:	e8 3b cb ff ff       	call   403260 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   *  for more on this subject.
  */
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }
  406725:	48 8b 05 d4 5b 00 00 	mov    0x5bd4(%rip),%rax        # 40c300 <_ZSt4cout@@GLIBCXX_3.4>
  40672c:	48 8b 40 e8          	mov    -0x18(%rax),%rax
  406730:	48 8b 80 f0 c3 40 00 	mov    0x40c3f0(%rax),%rax

  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
  406737:	48 85 c0             	test   %rax,%rax
  40673a:	0f 84 0e 07 00 00    	je     406e4e <main+0x2dce>
       *  @return  The converted character.
      */
      char_type
      widen(char __c) const
      {
	if (_M_widen_ok)
  406740:	80 78 38 00          	cmpb   $0x0,0x38(%rax)
  406744:	0f 84 41 05 00 00    	je     406c8b <main+0x2c0b>
	  return _M_widen[static_cast<unsigned char>(__c)];
  40674a:	0f be 70 43          	movsbl 0x43(%rax),%esi
  40674e:	e9 54 05 00 00       	jmp    406ca7 <main+0x2c27>
				unsigned int mask = switches ^ oldSwitches;
  406753:	31 c3                	xor    %eax,%ebx
							if (temp == 1)
  406755:	f6 c3 01             	test   $0x1,%bl
  406758:	74 23                	je     40677d <main+0x26fd>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  40675a:	f3 0f 7e 85 b0 e0 ff 	movq   -0x1f50(%rbp),%xmm0
  406761:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  406762:	83 b5 a8 e0 ff ff 01 	xorl   $0x1,-0x1f58(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  406769:	f3 0f 7e 0d 0f 2e 00 	movq   0x2e0f(%rip),%xmm1        # 409580 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  406770:	00 
  406771:	66 0f ef c1          	pxor   %xmm1,%xmm0
  406775:	66 0f d6 85 b0 e0 ff 	movq   %xmm0,-0x1f50(%rbp)
  40677c:	ff 
							if (temp == 1)
  40677d:	f6 c3 02             	test   $0x2,%bl
  406780:	74 2a                	je     4067ac <main+0x272c>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  406782:	f3 0f 7e 85 ac e0 ff 	movq   -0x1f54(%rbp),%xmm0
  406789:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  40678a:	83 b5 a4 e0 ff ff 01 	xorl   $0x1,-0x1f5c(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  406791:	f3 0f 7e 0d e7 2d 00 	movq   0x2de7(%rip),%xmm1        # 409580 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  406798:	00 
									currMatrix[i * 3 + (j + 1)] ^= 1;
  406799:	83 b5 b4 e0 ff ff 01 	xorl   $0x1,-0x1f4c(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4067a0:	66 0f ef c1          	pxor   %xmm1,%xmm0
  4067a4:	66 0f d6 85 ac e0 ff 	movq   %xmm0,-0x1f54(%rbp)
  4067ab:	ff 
							mask = mask >> 1;
  4067ac:	89 da                	mov    %ebx,%edx
  4067ae:	c1 ea 03             	shr    $0x3,%edx
							if (temp == 1)
  4067b1:	f6 c3 04             	test   $0x4,%bl
  4067b4:	74 23                	je     4067d9 <main+0x2759>
								currMatrix[i*3 + j] ^= 1;
  4067b6:	f3 0f 7e 85 ac e0 ff 	movq   -0x1f54(%rbp),%xmm0
  4067bd:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  4067be:	83 b5 a0 e0 ff ff 01 	xorl   $0x1,-0x1f60(%rbp)
								currMatrix[i*3 + j] ^= 1;
  4067c5:	f3 0f 7e 0d b3 2d 00 	movq   0x2db3(%rip),%xmm1        # 409580 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  4067cc:	00 
  4067cd:	66 0f ef c1          	pxor   %xmm1,%xmm0
  4067d1:	66 0f d6 85 ac e0 ff 	movq   %xmm0,-0x1f54(%rbp)
  4067d8:	ff 
							if (temp == 1)
  4067d9:	f6 c2 01             	test   $0x1,%dl
  4067dc:	74 2a                	je     406808 <main+0x2788>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4067de:	f3 0f 7e 85 a4 e0 ff 	movq   -0x1f5c(%rbp),%xmm0
  4067e5:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  4067e6:	83 b5 9c e0 ff ff 01 	xorl   $0x1,-0x1f64(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4067ed:	f3 0f 7e 0d 8b 2d 00 	movq   0x2d8b(%rip),%xmm1        # 409580 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  4067f4:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  4067f5:	83 b5 b4 e0 ff ff 01 	xorl   $0x1,-0x1f4c(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4067fc:	66 0f ef c1          	pxor   %xmm1,%xmm0
  406800:	66 0f d6 85 a4 e0 ff 	movq   %xmm0,-0x1f5c(%rbp)
  406807:	ff 
							if (temp == 1)
  406808:	f6 c2 02             	test   $0x2,%dl
  40680b:	74 31                	je     40683e <main+0x27be>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  40680d:	f3 0f 7e 85 a0 e0 ff 	movq   -0x1f60(%rbp),%xmm0
  406814:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  406815:	83 b5 98 e0 ff ff 01 	xorl   $0x1,-0x1f68(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  40681c:	f3 0f 7e 0d 5c 2d 00 	movq   0x2d5c(%rip),%xmm1        # 409580 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  406823:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  406824:	83 b5 b0 e0 ff ff 01 	xorl   $0x1,-0x1f50(%rbp)
									currMatrix[i * 3 + (j + 1)] ^= 1;
  40682b:	83 b5 a8 e0 ff ff 01 	xorl   $0x1,-0x1f58(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  406832:	66 0f ef c1          	pxor   %xmm1,%xmm0
  406836:	66 0f d6 85 a0 e0 ff 	movq   %xmm0,-0x1f60(%rbp)
  40683d:	ff 
							mask = mask >> 1;
  40683e:	89 d8                	mov    %ebx,%eax
  406840:	c1 e8 06             	shr    $0x6,%eax
							if (temp == 1)
  406843:	80 e2 04             	and    $0x4,%dl
  406846:	74 2a                	je     406872 <main+0x27f2>
								currMatrix[i*3 + j] ^= 1;
  406848:	f3 0f 7e 85 a0 e0 ff 	movq   -0x1f60(%rbp),%xmm0
  40684f:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  406850:	83 b5 94 e0 ff ff 01 	xorl   $0x1,-0x1f6c(%rbp)
								currMatrix[i*3 + j] ^= 1;
  406857:	f3 0f 7e 0d 21 2d 00 	movq   0x2d21(%rip),%xmm1        # 409580 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  40685e:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  40685f:	83 b5 ac e0 ff ff 01 	xorl   $0x1,-0x1f54(%rbp)
								currMatrix[i*3 + j] ^= 1;
  406866:	66 0f ef c1          	pxor   %xmm1,%xmm0
  40686a:	66 0f d6 85 a0 e0 ff 	movq   %xmm0,-0x1f60(%rbp)
  406871:	ff 
							if (temp == 1)
  406872:	a8 01                	test   $0x1,%al
  406874:	74 2a                	je     4068a0 <main+0x2820>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  406876:	f3 0f 7e 85 98 e0 ff 	movq   -0x1f68(%rbp),%xmm0
  40687d:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  40687e:	83 b5 90 e0 ff ff 01 	xorl   $0x1,-0x1f70(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  406885:	f3 0f 7e 0d f3 2c 00 	movq   0x2cf3(%rip),%xmm1        # 409580 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  40688c:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  40688d:	83 b5 a8 e0 ff ff 01 	xorl   $0x1,-0x1f58(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  406894:	66 0f ef c1          	pxor   %xmm1,%xmm0
  406898:	66 0f d6 85 98 e0 ff 	movq   %xmm0,-0x1f68(%rbp)
  40689f:	ff 
							if (temp == 1)
  4068a0:	a8 02                	test   $0x2,%al
  4068a2:	74 31                	je     4068d5 <main+0x2855>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4068a4:	f3 0f 7e 85 94 e0 ff 	movq   -0x1f6c(%rbp),%xmm0
  4068ab:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  4068ac:	83 b5 8c e0 ff ff 01 	xorl   $0x1,-0x1f74(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4068b3:	f3 0f 7e 0d c5 2c 00 	movq   0x2cc5(%rip),%xmm1        # 409580 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  4068ba:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  4068bb:	83 b5 a4 e0 ff ff 01 	xorl   $0x1,-0x1f5c(%rbp)
									currMatrix[i * 3 + (j + 1)] ^= 1;
  4068c2:	83 b5 9c e0 ff ff 01 	xorl   $0x1,-0x1f64(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4068c9:	66 0f ef c1          	pxor   %xmm1,%xmm0
  4068cd:	66 0f d6 85 94 e0 ff 	movq   %xmm0,-0x1f6c(%rbp)
  4068d4:	ff 
							mask = mask >> 1;
  4068d5:	89 da                	mov    %ebx,%edx
  4068d7:	c1 ea 09             	shr    $0x9,%edx
							if (temp == 1)
  4068da:	a8 04                	test   $0x4,%al
  4068dc:	74 2a                	je     406908 <main+0x2888>
								currMatrix[i*3 + j] ^= 1;
  4068de:	f3 0f 7e 85 94 e0 ff 	movq   -0x1f6c(%rbp),%xmm0
  4068e5:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  4068e6:	83 b5 88 e0 ff ff 01 	xorl   $0x1,-0x1f78(%rbp)
								currMatrix[i*3 + j] ^= 1;
  4068ed:	f3 0f 7e 0d 8b 2c 00 	movq   0x2c8b(%rip),%xmm1        # 409580 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  4068f4:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  4068f5:	83 b5 a0 e0 ff ff 01 	xorl   $0x1,-0x1f60(%rbp)
								currMatrix[i*3 + j] ^= 1;
  4068fc:	66 0f ef c1          	pxor   %xmm1,%xmm0
  406900:	66 0f d6 85 94 e0 ff 	movq   %xmm0,-0x1f6c(%rbp)
  406907:	ff 
							if (temp == 1)
  406908:	f6 c2 01             	test   $0x1,%dl
  40690b:	74 2a                	je     406937 <main+0x28b7>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  40690d:	f3 0f 7e 85 8c e0 ff 	movq   -0x1f74(%rbp),%xmm0
  406914:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  406915:	83 b5 84 e0 ff ff 01 	xorl   $0x1,-0x1f7c(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  40691c:	f3 0f 7e 0d 5c 2c 00 	movq   0x2c5c(%rip),%xmm1        # 409580 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  406923:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  406924:	83 b5 9c e0 ff ff 01 	xorl   $0x1,-0x1f64(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  40692b:	66 0f ef c1          	pxor   %xmm1,%xmm0
  40692f:	66 0f d6 85 8c e0 ff 	movq   %xmm0,-0x1f74(%rbp)
  406936:	ff 
							if (temp == 1)
  406937:	f6 c2 02             	test   $0x2,%dl
  40693a:	74 31                	je     40696d <main+0x28ed>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  40693c:	f3 0f 7e 85 88 e0 ff 	movq   -0x1f78(%rbp),%xmm0
  406943:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  406944:	83 b5 80 e0 ff ff 01 	xorl   $0x1,-0x1f80(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  40694b:	f3 0f 7e 0d 2d 2c 00 	movq   0x2c2d(%rip),%xmm1        # 409580 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  406952:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  406953:	83 b5 98 e0 ff ff 01 	xorl   $0x1,-0x1f68(%rbp)
									currMatrix[i * 3 + (j + 1)] ^= 1;
  40695a:	83 b5 90 e0 ff ff 01 	xorl   $0x1,-0x1f70(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  406961:	66 0f ef c1          	pxor   %xmm1,%xmm0
  406965:	66 0f d6 85 88 e0 ff 	movq   %xmm0,-0x1f78(%rbp)
  40696c:	ff 
							mask = mask >> 1;
  40696d:	89 d8                	mov    %ebx,%eax
  40696f:	c1 e8 0c             	shr    $0xc,%eax
							if (temp == 1)
  406972:	80 e2 04             	and    $0x4,%dl
  406975:	74 2a                	je     4069a1 <main+0x2921>
								currMatrix[i*3 + j] ^= 1;
  406977:	f3 0f 7e 85 88 e0 ff 	movq   -0x1f78(%rbp),%xmm0
  40697e:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  40697f:	83 b5 7c e0 ff ff 01 	xorl   $0x1,-0x1f84(%rbp)
								currMatrix[i*3 + j] ^= 1;
  406986:	f3 0f 7e 0d f2 2b 00 	movq   0x2bf2(%rip),%xmm1        # 409580 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  40698d:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  40698e:	83 b5 94 e0 ff ff 01 	xorl   $0x1,-0x1f6c(%rbp)
								currMatrix[i*3 + j] ^= 1;
  406995:	66 0f ef c1          	pxor   %xmm1,%xmm0
  406999:	66 0f d6 85 88 e0 ff 	movq   %xmm0,-0x1f78(%rbp)
  4069a0:	ff 
							if (temp == 1)
  4069a1:	a8 01                	test   $0x1,%al
  4069a3:	74 2a                	je     4069cf <main+0x294f>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4069a5:	f3 0f 7e 85 80 e0 ff 	movq   -0x1f80(%rbp),%xmm0
  4069ac:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  4069ad:	83 b5 78 e0 ff ff 01 	xorl   $0x1,-0x1f88(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4069b4:	f3 0f 7e 0d c4 2b 00 	movq   0x2bc4(%rip),%xmm1        # 409580 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  4069bb:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  4069bc:	83 b5 90 e0 ff ff 01 	xorl   $0x1,-0x1f70(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4069c3:	66 0f ef c1          	pxor   %xmm1,%xmm0
  4069c7:	66 0f d6 85 80 e0 ff 	movq   %xmm0,-0x1f80(%rbp)
  4069ce:	ff 
							if (temp == 1)
  4069cf:	a8 02                	test   $0x2,%al
  4069d1:	74 31                	je     406a04 <main+0x2984>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4069d3:	f3 0f 7e 85 7c e0 ff 	movq   -0x1f84(%rbp),%xmm0
  4069da:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  4069db:	83 b5 74 e0 ff ff 01 	xorl   $0x1,-0x1f8c(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4069e2:	f3 0f 7e 0d 96 2b 00 	movq   0x2b96(%rip),%xmm1        # 409580 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  4069e9:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  4069ea:	83 b5 8c e0 ff ff 01 	xorl   $0x1,-0x1f74(%rbp)
									currMatrix[i * 3 + (j + 1)] ^= 1;
  4069f1:	83 b5 84 e0 ff ff 01 	xorl   $0x1,-0x1f7c(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4069f8:	66 0f ef c1          	pxor   %xmm1,%xmm0
  4069fc:	66 0f d6 85 7c e0 ff 	movq   %xmm0,-0x1f84(%rbp)
  406a03:	ff 
							mask = mask >> 1;
  406a04:	c1 eb 0f             	shr    $0xf,%ebx
							if (temp == 1)
  406a07:	a8 04                	test   $0x4,%al
  406a09:	74 2a                	je     406a35 <main+0x29b5>
								currMatrix[i*3 + j] ^= 1;
  406a0b:	f3 0f 7e 85 7c e0 ff 	movq   -0x1f84(%rbp),%xmm0
  406a12:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  406a13:	83 b5 70 e0 ff ff 01 	xorl   $0x1,-0x1f90(%rbp)
								currMatrix[i*3 + j] ^= 1;
  406a1a:	f3 0f 7e 0d 5e 2b 00 	movq   0x2b5e(%rip),%xmm1        # 409580 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  406a21:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  406a22:	83 b5 88 e0 ff ff 01 	xorl   $0x1,-0x1f78(%rbp)
								currMatrix[i*3 + j] ^= 1;
  406a29:	66 0f ef c1          	pxor   %xmm1,%xmm0
  406a2d:	66 0f d6 85 7c e0 ff 	movq   %xmm0,-0x1f84(%rbp)
  406a34:	ff 
							if (temp == 1)
  406a35:	f6 c3 01             	test   $0x1,%bl
  406a38:	74 23                	je     406a5d <main+0x29dd>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  406a3a:	f3 0f 7e 85 74 e0 ff 	movq   -0x1f8c(%rbp),%xmm0
  406a41:	ff 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  406a42:	83 b5 84 e0 ff ff 01 	xorl   $0x1,-0x1f7c(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  406a49:	f3 0f 7e 0d 2f 2b 00 	movq   0x2b2f(%rip),%xmm1        # 409580 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  406a50:	00 
  406a51:	66 0f ef c1          	pxor   %xmm1,%xmm0
  406a55:	66 0f d6 85 74 e0 ff 	movq   %xmm0,-0x1f8c(%rbp)
  406a5c:	ff 
							if (temp == 1)
  406a5d:	f6 c3 02             	test   $0x2,%bl
  406a60:	74 2a                	je     406a8c <main+0x2a0c>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  406a62:	f3 0f 7e 85 70 e0 ff 	movq   -0x1f90(%rbp),%xmm0
  406a69:	ff 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  406a6a:	83 b5 80 e0 ff ff 01 	xorl   $0x1,-0x1f80(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  406a71:	f3 0f 7e 0d 07 2b 00 	movq   0x2b07(%rip),%xmm1        # 409580 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  406a78:	00 
									currMatrix[i * 3 + (j + 1)] ^= 1;
  406a79:	83 b5 78 e0 ff ff 01 	xorl   $0x1,-0x1f88(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  406a80:	66 0f ef c1          	pxor   %xmm1,%xmm0
  406a84:	66 0f d6 85 70 e0 ff 	movq   %xmm0,-0x1f90(%rbp)
  406a8b:	ff 
							if (temp == 1)
  406a8c:	80 e3 04             	and    $0x4,%bl
  406a8f:	0f 85 29 02 00 00    	jne    406cbe <main+0x2c3e>
					for (int i = 5; i >= 0; i--)
  406a95:	4c 8d 8d ac e0 ff ff 	lea    -0x1f54(%rbp),%r9
				elapsedtime_text += clock_text.restart();
  406a9c:	41 b8 03 00 00 00    	mov    $0x3,%r8d
					redLeds = 0x00000;
  406aa2:	31 db                	xor    %ebx,%ebx
  406aa4:	0f 1f 40 00          	nopl   0x0(%rax)
						for (int j = 2; j >= 0; j--)
  406aa8:	41 8d 40 fd          	lea    -0x3(%r8),%eax
				elapsedtime_text += clock_text.restart();
  406aac:	4c 89 ce             	mov    %r9,%rsi
							for(int m = 1; m <= pot; ++m)
  406aaf:	85 c0                	test   %eax,%eax
  406ab1:	0f 8e c9 00 00 00    	jle    406b80 <main+0x2b00>
								redLeds += currMatrix[i * 3 + j] * m;
  406ab7:	8b 56 08             	mov    0x8(%rsi),%edx
  406aba:	01 d3                	add    %edx,%ebx
							for(int m = 1; m <= pot; ++m)
  406abc:	83 f8 01             	cmp    $0x1,%eax
  406abf:	0f 84 bb 00 00 00    	je     406b80 <main+0x2b00>
								redLeds += currMatrix[i * 3 + j] * m;
  406ac5:	8d 0c 12             	lea    (%rdx,%rdx,1),%ecx
  406ac8:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  406aca:	83 f8 02             	cmp    $0x2,%eax
  406acd:	0f 84 ad 00 00 00    	je     406b80 <main+0x2b00>
								redLeds += currMatrix[i * 3 + j] * m;
  406ad3:	01 d1                	add    %edx,%ecx
  406ad5:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  406ad7:	83 f8 03             	cmp    $0x3,%eax
  406ada:	0f 84 a0 00 00 00    	je     406b80 <main+0x2b00>
								redLeds += currMatrix[i * 3 + j] * m;
  406ae0:	8d 3c 95 00 00 00 00 	lea    0x0(,%rdx,4),%edi
  406ae7:	01 fb                	add    %edi,%ebx
							for(int m = 1; m <= pot; ++m)
  406ae9:	83 f8 04             	cmp    $0x4,%eax
  406aec:	0f 84 8e 00 00 00    	je     406b80 <main+0x2b00>
								redLeds += currMatrix[i * 3 + j] * m;
  406af2:	01 d7                	add    %edx,%edi
  406af4:	01 fb                	add    %edi,%ebx
							for(int m = 1; m <= pot; ++m)
  406af6:	83 f8 05             	cmp    $0x5,%eax
  406af9:	0f 84 81 00 00 00    	je     406b80 <main+0x2b00>
								redLeds += currMatrix[i * 3 + j] * m;
  406aff:	8d 1c 4b             	lea    (%rbx,%rcx,2),%ebx
							for(int m = 1; m <= pot; ++m)
  406b02:	83 f8 06             	cmp    $0x6,%eax
  406b05:	74 79                	je     406b80 <main+0x2b00>
								redLeds += currMatrix[i * 3 + j] * m;
  406b07:	8d 0c d5 00 00 00 00 	lea    0x0(,%rdx,8),%ecx
  406b0e:	89 cf                	mov    %ecx,%edi
  406b10:	29 d7                	sub    %edx,%edi
  406b12:	01 fb                	add    %edi,%ebx
							for(int m = 1; m <= pot; ++m)
  406b14:	83 f8 07             	cmp    $0x7,%eax
  406b17:	74 67                	je     406b80 <main+0x2b00>
								redLeds += currMatrix[i * 3 + j] * m;
  406b19:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  406b1b:	83 f8 08             	cmp    $0x8,%eax
  406b1e:	74 60                	je     406b80 <main+0x2b00>
								redLeds += currMatrix[i * 3 + j] * m;
  406b20:	01 d1                	add    %edx,%ecx
  406b22:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  406b24:	83 f8 09             	cmp    $0x9,%eax
  406b27:	74 57                	je     406b80 <main+0x2b00>
								redLeds += currMatrix[i * 3 + j] * m;
  406b29:	8d 0c 92             	lea    (%rdx,%rdx,4),%ecx
  406b2c:	01 c9                	add    %ecx,%ecx
  406b2e:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  406b30:	83 f8 0a             	cmp    $0xa,%eax
  406b33:	74 4b                	je     406b80 <main+0x2b00>
								redLeds += currMatrix[i * 3 + j] * m;
  406b35:	01 d1                	add    %edx,%ecx
  406b37:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  406b39:	83 f8 0b             	cmp    $0xb,%eax
  406b3c:	74 42                	je     406b80 <main+0x2b00>
								redLeds += currMatrix[i * 3 + j] * m;
  406b3e:	8d 0c 52             	lea    (%rdx,%rdx,2),%ecx
  406b41:	c1 e1 02             	shl    $0x2,%ecx
  406b44:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  406b46:	83 f8 0c             	cmp    $0xc,%eax
  406b49:	74 35                	je     406b80 <main+0x2b00>
								redLeds += currMatrix[i * 3 + j] * m;
  406b4b:	01 d1                	add    %edx,%ecx
  406b4d:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  406b4f:	83 f8 0d             	cmp    $0xd,%eax
  406b52:	74 2c                	je     406b80 <main+0x2b00>
								redLeds += currMatrix[i * 3 + j] * m;
  406b54:	6b ca 0e             	imul   $0xe,%edx,%ecx
  406b57:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  406b59:	83 f8 0e             	cmp    $0xe,%eax
  406b5c:	74 22                	je     406b80 <main+0x2b00>
								redLeds += currMatrix[i * 3 + j] * m;
  406b5e:	89 d1                	mov    %edx,%ecx
  406b60:	c1 e1 04             	shl    $0x4,%ecx
  406b63:	89 cf                	mov    %ecx,%edi
  406b65:	29 d7                	sub    %edx,%edi
  406b67:	01 fb                	add    %edi,%ebx
							for(int m = 1; m <= pot; ++m)
  406b69:	83 f8 0f             	cmp    $0xf,%eax
  406b6c:	74 12                	je     406b80 <main+0x2b00>
								redLeds += currMatrix[i * 3 + j] * m;
  406b6e:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  406b70:	83 f8 10             	cmp    $0x10,%eax
  406b73:	74 0b                	je     406b80 <main+0x2b00>
								redLeds += currMatrix[i * 3 + j] * m;
  406b75:	6b d2 11             	imul   $0x11,%edx,%edx
  406b78:	01 d3                	add    %edx,%ebx
							for(int m = 1; m <= pot; ++m)
  406b7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
						for (int j = 2; j >= 0; j--)
  406b80:	83 c0 01             	add    $0x1,%eax
  406b83:	48 83 ee 04          	sub    $0x4,%rsi
  406b87:	41 39 c0             	cmp    %eax,%r8d
  406b8a:	0f 85 1f ff ff ff    	jne    406aaf <main+0x2a2f>
					for (int i = 5; i >= 0; i--)
  406b90:	41 83 c0 03          	add    $0x3,%r8d
  406b94:	49 83 e9 0c          	sub    $0xc,%r9
  406b98:	41 83 f8 15          	cmp    $0x15,%r8d
  406b9c:	0f 85 06 ff ff ff    	jne    406aa8 <main+0x2a28>
	ioctl(fd, WR_RED_LEDS);
  406ba2:	be 65 61 00 00       	mov    $0x6165,%esi
  406ba7:	44 89 ff             	mov    %r15d,%edi
  406baa:	31 c0                	xor    %eax,%eax
  406bac:	89 9d 10 e0 ff ff    	mov    %ebx,-0x1ff0(%rbp)
  406bb2:	e8 39 c7 ff ff       	call   4032f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  406bb7:	ba 04 00 00 00       	mov    $0x4,%edx
  406bbc:	48 8d b5 10 e0 ff ff 	lea    -0x1ff0(%rbp),%rsi
  406bc3:	44 89 ff             	mov    %r15d,%edi
  406bc6:	e8 15 c5 ff ff       	call   4030e0 <write@plt>
}
  406bcb:	e9 e6 e7 ff ff       	jmp    4053b6 <main+0x1336>
					input[j] = button;
  406bd0:	48 63 c2             	movslq %edx,%rax
					j++;
  406bd3:	83 c2 01             	add    $0x1,%edx
  406bd6:	89 8d 8c de ff ff    	mov    %ecx,-0x2174(%rbp)
					input[j] = button;
  406bdc:	89 8c 85 70 df ff ff 	mov    %ecx,-0x2090(%rbp,%rax,4)
					j++;
  406be3:	89 95 90 de ff ff    	mov    %edx,-0x2170(%rbp)
				if (j >= BUTTON_AMOUNT){
  406be9:	83 bd 90 de ff ff 06 	cmpl   $0x6,-0x2170(%rbp)
  406bf0:	0f 85 17 e0 ff ff    	jne    404c0d <main+0xb8d>
  406bf6:	e9 98 e1 ff ff       	jmp    404d93 <main+0xd13>
		printf("Syntax: %s <device file path>\n", argv[0]);
  406bfb:	48 8b 36             	mov    (%rsi),%rsi
  406bfe:	bf c0 91 40 00       	mov    $0x4091c0,%edi
  406c03:	31 c0                	xor    %eax,%eax
  406c05:	e8 36 c4 ff ff       	call   403040 <printf@plt>
		return -EINVAL;
  406c0a:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
  406c0f:	e9 83 fa ff ff       	jmp    406697 <main+0x2617>
				else if (i >= BUTTON_AMOUNT && flag && temp_time >= sf::seconds(3.0f)){
  406c14:	f3 0f 10 05 ec 29 00 	movss  0x29ec(%rip),%xmm0        # 409608 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x168>
  406c1b:	00 
  406c1c:	e8 2f c5 ff ff       	call   403150 <_ZN2sf7secondsEf@plt>
  406c21:	48 8b bd 18 df ff ff 	mov    -0x20e8(%rbp),%rdi
  406c28:	48 89 c6             	mov    %rax,%rsi
  406c2b:	e8 70 c6 ff ff       	call   4032a0 <_ZN2sfgeENS_4TimeES0_@plt>
  406c30:	c7 85 98 de ff ff 06 	movl   $0x6,-0x2168(%rbp)
  406c37:	00 00 00 
  406c3a:	84 c0                	test   %al,%al
  406c3c:	0f 84 d5 e0 ff ff    	je     404d17 <main+0xc97>
	ioctl(fd, WR_GREEN_LEDS);
  406c42:	be 66 61 00 00       	mov    $0x6166,%esi
  406c47:	44 89 ff             	mov    %r15d,%edi
  406c4a:	31 c0                	xor    %eax,%eax
  406c4c:	c7 85 30 e0 ff ff 00 	movl   $0x0,-0x1fd0(%rbp)
  406c53:	00 00 00 
  406c56:	e8 95 c6 ff ff       	call   4032f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  406c5b:	4c 8d b5 30 e0 ff ff 	lea    -0x1fd0(%rbp),%r14
  406c62:	ba 04 00 00 00       	mov    $0x4,%edx
  406c67:	44 89 ff             	mov    %r15d,%edi
  406c6a:	4c 89 f6             	mov    %r14,%rsi
  406c6d:	e8 6e c4 ff ff       	call   4030e0 <write@plt>
					flag = 0;
  406c72:	c7 85 9c de ff ff 00 	movl   $0x0,-0x2164(%rbp)
  406c79:	00 00 00 
					i = 0;
  406c7c:	c7 85 98 de ff ff 00 	movl   $0x0,-0x2168(%rbp)
  406c83:	00 00 00 
  406c86:	e9 8c e0 ff ff       	jmp    404d17 <main+0xc97>
	this->_M_widen_init();
  406c8b:	48 89 c7             	mov    %rax,%rdi
  406c8e:	48 89 c3             	mov    %rax,%rbx
  406c91:	e8 da c5 ff ff       	call   403270 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
  406c96:	48 8b 03             	mov    (%rbx),%rax
  406c99:	48 89 df             	mov    %rbx,%rdi
  406c9c:	be 0a 00 00 00       	mov    $0xa,%esi
  406ca1:	ff 50 30             	call   *0x30(%rax)
  406ca4:	0f be f0             	movsbl %al,%esi
  406ca7:	bf 00 c3 40 00       	mov    $0x40c300,%edi
  406cac:	e8 7f c3 ff ff       	call   403030 <_ZNSo3putEc@plt>
  406cb1:	48 89 c7             	mov    %rax,%rdi
   *  This manipulator simply calls the stream's @c flush() member function.
  */
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
  406cb4:	e8 a7 c4 ff ff       	call   403160 <_ZNSo5flushEv@plt>
    { return flush(__os.put(__os.widen('\n'))); }
  406cb9:	e9 cf db ff ff       	jmp    40488d <main+0x80d>
								currMatrix[i*3 + j] ^= 1;
  406cbe:	f3 0f 7e 85 70 e0 ff 	movq   -0x1f90(%rbp),%xmm0
  406cc5:	ff 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  406cc6:	83 b5 7c e0 ff ff 01 	xorl   $0x1,-0x1f84(%rbp)
								currMatrix[i*3 + j] ^= 1;
  406ccd:	f3 0f 7e 0d ab 28 00 	movq   0x28ab(%rip),%xmm1        # 409580 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  406cd4:	00 
  406cd5:	66 0f ef c1          	pxor   %xmm1,%xmm0
  406cd9:	66 0f d6 85 70 e0 ff 	movq   %xmm0,-0x1f90(%rbp)
  406ce0:	ff 
  406ce1:	e9 af fd ff ff       	jmp    406a95 <main+0x2a15>
		fprintf(stderr, "Error opening file %s\n", argv[1]);
  406ce6:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  406cea:	48 8b 3d 2f 57 00 00 	mov    0x572f(%rip),%rdi        # 40c420 <stderr@@GLIBC_2.2.5>
  406cf1:	be 83 90 40 00       	mov    $0x409083,%esi
  406cf6:	31 c0                	xor    %eax,%eax
  406cf8:	e8 13 c6 ff ff       	call   403310 <fprintf@plt>
		return -EBUSY;
  406cfd:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
  406d02:	e9 90 f9 ff ff       	jmp    406697 <main+0x2617>
							printf("\n%d %d", answer[k], input[k]);
  406d07:	bf ee 90 40 00       	mov    $0x4090ee,%edi
  406d0c:	31 c0                	xor    %eax,%eax
  406d0e:	e8 2d c3 ff ff       	call   403040 <printf@plt>
							printf("errou\n");
  406d13:	bf f5 90 40 00       	mov    $0x4090f5,%edi
  406d18:	e8 63 c6 ff ff       	call   403380 <puts@plt>
							text.setString("");
  406d1d:	48 8d 85 38 df ff ff 	lea    -0x20c8(%rbp),%rax
  406d24:	49 89 c6             	mov    %rax,%r14
  406d27:	48 89 c7             	mov    %rax,%rdi
  406d2a:	48 89 85 c0 de ff ff 	mov    %rax,-0x2140(%rbp)
  406d31:	e8 8a c7 ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  406d36:	4c 89 f2             	mov    %r14,%rdx
  406d39:	be ed 90 40 00       	mov    $0x4090ed,%esi
  406d3e:	48 8d bd 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdi
  406d45:	e8 a6 c3 ff ff       	call   4030f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  406d4a:	48 8d b5 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rsi
  406d51:	48 8d bd e0 fa ff ff 	lea    -0x520(%rbp),%rdi
  406d58:	e8 03 c7 ff ff       	call   403460 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  406d5d:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  406d64:	48 8d 85 60 e0 ff ff 	lea    -0x1fa0(%rbp),%rax
  406d6b:	48 89 85 b0 de ff ff 	mov    %rax,-0x2150(%rbp)
  406d72:	48 39 c7             	cmp    %rax,%rdi
  406d75:	74 14                	je     406d8b <main+0x2d0b>
  406d77:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  406d7e:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  406d85:	00 
  406d86:	e8 95 c4 ff ff       	call   403220 <_ZdlPvm@plt>
  406d8b:	4c 8b b5 c0 de ff ff 	mov    -0x2140(%rbp),%r14
  406d92:	4c 89 f7             	mov    %r14,%rdi
  406d95:	e8 66 c5 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
							typedtext.insert(0, "BOOM!!!");
  406d9a:	4c 89 f7             	mov    %r14,%rdi
  406d9d:	e8 1e c7 ff ff       	call   4034c0 <_ZNSt6localeC1Ev@plt>
  406da2:	4c 89 f2             	mov    %r14,%rdx
  406da5:	be a6 90 40 00       	mov    $0x4090a6,%esi
  406daa:	48 8d bd 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdi
  406db1:	e8 3a c3 ff ff       	call   4030f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  406db6:	48 8d 95 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rdx
  406dbd:	31 f6                	xor    %esi,%esi
  406dbf:	48 8d bd 90 df ff ff 	lea    -0x2070(%rbp),%rdi
  406dc6:	e8 e5 c3 ff ff       	call   4031b0 <_ZN2sf6String6insertEmRKS0_@plt>
      { return _M_dataplus._M_p; }
  406dcb:	48 8b bd 50 e0 ff ff 	mov    -0x1fb0(%rbp),%rdi
	if (!_M_is_local())
  406dd2:	48 3b bd b0 de ff ff 	cmp    -0x2150(%rbp),%rdi
  406dd9:	74 14                	je     406def <main+0x2d6f>
  406ddb:	48 8b 85 60 e0 ff ff 	mov    -0x1fa0(%rbp),%rax
  406de2:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  406de9:	00 
  406dea:	e8 31 c4 ff ff       	call   403220 <_ZdlPvm@plt>
  406def:	48 8b bd c0 de ff ff 	mov    -0x2140(%rbp),%rdi
  406df6:	e8 05 c5 ff ff       	call   403300 <_ZNSt6localeD1Ev@plt>
							clock_text.restart();
  406dfb:	48 8d bd 00 df ff ff 	lea    -0x2100(%rbp),%rdi
  406e02:	e8 c9 c5 ff ff       	call   4033d0 <_ZN2sf5Clock7restartEv@plt>
  406e07:	c7 85 90 de ff ff 06 	movl   $0x6,-0x2170(%rbp)
  406e0e:	00 00 00 
							flag_correct = 0;
  406e11:	c7 85 88 de ff ff 00 	movl   $0x0,-0x2178(%rbp)
  406e18:	00 00 00 
							screen = 6;
  406e1b:	c7 85 ac de ff ff 06 	movl   $0x6,-0x2154(%rbp)
  406e22:	00 00 00 
  406e25:	e9 e3 dd ff ff       	jmp    404c0d <main+0xb8d>
	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
  406e2a:	31 c9                	xor    %ecx,%ecx
  406e2c:	ba 01 00 00 00       	mov    $0x1,%edx
  406e31:	be ae 90 40 00       	mov    $0x4090ae,%esi
  406e36:	31 c0                	xor    %eax,%eax
  406e38:	bf f0 93 40 00       	mov    $0x4093f0,%edi
  406e3d:	e8 0e c5 ff ff       	call   403350 <_ZSt24__throw_out_of_range_fmtPKcz@plt>
      { return _M_dataplus._M_p; }
  406e42:	48 8b bd b8 de ff ff 	mov    -0x2148(%rbp),%rdi
  406e49:	e9 b4 ec ff ff       	jmp    405b02 <main+0x1a82>
	__throw_bad_cast();
  406e4e:	e8 6d c4 ff ff       	call   4032c0 <_ZSt16__throw_bad_castv@plt>
  406e53:	48 89 c3             	mov    %rax,%rbx
  406e56:	e9 aa c7 ff ff       	jmp    403605 <main.cold+0x24>
  406e5b:	48 89 c3             	mov    %rax,%rbx
  406e5e:	e9 00 cb ff ff       	jmp    403963 <main.cold+0x382>
							typedtext.insert(0, "BOOM!!!");
  406e63:	48 89 c3             	mov    %rax,%rbx
  406e66:	e9 e5 c7 ff ff       	jmp    403650 <main.cold+0x6f>
						typedtext = typedtext.toAnsiString().substr(1);
  406e6b:	48 89 c3             	mov    %rax,%rbx
  406e6e:	e9 d5 c7 ff ff       	jmp    403648 <main.cold+0x67>
  406e73:	48 89 c3             	mov    %rax,%rbx
  406e76:	e9 55 cb ff ff       	jmp    4039d0 <main.cold+0x3ef>
  406e7b:	48 89 c3             	mov    %rax,%rbx
  406e7e:	e9 c1 cb ff ff       	jmp    403a44 <main.cold+0x463>
						typedtext = typedtext.toAnsiString().substr(1);
  406e83:	48 89 c3             	mov    %rax,%rbx
  406e86:	e9 bd c7 ff ff       	jmp    403648 <main.cold+0x67>
  406e8b:	48 c7 85 c0 de ff ff 	movq   $0x40bd28,-0x2140(%rbp)
  406e92:	28 bd 40 00 
  406e96:	48 89 c3             	mov    %rax,%rbx
  406e99:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  406e9f:	e9 9c c8 ff ff       	jmp    403740 <main.cold+0x15f>
  406ea4:	48 c7 85 c0 de ff ff 	movq   $0x40bd28,-0x2140(%rbp)
  406eab:	28 bd 40 00 
  406eaf:	48 89 c3             	mov    %rax,%rbx
  406eb2:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  406eb8:	e9 a2 c8 ff ff       	jmp    40375f <main.cold+0x17e>
  406ebd:	48 c7 85 c0 de ff ff 	movq   $0x40bd28,-0x2140(%rbp)
  406ec4:	28 bd 40 00 
  406ec8:	48 89 c3             	mov    %rax,%rbx
  406ecb:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  406ed1:	e9 a8 c8 ff ff       	jmp    40377e <main.cold+0x19d>
  406ed6:	48 c7 85 c0 de ff ff 	movq   $0x40bd28,-0x2140(%rbp)
  406edd:	28 bd 40 00 
  406ee1:	48 89 c3             	mov    %rax,%rbx
  406ee4:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  406eea:	e9 ae c8 ff ff       	jmp    40379d <main.cold+0x1bc>
}
  406eef:	48 89 c3             	mov    %rax,%rbx
  406ef2:	e9 f5 c7 ff ff       	jmp    4036ec <main.cold+0x10b>
  406ef7:	48 89 c3             	mov    %rax,%rbx
  406efa:	e9 f9 c7 ff ff       	jmp    4036f8 <main.cold+0x117>
						typedtext = typedtext.toAnsiString().substr(1);
  406eff:	48 89 c3             	mov    %rax,%rbx
  406f02:	e9 41 c7 ff ff       	jmp    403648 <main.cold+0x67>
  406f07:	48 89 c3             	mov    %rax,%rbx
  406f0a:	e9 91 cb ff ff       	jmp    403aa0 <main.cold+0x4bf>
  406f0f:	48 89 c3             	mov    %rax,%rbx
  406f12:	e9 1f cd ff ff       	jmp    403c36 <main.cold+0x655>
  406f17:	48 89 c3             	mov    %rax,%rbx
  406f1a:	e9 e1 ca ff ff       	jmp    403a00 <main.cold+0x41f>
  406f1f:	48 89 c3             	mov    %rax,%rbx
  406f22:	e9 4a cc ff ff       	jmp    403b71 <main.cold+0x590>
				typedtext.insert(0, "BOOM!!!");
  406f27:	48 89 c3             	mov    %rax,%rbx
  406f2a:	e9 c5 cb ff ff       	jmp    403af4 <main.cold+0x513>
  406f2f:	48 89 c3             	mov    %rax,%rbx
  406f32:	e9 ee cb ff ff       	jmp    403b25 <main.cold+0x544>
				text.setString("");
  406f37:	48 89 c3             	mov    %rax,%rbx
  406f3a:	e9 b5 cb ff ff       	jmp    403af4 <main.cold+0x513>
  406f3f:	48 89 c3             	mov    %rax,%rbx
  406f42:	e9 29 cb ff ff       	jmp    403a70 <main.cold+0x48f>
  406f47:	48 89 c3             	mov    %rax,%rbx
  406f4a:	e9 81 ca ff ff       	jmp    4039d0 <main.cold+0x3ef>
  406f4f:	48 89 c3             	mov    %rax,%rbx
  406f52:	e9 79 ca ff ff       	jmp    4039d0 <main.cold+0x3ef>
  406f57:	48 89 c3             	mov    %rax,%rbx
  406f5a:	e9 71 ca ff ff       	jmp    4039d0 <main.cold+0x3ef>
  406f5f:	48 89 c3             	mov    %rax,%rbx
  406f62:	e9 de cb ff ff       	jmp    403b45 <main.cold+0x564>
  406f67:	48 89 c3             	mov    %rax,%rbx
  406f6a:	e9 5f cc ff ff       	jmp    403bce <main.cold+0x5ed>
  406f6f:	48 89 c3             	mov    %rax,%rbx
  406f72:	e9 ad ca ff ff       	jmp    403a24 <main.cold+0x443>
  406f77:	48 89 c3             	mov    %rax,%rbx
  406f7a:	e9 22 cc ff ff       	jmp    403ba1 <main.cold+0x5c0>
  406f7f:	48 89 c3             	mov    %rax,%rbx
  406f82:	e9 6e cc ff ff       	jmp    403bf5 <main.cold+0x614>
  406f87:	48 89 c3             	mov    %rax,%rbx
  406f8a:	e9 77 cc ff ff       	jmp    403c06 <main.cold+0x625>
  406f8f:	48 89 c3             	mov    %rax,%rbx
  406f92:	e9 cf cc ff ff       	jmp    403c66 <main.cold+0x685>
							text.setString("");
  406f97:	48 89 c3             	mov    %rax,%rbx
  406f9a:	e9 b1 c6 ff ff       	jmp    403650 <main.cold+0x6f>
						typedtext.insert(0, "Quinta fase");
  406f9f:	48 89 c3             	mov    %rax,%rbx
  406fa2:	e9 a9 c6 ff ff       	jmp    403650 <main.cold+0x6f>
  406fa7:	48 89 c3             	mov    %rax,%rbx
  406faa:	e9 e7 cc ff ff       	jmp    403c96 <main.cold+0x6b5>
						text.setString("");
  406faf:	48 89 c3             	mov    %rax,%rbx
  406fb2:	e9 99 c6 ff ff       	jmp    403650 <main.cold+0x6f>
					typedtext.insert(0, "Isso faz algum sentido?");
  406fb7:	48 89 c3             	mov    %rax,%rbx
  406fba:	e9 35 cb ff ff       	jmp    403af4 <main.cold+0x513>
  406fbf:	48 89 c3             	mov    %rax,%rbx
  406fc2:	e9 ff cc ff ff       	jmp    403cc6 <main.cold+0x6e5>
  406fc7:	48 89 c3             	mov    %rax,%rbx
  406fca:	e9 27 cd ff ff       	jmp    403cf6 <main.cold+0x715>
  406fcf:	48 89 c3             	mov    %rax,%rbx
  406fd2:	e9 4c cd ff ff       	jmp    403d23 <main.cold+0x742>
					text.setString("");
  406fd7:	48 89 c3             	mov    %rax,%rbx
  406fda:	e9 15 cb ff ff       	jmp    403af4 <main.cold+0x513>
  406fdf:	48 c7 85 c0 de ff ff 	movq   $0x40bd28,-0x2140(%rbp)
  406fe6:	28 bd 40 00 
  406fea:	48 89 c3             	mov    %rax,%rbx
  406fed:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  406ff3:	e9 38 c9 ff ff       	jmp    403930 <main.cold+0x34f>
}
  406ff8:	48 89 c3             	mov    %rax,%rbx
  406ffb:	e9 4f c9 ff ff       	jmp    40394f <main.cold+0x36e>
					text.setString("");
  407000:	48 89 c3             	mov    %rax,%rbx
  407003:	e9 ec ca ff ff       	jmp    403af4 <main.cold+0x513>
  407008:	48 89 c3             	mov    %rax,%rbx
  40700b:	e9 c0 ca ff ff       	jmp    403ad0 <main.cold+0x4ef>
					typedtext.insert(0, "Tem alguma coisa piscando,\nvoce deveria prestar atencao");
  407010:	48 89 c3             	mov    %rax,%rbx
  407013:	e9 dc ca ff ff       	jmp    403af4 <main.cold+0x513>
  407018:	48 89 c3             	mov    %rax,%rbx
  40701b:	e9 30 cd ff ff       	jmp    403d50 <main.cold+0x76f>
  407020:	48 c7 85 c0 de ff ff 	movq   $0x40bd28,-0x2140(%rbp)
  407027:	28 bd 40 00 
  40702b:	48 89 c3             	mov    %rax,%rbx
  40702e:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  407034:	e9 7b c8 ff ff       	jmp    4038b4 <main.cold+0x2d3>
  407039:	48 c7 85 c0 de ff ff 	movq   $0x40bd28,-0x2140(%rbp)
  407040:	28 bd 40 00 
  407044:	48 89 c3             	mov    %rax,%rbx
  407047:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  40704d:	e9 81 c8 ff ff       	jmp    4038d3 <main.cold+0x2f2>
  407052:	48 c7 85 c0 de ff ff 	movq   $0x40bd28,-0x2140(%rbp)
  407059:	28 bd 40 00 
  40705d:	48 89 c3             	mov    %rax,%rbx
  407060:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  407066:	e9 87 c8 ff ff       	jmp    4038f2 <main.cold+0x311>
  40706b:	48 c7 85 c0 de ff ff 	movq   $0x40bd28,-0x2140(%rbp)
  407072:	28 bd 40 00 
  407076:	48 89 c3             	mov    %rax,%rbx
  407079:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  40707f:	e9 8d c8 ff ff       	jmp    403911 <main.cold+0x330>
  407084:	48 c7 85 c0 de ff ff 	movq   $0x40bd28,-0x2140(%rbp)
  40708b:	28 bd 40 00 
  40708f:	48 89 c3             	mov    %rax,%rbx
  407092:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  407098:	e9 1f c7 ff ff       	jmp    4037bc <main.cold+0x1db>
  40709d:	48 c7 85 c0 de ff ff 	movq   $0x40bd28,-0x2140(%rbp)
  4070a4:	28 bd 40 00 
  4070a8:	48 89 c3             	mov    %rax,%rbx
  4070ab:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  4070b1:	e9 25 c7 ff ff       	jmp    4037db <main.cold+0x1fa>
  4070b6:	48 c7 85 c0 de ff ff 	movq   $0x40bd28,-0x2140(%rbp)
  4070bd:	28 bd 40 00 
  4070c1:	48 89 c3             	mov    %rax,%rbx
  4070c4:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  4070ca:	e9 2b c7 ff ff       	jmp    4037fa <main.cold+0x219>
  4070cf:	48 c7 85 c0 de ff ff 	movq   $0x40bd28,-0x2140(%rbp)
  4070d6:	28 bd 40 00 
  4070da:	48 89 c3             	mov    %rax,%rbx
  4070dd:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  4070e3:	e9 31 c7 ff ff       	jmp    403819 <main.cold+0x238>
  4070e8:	48 c7 85 c0 de ff ff 	movq   $0x40bd28,-0x2140(%rbp)
  4070ef:	28 bd 40 00 
  4070f3:	48 89 c3             	mov    %rax,%rbx
  4070f6:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  4070fc:	e9 37 c7 ff ff       	jmp    403838 <main.cold+0x257>
  407101:	48 c7 85 c0 de ff ff 	movq   $0x40bd28,-0x2140(%rbp)
  407108:	28 bd 40 00 
  40710c:	48 89 c3             	mov    %rax,%rbx
  40710f:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  407115:	e9 3d c7 ff ff       	jmp    403857 <main.cold+0x276>
  40711a:	48 c7 85 c0 de ff ff 	movq   $0x40bd28,-0x2140(%rbp)
  407121:	28 bd 40 00 
  407125:	48 89 c3             	mov    %rax,%rbx
  407128:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  40712e:	e9 43 c7 ff ff       	jmp    403876 <main.cold+0x295>
  407133:	48 c7 85 c0 de ff ff 	movq   $0x40bd28,-0x2140(%rbp)
  40713a:	28 bd 40 00 
  40713e:	48 89 c3             	mov    %rax,%rbx
  407141:	41 bc f0 bc 40 00    	mov    $0x40bcf0,%r12d
  407147:	e9 49 c7 ff ff       	jmp    403895 <main.cold+0x2b4>
}
  40714c:	48 89 c3             	mov    %rax,%rbx
  40714f:	e9 b0 c5 ff ff       	jmp    403704 <main.cold+0x123>
  407154:	48 89 c3             	mov    %rax,%rbx
  407157:	e9 b4 c5 ff ff       	jmp    403710 <main.cold+0x12f>
  40715c:	48 89 c3             	mov    %rax,%rbx
  40715f:	e9 1c cc ff ff       	jmp    403d80 <main.cold+0x79f>
  407164:	48 89 c3             	mov    %rax,%rbx
  407167:	e9 74 c5 ff ff       	jmp    4036e0 <main.cold+0xff>
  40716c:	48 89 c3             	mov    %rax,%rbx
  40716f:	e9 e8 c4 ff ff       	jmp    40365c <main.cold+0x7b>
  407174:	48 89 c3             	mov    %rax,%rbx
  407177:	e9 30 cc ff ff       	jmp    403dac <main.cold+0x7cb>
							typedtext.insert(0, "[root@mbois ~] $ Voce deveria saber matematica...");
  40717c:	48 89 c3             	mov    %rax,%rbx
  40717f:	e9 70 c9 ff ff       	jmp    403af4 <main.cold+0x513>
							text.setString("");
  407184:	48 89 c3             	mov    %rax,%rbx
  407187:	e9 68 c9 ff ff       	jmp    403af4 <main.cold+0x513>
  40718c:	48 89 c3             	mov    %rax,%rbx
  40718f:	e9 4d c4 ff ff       	jmp    4035e1 <main.cold>
  407194:	48 89 c3             	mov    %rax,%rbx
  407197:	e9 64 cc ff ff       	jmp    403e00 <main.cold+0x81f>
  40719c:	48 89 c3             	mov    %rax,%rbx
  40719f:	e9 05 c8 ff ff       	jmp    4039a9 <main.cold+0x3c8>
  4071a4:	48 89 c3             	mov    %rax,%rbx
  4071a7:	e9 79 c4 ff ff       	jmp    403625 <main.cold+0x44>
  4071ac:	48 89 c3             	mov    %rax,%rbx
  4071af:	e9 1c c8 ff ff       	jmp    4039d0 <main.cold+0x3ef>
  4071b4:	48 89 c3             	mov    %rax,%rbx
  4071b7:	e9 58 cc ff ff       	jmp    403e14 <main.cold+0x833>
  4071bc:	48 89 c3             	mov    %rax,%rbx
  4071bf:	e9 f0 cc ff ff       	jmp    403eb4 <main.cold+0x8d3>
  4071c4:	48 89 c3             	mov    %rax,%rbx
  4071c7:	e9 8c cc ff ff       	jmp    403e58 <main.cold+0x877>
  4071cc:	48 89 c3             	mov    %rax,%rbx
  4071cf:	e9 b0 cc ff ff       	jmp    403e84 <main.cold+0x8a3>
  4071d4:	48 89 c3             	mov    %rax,%rbx
  4071d7:	e9 5c cc ff ff       	jmp    403e38 <main.cold+0x857>
  4071dc:	48 89 c3             	mov    %rax,%rbx
  4071df:	e9 f5 cb ff ff       	jmp    403dd9 <main.cold+0x7f8>
						typedtext = typedtext.toAnsiString().substr(1);
  4071e4:	48 89 c3             	mov    %rax,%rbx
  4071e7:	e9 5c c4 ff ff       	jmp    403648 <main.cold+0x67>
  4071ec:	48 89 c3             	mov    %rax,%rbx
  4071ef:	e9 dc c7 ff ff       	jmp    4039d0 <main.cold+0x3ef>
  4071f4:	48 89 c3             	mov    %rax,%rbx
  4071f7:	e9 e4 cc ff ff       	jmp    403ee0 <main.cold+0x8ff>
  4071fc:	48 89 c3             	mov    %rax,%rbx
  4071ff:	e9 0c cd ff ff       	jmp    403f10 <main.cold+0x92f>
  407204:	48 89 c3             	mov    %rax,%rbx
  407207:	e9 28 cd ff ff       	jmp    403f34 <main.cold+0x953>
  40720c:	48 89 c3             	mov    %rax,%rbx
  40720f:	e9 40 cd ff ff       	jmp    403f54 <main.cold+0x973>
  407214:	48 89 c3             	mov    %rax,%rbx
  407217:	e9 e5 c8 ff ff       	jmp    403b01 <main.cold+0x520>
						typedtext = typedtext.toAnsiString().substr(1);
  40721c:	48 89 c3             	mov    %rax,%rbx
  40721f:	e9 24 c4 ff ff       	jmp    403648 <main.cold+0x67>
  407224:	48 89 c3             	mov    %rax,%rbx
  407227:	e9 54 cd ff ff       	jmp    403f80 <main.cold+0x99f>
  40722c:	48 89 c3             	mov    %rax,%rbx
  40722f:	e9 73 cd ff ff       	jmp    403fa7 <main.cold+0x9c6>
  407234:	48 89 c3             	mov    %rax,%rbx
  407237:	e9 7c cd ff ff       	jmp    403fb8 <main.cold+0x9d7>
  40723c:	48 89 c3             	mov    %rax,%rbx
  40723f:	e9 98 cd ff ff       	jmp    403fdc <main.cold+0x9fb>
  407244:	48 89 c3             	mov    %rax,%rbx
  407247:	e9 b0 cd ff ff       	jmp    403ffc <main.cold+0xa1b>
						typedtext = typedtext.toAnsiString().substr(1);
  40724c:	48 89 c3             	mov    %rax,%rbx
  40724f:	e9 f4 c3 ff ff       	jmp    403648 <main.cold+0x67>
  407254:	48 89 c3             	mov    %rax,%rbx
  407257:	e9 cc cd ff ff       	jmp    404028 <main.cold+0xa47>
  40725c:	48 89 c3             	mov    %rax,%rbx
  40725f:	e9 d5 cd ff ff       	jmp    404039 <main.cold+0xa58>
  407264:	48 89 c3             	mov    %rax,%rbx
  407267:	e9 36 c4 ff ff       	jmp    4036a2 <main.cold+0xc1>

000000000040726c <.annobin_abi_note.c.hot>:
  40726c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000407270 <_start>:
  407270:	f3 0f 1e fa          	endbr64 
  407274:	31 ed                	xor    %ebp,%ebp
  407276:	49 89 d1             	mov    %rdx,%r9
  407279:	5e                   	pop    %rsi
  40727a:	48 89 e2             	mov    %rsp,%rdx
  40727d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  407281:	50                   	push   %rax
  407282:	54                   	push   %rsp
  407283:	45 31 c0             	xor    %r8d,%r8d
  407286:	31 c9                	xor    %ecx,%ecx
  407288:	48 c7 c7 80 40 40 00 	mov    $0x404080,%rdi
  40728f:	ff 15 5b 4d 00 00    	call   *0x4d5b(%rip)        # 40bff0 <__libc_start_main@GLIBC_2.34>
  407295:	f4                   	hlt    

0000000000407296 <.annobin_abi_note.c>:
  407296:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  40729d:	00 00 00 

00000000004072a0 <_dl_relocate_static_pie>:
  4072a0:	f3 0f 1e fa          	endbr64 
  4072a4:	c3                   	ret    

00000000004072a5 <.annobin__dl_relocate_static_pie.end>:
  4072a5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  4072ac:	00 00 00 
  4072af:	90                   	nop

00000000004072b0 <deregister_tm_clones>:
  4072b0:	b8 78 c2 40 00       	mov    $0x40c278,%eax
  4072b5:	48 3d 78 c2 40 00    	cmp    $0x40c278,%rax
  4072bb:	74 13                	je     4072d0 <deregister_tm_clones+0x20>
  4072bd:	b8 00 00 00 00       	mov    $0x0,%eax
  4072c2:	48 85 c0             	test   %rax,%rax
  4072c5:	74 09                	je     4072d0 <deregister_tm_clones+0x20>
  4072c7:	bf 78 c2 40 00       	mov    $0x40c278,%edi
  4072cc:	ff e0                	jmp    *%rax
  4072ce:	66 90                	xchg   %ax,%ax
  4072d0:	c3                   	ret    
  4072d1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  4072d8:	00 00 00 00 
  4072dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004072e0 <register_tm_clones>:
  4072e0:	be 78 c2 40 00       	mov    $0x40c278,%esi
  4072e5:	48 81 ee 78 c2 40 00 	sub    $0x40c278,%rsi
  4072ec:	48 89 f0             	mov    %rsi,%rax
  4072ef:	48 c1 ee 3f          	shr    $0x3f,%rsi
  4072f3:	48 c1 f8 03          	sar    $0x3,%rax
  4072f7:	48 01 c6             	add    %rax,%rsi
  4072fa:	48 d1 fe             	sar    %rsi
  4072fd:	74 11                	je     407310 <register_tm_clones+0x30>
  4072ff:	b8 00 00 00 00       	mov    $0x0,%eax
  407304:	48 85 c0             	test   %rax,%rax
  407307:	74 07                	je     407310 <register_tm_clones+0x30>
  407309:	bf 78 c2 40 00       	mov    $0x40c278,%edi
  40730e:	ff e0                	jmp    *%rax
  407310:	c3                   	ret    
  407311:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  407318:	00 00 00 00 
  40731c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000407320 <__do_global_dtors_aux>:
  407320:	f3 0f 1e fa          	endbr64 
  407324:	80 3d 01 51 00 00 00 	cmpb   $0x0,0x5101(%rip)        # 40c42c <completed.0>
  40732b:	75 13                	jne    407340 <__do_global_dtors_aux+0x20>
  40732d:	55                   	push   %rbp
  40732e:	48 89 e5             	mov    %rsp,%rbp
  407331:	e8 7a ff ff ff       	call   4072b0 <deregister_tm_clones>
  407336:	c6 05 ef 50 00 00 01 	movb   $0x1,0x50ef(%rip)        # 40c42c <completed.0>
  40733d:	5d                   	pop    %rbp
  40733e:	c3                   	ret    
  40733f:	90                   	nop
  407340:	c3                   	ret    
  407341:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  407348:	00 00 00 00 
  40734c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000407350 <frame_dummy>:
  407350:	f3 0f 1e fa          	endbr64 
  407354:	eb 8a                	jmp    4072e0 <register_tm_clones>
  407356:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  40735d:	00 00 00 

0000000000407360 <_Z17char_to_stringbitB5cxx11c>:
{
  407360:	41 54                	push   %r12
	switch (n)
  407362:	83 ee 30             	sub    $0x30,%esi
{
  407365:	49 89 fc             	mov    %rdi,%r12
  407368:	55                   	push   %rbp
  407369:	53                   	push   %rbx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  40736a:	48 8d 5f 10          	lea    0x10(%rdi),%rbx
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  40736e:	48 89 1f             	mov    %rbx,(%rdi)
      { _M_string_length = __length; }
  407371:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi)
  407378:	00 
      { __c1 = __c2; }
  407379:	c6 47 10 00          	movb   $0x0,0x10(%rdi)
	switch (n)
  40737d:	40 80 fe 09          	cmp    $0x9,%sil
  407381:	0f 87 dc 00 00 00    	ja     407463 <_Z17char_to_stringbitB5cxx11c+0x103>
  407387:	40 0f b6 f6          	movzbl %sil,%esi
       */
      basic_string&
      assign(const _CharT* __s)
      {
	__glibcxx_requires_string(__s);
	return _M_replace(size_type(0), this->size(), __s,
  40738b:	41 b8 08 00 00 00    	mov    $0x8,%r8d
  407391:	ff 24 f5 08 91 40 00 	jmp    *0x409108(,%rsi,8)
  407398:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40739f:	00 
  4073a0:	b9 58 90 40 00       	mov    $0x409058,%ecx
  4073a5:	31 d2                	xor    %edx,%edx
  4073a7:	31 f6                	xor    %esi,%esi
  4073a9:	e8 e2 bf ff ff       	call   403390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
}
  4073ae:	4c 89 e0             	mov    %r12,%rax
  4073b1:	5b                   	pop    %rbx
  4073b2:	5d                   	pop    %rbp
  4073b3:	41 5c                	pop    %r12
  4073b5:	c3                   	ret    
  4073b6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  4073bd:	00 00 00 
  4073c0:	b9 61 90 40 00       	mov    $0x409061,%ecx
  4073c5:	31 d2                	xor    %edx,%edx
  4073c7:	31 f6                	xor    %esi,%esi
  4073c9:	e8 c2 bf ff ff       	call   403390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  4073ce:	eb de                	jmp    4073ae <_Z17char_to_stringbitB5cxx11c+0x4e>
  4073d0:	b9 10 90 40 00       	mov    $0x409010,%ecx
  4073d5:	31 d2                	xor    %edx,%edx
  4073d7:	31 f6                	xor    %esi,%esi
  4073d9:	e8 b2 bf ff ff       	call   403390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  4073de:	eb ce                	jmp    4073ae <_Z17char_to_stringbitB5cxx11c+0x4e>
  4073e0:	b9 19 90 40 00       	mov    $0x409019,%ecx
  4073e5:	31 d2                	xor    %edx,%edx
  4073e7:	31 f6                	xor    %esi,%esi
  4073e9:	e8 a2 bf ff ff       	call   403390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  4073ee:	eb be                	jmp    4073ae <_Z17char_to_stringbitB5cxx11c+0x4e>
  4073f0:	b9 22 90 40 00       	mov    $0x409022,%ecx
  4073f5:	31 d2                	xor    %edx,%edx
  4073f7:	31 f6                	xor    %esi,%esi
  4073f9:	e8 92 bf ff ff       	call   403390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  4073fe:	eb ae                	jmp    4073ae <_Z17char_to_stringbitB5cxx11c+0x4e>
  407400:	b9 2b 90 40 00       	mov    $0x40902b,%ecx
  407405:	31 d2                	xor    %edx,%edx
  407407:	31 f6                	xor    %esi,%esi
  407409:	e8 82 bf ff ff       	call   403390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  40740e:	eb 9e                	jmp    4073ae <_Z17char_to_stringbitB5cxx11c+0x4e>
  407410:	b9 34 90 40 00       	mov    $0x409034,%ecx
  407415:	31 d2                	xor    %edx,%edx
  407417:	31 f6                	xor    %esi,%esi
  407419:	e8 72 bf ff ff       	call   403390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  40741e:	eb 8e                	jmp    4073ae <_Z17char_to_stringbitB5cxx11c+0x4e>
  407420:	b9 3d 90 40 00       	mov    $0x40903d,%ecx
  407425:	31 d2                	xor    %edx,%edx
  407427:	31 f6                	xor    %esi,%esi
  407429:	e8 62 bf ff ff       	call   403390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  40742e:	e9 7b ff ff ff       	jmp    4073ae <_Z17char_to_stringbitB5cxx11c+0x4e>
  407433:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  407438:	b9 46 90 40 00       	mov    $0x409046,%ecx
  40743d:	31 d2                	xor    %edx,%edx
  40743f:	31 f6                	xor    %esi,%esi
  407441:	e8 4a bf ff ff       	call   403390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  407446:	e9 63 ff ff ff       	jmp    4073ae <_Z17char_to_stringbitB5cxx11c+0x4e>
  40744b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  407450:	b9 4f 90 40 00       	mov    $0x40904f,%ecx
  407455:	31 d2                	xor    %edx,%edx
  407457:	31 f6                	xor    %esi,%esi
  407459:	e8 32 bf ff ff       	call   403390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  40745e:	e9 4b ff ff ff       	jmp    4073ae <_Z17char_to_stringbitB5cxx11c+0x4e>
  407463:	45 31 c0             	xor    %r8d,%r8d
  407466:	b9 ed 90 40 00       	mov    $0x4090ed,%ecx
  40746b:	31 d2                	xor    %edx,%edx
  40746d:	31 f6                	xor    %esi,%esi
  40746f:	e8 1c bf ff ff       	call   403390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  407474:	e9 35 ff ff ff       	jmp    4073ae <_Z17char_to_stringbitB5cxx11c+0x4e>
      { return _M_dataplus._M_p; }
  407479:	48 89 c5             	mov    %rax,%rbp
  40747c:	e9 5f c0 ff ff       	jmp    4034e0 <_Z17char_to_stringbitB5cxx11c.cold>
  407481:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  407488:	00 00 00 00 
  40748c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000407490 <_Z13writeLDisplayij>:
{
  407490:	55                   	push   %rbp
	ioctl(fd, WR_L_DISPLAY);
  407491:	31 c0                	xor    %eax,%eax
{
  407493:	89 fd                	mov    %edi,%ebp
  407495:	48 83 ec 10          	sub    $0x10,%rsp
  407499:	89 74 24 0c          	mov    %esi,0xc(%rsp)
	ioctl(fd, WR_L_DISPLAY);
  40749d:	be 63 61 00 00       	mov    $0x6163,%esi
  4074a2:	e8 49 be ff ff       	call   4032f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  4074a7:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  4074ac:	89 ef                	mov    %ebp,%edi
  4074ae:	ba 04 00 00 00       	mov    $0x4,%edx
  4074b3:	e8 28 bc ff ff       	call   4030e0 <write@plt>
}
  4074b8:	48 83 c4 10          	add    $0x10,%rsp
  4074bc:	5d                   	pop    %rbp
  4074bd:	c3                   	ret    
  4074be:	66 90                	xchg   %ax,%ax

00000000004074c0 <_Z13writeRDisplayij>:
{
  4074c0:	55                   	push   %rbp
	ioctl(fd, WR_R_DISPLAY);
  4074c1:	31 c0                	xor    %eax,%eax
{
  4074c3:	89 fd                	mov    %edi,%ebp
  4074c5:	48 83 ec 10          	sub    $0x10,%rsp
  4074c9:	89 74 24 0c          	mov    %esi,0xc(%rsp)
	ioctl(fd, WR_R_DISPLAY);
  4074cd:	be 64 61 00 00       	mov    $0x6164,%esi
  4074d2:	e8 19 be ff ff       	call   4032f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  4074d7:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  4074dc:	89 ef                	mov    %ebp,%edi
  4074de:	ba 04 00 00 00       	mov    $0x4,%edx
  4074e3:	e8 f8 bb ff ff       	call   4030e0 <write@plt>
}
  4074e8:	48 83 c4 10          	add    $0x10,%rsp
  4074ec:	5d                   	pop    %rbp
  4074ed:	c3                   	ret    
  4074ee:	66 90                	xchg   %ax,%ax

00000000004074f0 <_Z13writeGreenLedij>:
{
  4074f0:	55                   	push   %rbp
	ioctl(fd, WR_GREEN_LEDS);
  4074f1:	31 c0                	xor    %eax,%eax
{
  4074f3:	89 fd                	mov    %edi,%ebp
  4074f5:	48 83 ec 10          	sub    $0x10,%rsp
  4074f9:	89 74 24 0c          	mov    %esi,0xc(%rsp)
	ioctl(fd, WR_GREEN_LEDS);
  4074fd:	be 66 61 00 00       	mov    $0x6166,%esi
  407502:	e8 e9 bd ff ff       	call   4032f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  407507:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  40750c:	89 ef                	mov    %ebp,%edi
  40750e:	ba 04 00 00 00       	mov    $0x4,%edx
  407513:	e8 c8 bb ff ff       	call   4030e0 <write@plt>
}
  407518:	48 83 c4 10          	add    $0x10,%rsp
  40751c:	5d                   	pop    %rbp
  40751d:	c3                   	ret    
  40751e:	66 90                	xchg   %ax,%ax

0000000000407520 <_Z11writeRedLedij>:
{
  407520:	55                   	push   %rbp
	ioctl(fd, WR_RED_LEDS);
  407521:	31 c0                	xor    %eax,%eax
{
  407523:	89 fd                	mov    %edi,%ebp
  407525:	48 83 ec 10          	sub    $0x10,%rsp
  407529:	89 74 24 0c          	mov    %esi,0xc(%rsp)
	ioctl(fd, WR_RED_LEDS);
  40752d:	be 65 61 00 00       	mov    $0x6165,%esi
  407532:	e8 b9 bd ff ff       	call   4032f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  407537:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  40753c:	89 ef                	mov    %ebp,%edi
  40753e:	ba 04 00 00 00       	mov    $0x4,%edx
  407543:	e8 98 bb ff ff       	call   4030e0 <write@plt>
}
  407548:	48 83 c4 10          	add    $0x10,%rsp
  40754c:	5d                   	pop    %rbp
  40754d:	c3                   	ret    
  40754e:	66 90                	xchg   %ax,%ax

0000000000407550 <_Z10readButtonij>:
{
  407550:	55                   	push   %rbp
	ioctl(fd, RD_PBUTTONS);
  407551:	31 c0                	xor    %eax,%eax
{
  407553:	89 fd                	mov    %edi,%ebp
  407555:	48 83 ec 10          	sub    $0x10,%rsp
  407559:	89 74 24 0c          	mov    %esi,0xc(%rsp)
	ioctl(fd, RD_PBUTTONS);
  40755d:	be 62 61 00 00       	mov    $0x6162,%esi
  407562:	e8 89 bd ff ff       	call   4032f0 <ioctl@plt>
	read(fd, &data, 1);
  407567:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  40756c:	89 ef                	mov    %ebp,%edi
  40756e:	ba 01 00 00 00       	mov    $0x1,%edx
  407573:	e8 a8 bd ff ff       	call   403320 <read@plt>
}
  407578:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  40757c:	48 83 c4 10          	add    $0x10,%rsp
  407580:	5d                   	pop    %rbp
  407581:	c3                   	ret    
  407582:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  407589:	00 00 00 00 
  40758d:	0f 1f 00             	nopl   (%rax)

0000000000407590 <_Z10readSwitchij>:
{
  407590:	55                   	push   %rbp
	ioctl(fd, RD_SWITCHES);
  407591:	31 c0                	xor    %eax,%eax
{
  407593:	89 fd                	mov    %edi,%ebp
  407595:	48 83 ec 10          	sub    $0x10,%rsp
  407599:	89 74 24 0c          	mov    %esi,0xc(%rsp)
	ioctl(fd, RD_SWITCHES);
  40759d:	be 61 61 00 00       	mov    $0x6161,%esi
  4075a2:	e8 49 bd ff ff       	call   4032f0 <ioctl@plt>
	read(fd, &data, 3);
  4075a7:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  4075ac:	89 ef                	mov    %ebp,%edi
  4075ae:	ba 03 00 00 00       	mov    $0x3,%edx
  4075b3:	e8 68 bd ff ff       	call   403320 <read@plt>
}
  4075b8:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  4075bc:	48 83 c4 10          	add    $0x10,%rsp
  4075c0:	5d                   	pop    %rbp
  4075c1:	c3                   	ret    
  4075c2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  4075c9:	00 00 00 00 
  4075cd:	0f 1f 00             	nopl   (%rax)

00000000004075d0 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_>:
{
  4075d0:	41 56                	push   %r14
  4075d2:	49 89 d6             	mov    %rdx,%r14
  4075d5:	41 55                	push   %r13
  4075d7:	49 89 f5             	mov    %rsi,%r13
  4075da:	41 54                	push   %r12
  4075dc:	55                   	push   %rbp
  4075dd:	89 fd                	mov    %edi,%ebp
  4075df:	53                   	push   %rbx
  4075e0:	48 83 ec 40          	sub    $0x40,%rsp
	bit_string += char_to_stringbit(sec_string[0]);
  4075e4:	48 8b 02             	mov    (%rdx),%rax
	: allocator_type(__a), _M_p(__dat) { }
  4075e7:	48 8d 5c 24 10       	lea    0x10(%rsp),%rbx
  4075ec:	c6 44 24 10 00       	movb   $0x0,0x10(%rsp)
  4075f1:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  4075f6:	48 89 1c 24          	mov    %rbx,(%rsp)
      { _M_string_length = __length; }
  4075fa:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  407601:	00 00 
  407603:	0f be 30             	movsbl (%rax),%esi
  407606:	e8 55 fd ff ff       	call   407360 <_Z17char_to_stringbitB5cxx11c>
      { return _M_append(__str._M_data(), __str.size()); }
  40760b:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  407610:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  407615:	48 89 e7             	mov    %rsp,%rdi
  407618:	e8 73 ba ff ff       	call   403090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
      { return _M_dataplus._M_p; }
  40761d:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  407622:	4c 8d 64 24 30       	lea    0x30(%rsp),%r12
  407627:	4c 39 e7             	cmp    %r12,%rdi
  40762a:	74 0e                	je     40763a <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x6a>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  40762c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  407631:	48 8d 70 01          	lea    0x1(%rax),%rsi
  407635:	e8 e6 bb ff ff       	call   403220 <_ZdlPvm@plt>
	bit_string += char_to_stringbit(sec_string[1]);
  40763a:	49 8b 06             	mov    (%r14),%rax
  40763d:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  407642:	0f be 70 01          	movsbl 0x1(%rax),%esi
  407646:	e8 15 fd ff ff       	call   407360 <_Z17char_to_stringbitB5cxx11c>
      { return _M_append(__str._M_data(), __str.size()); }
  40764b:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  407650:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  407655:	48 89 e7             	mov    %rsp,%rdi
  407658:	e8 33 ba ff ff       	call   403090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
      { return _M_dataplus._M_p; }
  40765d:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  407662:	4c 39 e7             	cmp    %r12,%rdi
  407665:	74 0e                	je     407675 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0xa5>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  407667:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  40766c:	48 8d 70 01          	lea    0x1(%rax),%rsi
  407670:	e8 ab bb ff ff       	call   403220 <_ZdlPvm@plt>
	bit_string += char_to_stringbit(min_string[0]);
  407675:	49 8b 45 00          	mov    0x0(%r13),%rax
  407679:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  40767e:	0f be 30             	movsbl (%rax),%esi
  407681:	e8 da fc ff ff       	call   407360 <_Z17char_to_stringbitB5cxx11c>
      { return _M_append(__str._M_data(), __str.size()); }
  407686:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  40768b:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  407690:	48 89 e7             	mov    %rsp,%rdi
  407693:	e8 f8 b9 ff ff       	call   403090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
      { return _M_dataplus._M_p; }
  407698:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  40769d:	4c 39 e7             	cmp    %r12,%rdi
  4076a0:	74 0e                	je     4076b0 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0xe0>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4076a2:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  4076a7:	48 8d 70 01          	lea    0x1(%rax),%rsi
  4076ab:	e8 70 bb ff ff       	call   403220 <_ZdlPvm@plt>
	bit_string += char_to_stringbit(min_string[1]);
  4076b0:	49 8b 45 00          	mov    0x0(%r13),%rax
  4076b4:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  4076b9:	0f be 70 01          	movsbl 0x1(%rax),%esi
  4076bd:	e8 9e fc ff ff       	call   407360 <_Z17char_to_stringbitB5cxx11c>
      { return _M_append(__str._M_data(), __str.size()); }
  4076c2:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  4076c7:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  4076cc:	48 89 e7             	mov    %rsp,%rdi
  4076cf:	e8 bc b9 ff ff       	call   403090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
      { return _M_dataplus._M_p; }
  4076d4:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  4076d9:	4c 39 e7             	cmp    %r12,%rdi
  4076dc:	74 0e                	je     4076ec <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x11c>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4076de:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  4076e3:	48 8d 70 01          	lea    0x1(%rax),%rsi
  4076e7:	e8 34 bb ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_string_length; }
  4076ec:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
      { return _M_dataplus._M_p; }
  4076f1:	48 8b 04 24          	mov    (%rsp),%rax
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
  4076f5:	48 83 f9 ff          	cmp    $0xffffffffffffffff,%rcx
  4076f9:	0f 85 89 00 00 00    	jne    407788 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x1b8>
  4076ff:	b9 20 00 00 00       	mov    $0x20,%ecx
  407704:	48 83 e9 01          	sub    $0x1,%rcx
    {
      typedef unsigned long _WordT;
      _WordT _M_w;

      _GLIBCXX_CONSTEXPR _Base_bitset() _GLIBCXX_NOEXCEPT
      : _M_w(0)
  407708:	31 f6                	xor    %esi,%esi
      _S_whichbit(size_t __pos) _GLIBCXX_NOEXCEPT
      {  return __pos % _GLIBCXX_BITSET_BITS_PER_WORD; }

      static _GLIBCXX_CONSTEXPR _WordT
      _S_maskbit(size_t __pos) _GLIBCXX_NOEXCEPT
      { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }
  40770a:	bf 01 00 00 00       	mov    $0x1,%edi
  40770f:	eb 0a                	jmp    40771b <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x14b>
  407711:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  407718:	48 89 d1             	mov    %rdx,%rcx
      {
	reset();
	const size_t __nbits = std::min(_Nb, std::min(__n, size_t(__len - __pos)));
	for (size_t __i = __nbits; __i > 0; --__i)
	  {
	    const _CharT __c = __s[__pos + __nbits - __i];
  40771b:	0f b6 10             	movzbl (%rax),%edx
	    if (_Traits::eq(__c, __zero))
  40771e:	80 fa 30             	cmp    $0x30,%dl
  407721:	74 0e                	je     407731 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x161>
	      ;
	    else if (_Traits::eq(__c, __one))
  407723:	80 fa 31             	cmp    $0x31,%dl
  407726:	75 77                	jne    40779f <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x1cf>
      { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }
  407728:	48 89 fa             	mov    %rdi,%rdx
  40772b:	48 d3 e2             	shl    %cl,%rdx
	this->_M_getword(__pos) |= _Base::_S_maskbit(__pos);
  40772e:	48 09 d6             	or     %rdx,%rsi
	for (size_t __i = __nbits; __i > 0; --__i)
  407731:	48 83 c0 01          	add    $0x1,%rax
  407735:	48 8d 51 ff          	lea    -0x1(%rcx),%rdx
  407739:	48 85 c9             	test   %rcx,%rcx
  40773c:	75 da                	jne    407718 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x148>
	writeLDisplay(fd, data);
  40773e:	89 74 24 20          	mov    %esi,0x20(%rsp)
	ioctl(fd, WR_L_DISPLAY);
  407742:	89 ef                	mov    %ebp,%edi
  407744:	be 63 61 00 00       	mov    $0x6163,%esi
  407749:	31 c0                	xor    %eax,%eax
  40774b:	e8 a0 bb ff ff       	call   4032f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  407750:	ba 04 00 00 00       	mov    $0x4,%edx
  407755:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  40775a:	89 ef                	mov    %ebp,%edi
  40775c:	e8 7f b9 ff ff       	call   4030e0 <write@plt>
  407761:	48 8b 3c 24          	mov    (%rsp),%rdi
	if (!_M_is_local())
  407765:	48 39 df             	cmp    %rbx,%rdi
  407768:	74 0e                	je     407778 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x1a8>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  40776a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  40776f:	48 8d 70 01          	lea    0x1(%rax),%rsi
  407773:	e8 a8 ba ff ff       	call   403220 <_ZdlPvm@plt>
}
  407778:	48 83 c4 40          	add    $0x40,%rsp
  40777c:	5b                   	pop    %rbx
  40777d:	5d                   	pop    %rbp
  40777e:	41 5c                	pop    %r12
  407780:	41 5d                	pop    %r13
  407782:	41 5e                	pop    %r14
  407784:	c3                   	ret    
  407785:	0f 1f 00             	nopl   (%rax)
  407788:	48 83 f9 1f          	cmp    $0x1f,%rcx
  40778c:	0f 87 6d ff ff ff    	ja     4076ff <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x12f>
  407792:	48 85 c9             	test   %rcx,%rcx
  407795:	0f 85 69 ff ff ff    	jne    407704 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x134>
  40779b:	31 f6                	xor    %esi,%esi
  40779d:	eb 9f                	jmp    40773e <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x16e>
	      _Unchecked_set(__i - 1);
	    else
	      __throw_invalid_argument(__N("bitset::_M_copy_from_ptr"));
  40779f:	bf 6a 90 40 00       	mov    $0x40906a,%edi
  4077a4:	e8 97 b9 ff ff       	call   403140 <_ZSt24__throw_invalid_argumentPKc@plt>
      { return _M_dataplus._M_p; }
  4077a9:	48 89 c5             	mov    %rax,%rbp
  4077ac:	e9 4e bd ff ff       	jmp    4034ff <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold>
  4077b1:	48 89 c5             	mov    %rax,%rbp
  4077b4:	e9 7d bd ff ff       	jmp    403536 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x37>
  4077b9:	48 89 c5             	mov    %rax,%rbp
  4077bc:	e9 8f bd ff ff       	jmp    403550 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x51>
  4077c1:	48 89 c5             	mov    %rax,%rbp
  4077c4:	e9 a6 bd ff ff       	jmp    40356f <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x70>
  4077c9:	48 89 c5             	mov    %rax,%rbp
  4077cc:	e9 46 bd ff ff       	jmp    403517 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x18>
  4077d1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  4077d8:	00 00 00 00 
  4077dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004077e0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>:
{
  4077e0:	41 57                	push   %r15
  4077e2:	41 56                	push   %r14
  4077e4:	41 55                	push   %r13
  4077e6:	49 89 cd             	mov    %rcx,%r13
  4077e9:	41 54                	push   %r12
  4077eb:	49 89 d4             	mov    %rdx,%r12
  4077ee:	55                   	push   %rbp
  4077ef:	53                   	push   %rbx
  4077f0:	48 63 de             	movslq %esi,%rbx
  4077f3:	49 89 d8             	mov    %rbx,%r8
	unsigned int minutes = number / 60;
  4077f6:	48 69 db 89 88 88 88 	imul   $0xffffffff88888889,%rbx,%rbx
  4077fd:	44 89 c0             	mov    %r8d,%eax
  407800:	c1 f8 1f             	sar    $0x1f,%eax
{
  407803:	48 83 ec 68          	sub    $0x68,%rsp
	unsigned int minutes = number / 60;
  407807:	48 c1 eb 20          	shr    $0x20,%rbx
{
  40780b:	89 7c 24 04          	mov    %edi,0x4(%rsp)
	unsigned int minutes = number / 60;
  40780f:	44 01 c3             	add    %r8d,%ebx
  407812:	c1 fb 05             	sar    $0x5,%ebx
  407815:	29 c3                	sub    %eax,%ebx
	unsigned int seconds = number % 60;
  407817:	6b c3 3c             	imul   $0x3c,%ebx,%eax
  40781a:	41 29 c0             	sub    %eax,%r8d
	if (seconds < 10)
  40781d:	41 83 f8 09          	cmp    $0x9,%r8d
  407821:	0f 87 09 02 00 00    	ja     407a30 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x250>
	: allocator_type(__a), _M_p(__dat) { }
  407827:	4c 8d 7c 24 20       	lea    0x20(%rsp),%r15
      { _M_construct(__n, __c); }
  40782c:	31 d2                	xor    %edx,%edx
  40782e:	be 01 00 00 00       	mov    $0x1,%esi
  407833:	44 89 44 24 08       	mov    %r8d,0x8(%rsp)
  407838:	4c 89 ff             	mov    %r15,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  40783b:	4c 8d 74 24 30       	lea    0x30(%rsp),%r14
  407840:	4c 89 74 24 20       	mov    %r14,0x20(%rsp)
      { _M_construct(__n, __c); }
  407845:	e8 46 ba ff ff       	call   403290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@plt>
	  auto const __num = __val * 2;
	  __first[1] = __digits[__num + 1];
	  __first[0] = __digits[__num];
	}
      else
	__first[0] = '0' + __val;
  40784a:	44 8b 44 24 08       	mov    0x8(%rsp),%r8d
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
	      size_type __n2)
      {
	__glibcxx_requires_string_len(__s, __n2);
	return _M_replace(_M_check(__pos, "basic_string::replace"),
  40784f:	31 d2                	xor    %edx,%edx
  407851:	31 f6                	xor    %esi,%esi
  407853:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  407858:	b9 5f 90 40 00       	mov    $0x40905f,%ecx
  40785d:	4c 89 ff             	mov    %r15,%rdi
  407860:	41 83 c0 30          	add    $0x30,%r8d
  407864:	44 88 00             	mov    %r8b,(%rax)
  407867:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  40786d:	e8 1e bb ff ff       	call   403390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  407872:	48 8d 6c 24 50       	lea    0x50(%rsp),%rbp
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  407877:	48 8d 50 10          	lea    0x10(%rax),%rdx
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  40787b:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
      { return _M_dataplus._M_p; }
  407880:	48 8b 08             	mov    (%rax),%rcx
	if (__str._M_is_local())
  407883:	48 39 d1             	cmp    %rdx,%rcx
  407886:	0f 84 d4 06 00 00    	je     407f60 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x780>
      { _M_dataplus._M_p = __p; }
  40788c:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
	    _M_capacity(__str._M_allocated_capacity);
  407891:	48 8b 48 10          	mov    0x10(%rax),%rcx
      { _M_allocated_capacity = __capacity; }
  407895:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
      { return _M_string_length; }
  40789a:	48 8b 48 08          	mov    0x8(%rax),%rcx
      { _M_string_length = __length; }
  40789e:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
      { _M_dataplus._M_p = __p; }
  4078a3:	48 89 10             	mov    %rdx,(%rax)
  4078a6:	c6 40 10 00          	movb   $0x0,0x10(%rax)
      { return _M_dataplus._M_p; }
  4078aa:	49 8b 7d 00          	mov    0x0(%r13),%rdi
      { _M_string_length = __length; }
  4078ae:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  4078b5:	00 
      { return _M_dataplus._M_p; }
  4078b6:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
	if (__str._M_is_local())
  4078bb:	48 39 e8             	cmp    %rbp,%rax
  4078be:	0f 84 ac 06 00 00    	je     407f70 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x790>
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4078c4:	49 8d 55 10          	lea    0x10(%r13),%rdx
      { return _M_string_length; }
  4078c8:	f3 0f 6f 44 24 48    	movdqu 0x48(%rsp),%xmm0
	    if (!_M_is_local())
  4078ce:	48 39 d7             	cmp    %rdx,%rdi
  4078d1:	0f 84 09 07 00 00    	je     407fe0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x800>
		    __capacity = _M_allocated_capacity;
  4078d7:	49 8b 55 10          	mov    0x10(%r13),%rdx
      { _M_dataplus._M_p = __p; }
  4078db:	49 89 45 00          	mov    %rax,0x0(%r13)
      { _M_string_length = __length; }
  4078df:	41 0f 11 45 08       	movups %xmm0,0x8(%r13)
	    if (__data)
  4078e4:	48 85 ff             	test   %rdi,%rdi
  4078e7:	0f 84 fc 06 00 00    	je     407fe9 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x809>
      { _M_dataplus._M_p = __p; }
  4078ed:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
      { _M_allocated_capacity = __capacity; }
  4078f2:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
      { _M_string_length = __length; }
  4078f7:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  4078fe:	00 00 
  407900:	c6 07 00             	movb   $0x0,(%rdi)
      { return _M_dataplus._M_p; }
  407903:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
	if (!_M_is_local())
  407908:	48 39 ef             	cmp    %rbp,%rdi
  40790b:	74 0e                	je     40791b <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x13b>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  40790d:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  407912:	48 8d 70 01          	lea    0x1(%rax),%rsi
  407916:	e8 05 b9 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  40791b:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  407920:	4c 39 f7             	cmp    %r14,%rdi
  407923:	74 0e                	je     407933 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x153>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  407925:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  40792a:	48 8d 70 01          	lea    0x1(%rax),%rsi
  40792e:	e8 ed b8 ff ff       	call   403220 <_ZdlPvm@plt>
	  if (__value < (unsigned)__base) return __n;
  407933:	83 fb 09             	cmp    $0x9,%ebx
  407936:	0f 86 1e 07 00 00    	jbe    40805a <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x87a>
	  if (__value < __b2) return __n + 1;
  40793c:	83 fb 63             	cmp    $0x63,%ebx
  40793f:	0f 86 33 07 00 00    	jbe    408078 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x898>
	  if (__value < __b3) return __n + 2;
  407945:	81 fb e7 03 00 00    	cmp    $0x3e7,%ebx
  40794b:	0f 86 3b 07 00 00    	jbe    40808c <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x8ac>
	  if (__value < __b4) return __n + 3;
  407951:	89 d9                	mov    %ebx,%ecx
  407953:	48 89 ca             	mov    %rcx,%rdx
  407956:	81 fb 0f 27 00 00    	cmp    $0x270f,%ebx
  40795c:	0f 86 20 07 00 00    	jbe    408082 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x8a2>
	  __value /= __b4;
  407962:	49 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%r8
  407969:	c5 6d 34 
      unsigned __n = 1;
  40796c:	be 01 00 00 00       	mov    $0x1,%esi
  407971:	eb 26                	jmp    407999 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x1b9>
  407973:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	  if (__value < __b2) return __n + 1;
  407978:	83 fa 63             	cmp    $0x63,%edx
  40797b:	0f 86 ef 03 00 00    	jbe    407d70 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x590>
	  if (__value < __b3) return __n + 2;
  407981:	81 fa e7 03 00 00    	cmp    $0x3e7,%edx
  407987:	0f 86 8b 05 00 00    	jbe    407f18 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x738>
	  if (__value < __b4) return __n + 3;
  40798d:	81 fa 0f 27 00 00    	cmp    $0x270f,%edx
  407993:	0f 86 87 05 00 00    	jbe    407f20 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x740>
	  __value /= __b4;
  407999:	48 89 d0             	mov    %rdx,%rax
  40799c:	48 89 d7             	mov    %rdx,%rdi
  40799f:	49 f7 e0             	mul    %r8
  4079a2:	89 f0                	mov    %esi,%eax
	  __n += 4;
  4079a4:	83 c6 04             	add    $0x4,%esi
	  __value /= __b4;
  4079a7:	48 c1 ea 0b          	shr    $0xb,%rdx
	  if (__value < (unsigned)__base) return __n;
  4079ab:	48 81 ff 9f 86 01 00 	cmp    $0x1869f,%rdi
  4079b2:	77 c4                	ja     407978 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x198>
      { _M_construct(__n, __c); }
  4079b4:	4c 89 ff             	mov    %r15,%rdi
  4079b7:	31 d2                	xor    %edx,%edx
  4079b9:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
	: allocator_type(__a), _M_p(__dat) { }
  4079be:	4c 89 74 24 20       	mov    %r14,0x20(%rsp)
      { _M_construct(__n, __c); }
  4079c3:	e8 c8 b8 ff ff       	call   403290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@plt>
      unsigned __pos = __len - 1;
  4079c8:	8b 44 24 28          	mov    0x28(%rsp),%eax
      { return _M_dataplus._M_p; }
  4079cc:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
  4079d1:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
      unsigned __pos = __len - 1;
  4079d6:	8d 70 ff             	lea    -0x1(%rax),%esi
      while (__val >= 100)
  4079d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	  auto const __num = (__val % 100) * 2;
  4079e0:	48 69 d1 1f 85 eb 51 	imul   $0x51eb851f,%rcx,%rdx
  4079e7:	89 d8                	mov    %ebx,%eax
  4079e9:	48 c1 ea 25          	shr    $0x25,%rdx
  4079ed:	6b ca 64             	imul   $0x64,%edx,%ecx
  4079f0:	29 c8                	sub    %ecx,%eax
  4079f2:	89 d9                	mov    %ebx,%ecx
	  __val /= 100;
  4079f4:	89 d3                	mov    %edx,%ebx
	  __first[__pos] = __digits[__num + 1];
  4079f6:	89 f2                	mov    %esi,%edx
	  auto const __num = (__val % 100) * 2;
  4079f8:	01 c0                	add    %eax,%eax
	  __first[__pos] = __digits[__num + 1];
  4079fa:	44 8d 40 01          	lea    0x1(%rax),%r8d
	  __first[__pos - 1] = __digits[__num];
  4079fe:	0f b6 80 a0 94 40 00 	movzbl 0x4094a0(%rax),%eax
	  __first[__pos] = __digits[__num + 1];
  407a05:	45 0f b6 80 a0 94 40 	movzbl 0x4094a0(%r8),%r8d
  407a0c:	00 
  407a0d:	44 88 04 17          	mov    %r8b,(%rdi,%rdx,1)
	  __first[__pos - 1] = __digits[__num];
  407a11:	8d 56 ff             	lea    -0x1(%rsi),%edx
	  __pos -= 2;
  407a14:	83 ee 02             	sub    $0x2,%esi
	  __first[__pos - 1] = __digits[__num];
  407a17:	88 04 17             	mov    %al,(%rdi,%rdx,1)
      while (__val >= 100)
  407a1a:	81 f9 0f 27 00 00    	cmp    $0x270f,%ecx
  407a20:	0f 86 72 01 00 00    	jbe    407b98 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3b8>
  407a26:	89 d9                	mov    %ebx,%ecx
  407a28:	eb b6                	jmp    4079e0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x200>
  407a2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  407a30:	45 89 c6             	mov    %r8d,%r14d
  407a33:	44 89 c1             	mov    %r8d,%ecx
      unsigned __n = 1;
  407a36:	be 01 00 00 00       	mov    $0x1,%esi
	  __value /= __b4;
  407a3b:	48 bf 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%rdi
  407a42:	c5 6d 34 
  407a45:	eb 0b                	jmp    407a52 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x272>
  407a47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  407a4e:	00 00 
  407a50:	89 d1                	mov    %edx,%ecx
	  if (__value < __b2) return __n + 1;
  407a52:	83 f9 63             	cmp    $0x63,%ecx
  407a55:	0f 86 55 05 00 00    	jbe    407fb0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7d0>
	  if (__value < __b3) return __n + 2;
  407a5b:	81 f9 e7 03 00 00    	cmp    $0x3e7,%ecx
  407a61:	0f 86 59 05 00 00    	jbe    407fc0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7e0>
	  if (__value < __b4) return __n + 3;
  407a67:	89 ca                	mov    %ecx,%edx
  407a69:	81 f9 0f 27 00 00    	cmp    $0x270f,%ecx
  407a6f:	0f 86 5b 05 00 00    	jbe    407fd0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7f0>
	  __value /= __b4;
  407a75:	48 89 d0             	mov    %rdx,%rax
	  __n += 4;
  407a78:	83 c6 04             	add    $0x4,%esi
	  __value /= __b4;
  407a7b:	48 f7 e7             	mul    %rdi
  407a7e:	48 c1 ea 0b          	shr    $0xb,%rdx
	  if (__value < (unsigned)__base) return __n;
  407a82:	81 f9 9f 86 01 00    	cmp    $0x1869f,%ecx
  407a88:	77 c6                	ja     407a50 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x270>
	: allocator_type(__a), _M_p(__dat) { }
  407a8a:	48 8d 6c 24 50       	lea    0x50(%rsp),%rbp
      { _M_construct(__n, __c); }
  407a8f:	31 d2                	xor    %edx,%edx
  407a91:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  407a96:	44 89 44 24 08       	mov    %r8d,0x8(%rsp)
	: allocator_type(__a), _M_p(__dat) { }
  407a9b:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
      { _M_construct(__n, __c); }
  407aa0:	e8 eb b7 ff ff       	call   403290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@plt>
      unsigned __pos = __len - 1;
  407aa5:	8b 44 24 48          	mov    0x48(%rsp),%eax
      while (__val >= 100)
  407aa9:	44 8b 44 24 08       	mov    0x8(%rsp),%r8d
      { return _M_dataplus._M_p; }
  407aae:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
      unsigned __pos = __len - 1;
  407ab3:	8d 70 ff             	lea    -0x1(%rax),%esi
      while (__val >= 100)
  407ab6:	41 83 f8 63          	cmp    $0x63,%r8d
  407aba:	0f 86 f0 03 00 00    	jbe    407eb0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x6d0>
	  auto const __num = (__val % 100) * 2;
  407ac0:	44 89 f2             	mov    %r14d,%edx
  407ac3:	44 89 f0             	mov    %r14d,%eax
  407ac6:	48 69 d2 1f 85 eb 51 	imul   $0x51eb851f,%rdx,%rdx
  407acd:	48 c1 ea 25          	shr    $0x25,%rdx
  407ad1:	6b fa 64             	imul   $0x64,%edx,%edi
  407ad4:	29 f8                	sub    %edi,%eax
  407ad6:	44 89 f7             	mov    %r14d,%edi
	  __val /= 100;
  407ad9:	41 89 d6             	mov    %edx,%r14d
	  __first[__pos] = __digits[__num + 1];
  407adc:	89 f2                	mov    %esi,%edx
	  auto const __num = (__val % 100) * 2;
  407ade:	01 c0                	add    %eax,%eax
	  __first[__pos] = __digits[__num + 1];
  407ae0:	44 8d 40 01          	lea    0x1(%rax),%r8d
	  __first[__pos - 1] = __digits[__num];
  407ae4:	0f b6 80 a0 94 40 00 	movzbl 0x4094a0(%rax),%eax
	  __first[__pos] = __digits[__num + 1];
  407aeb:	45 0f b6 80 a0 94 40 	movzbl 0x4094a0(%r8),%r8d
  407af2:	00 
  407af3:	44 88 04 11          	mov    %r8b,(%rcx,%rdx,1)
	  __first[__pos - 1] = __digits[__num];
  407af7:	8d 56 ff             	lea    -0x1(%rsi),%edx
	  __pos -= 2;
  407afa:	83 ee 02             	sub    $0x2,%esi
	  __first[__pos - 1] = __digits[__num];
  407afd:	88 04 11             	mov    %al,(%rcx,%rdx,1)
      while (__val >= 100)
  407b00:	81 ff 0f 27 00 00    	cmp    $0x270f,%edi
  407b06:	77 b8                	ja     407ac0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x2e0>
	__first[0] = '0' + __val;
  407b08:	41 8d 46 30          	lea    0x30(%r14),%eax
      if (__val >= 10)
  407b0c:	81 ff e7 03 00 00    	cmp    $0x3e7,%edi
  407b12:	0f 87 98 03 00 00    	ja     407eb0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x6d0>
  407b18:	88 01                	mov    %al,(%rcx)
  407b1a:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  407b1f:	49 8b 7d 00          	mov    0x0(%r13),%rdi
	if (__str._M_is_local())
  407b23:	48 39 e8             	cmp    %rbp,%rax
  407b26:	0f 84 b1 03 00 00    	je     407edd <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x6fd>
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  407b2c:	49 8d 55 10          	lea    0x10(%r13),%rdx
      { return _M_string_length; }
  407b30:	f3 0f 6f 44 24 48    	movdqu 0x48(%rsp),%xmm0
	    if (!_M_is_local())
  407b36:	48 39 d7             	cmp    %rdx,%rdi
  407b39:	0f 84 c1 04 00 00    	je     408000 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x820>
		    __capacity = _M_allocated_capacity;
  407b3f:	49 8b 55 10          	mov    0x10(%r13),%rdx
      { _M_dataplus._M_p = __p; }
  407b43:	49 89 45 00          	mov    %rax,0x0(%r13)
      { _M_string_length = __length; }
  407b47:	41 0f 11 45 08       	movups %xmm0,0x8(%r13)
	    if (__data)
  407b4c:	48 85 ff             	test   %rdi,%rdi
  407b4f:	0f 84 b4 04 00 00    	je     408009 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x829>
      { _M_dataplus._M_p = __p; }
  407b55:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
      { _M_allocated_capacity = __capacity; }
  407b5a:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
      { _M_string_length = __length; }
  407b5f:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  407b66:	00 00 
  407b68:	c6 07 00             	movb   $0x0,(%rdi)
      { return _M_dataplus._M_p; }
  407b6b:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
	if (!_M_is_local())
  407b70:	48 39 ef             	cmp    %rbp,%rdi
  407b73:	74 0e                	je     407b83 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3a3>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  407b75:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  407b7a:	48 8d 70 01          	lea    0x1(%rax),%rsi
  407b7e:	e8 9d b6 ff ff       	call   403220 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  407b83:	4c 8d 7c 24 20       	lea    0x20(%rsp),%r15
  407b88:	4c 8d 74 24 30       	lea    0x30(%rsp),%r14
  407b8d:	e9 a1 fd ff ff       	jmp    407933 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x153>
  407b92:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  407b98:	81 f9 e7 03 00 00    	cmp    $0x3e7,%ecx
  407b9e:	0f 87 ec 01 00 00    	ja     407d90 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x5b0>
	__first[0] = '0' + __val;
  407ba4:	83 c3 30             	add    $0x30,%ebx
  407ba7:	88 1f                	mov    %bl,(%rdi)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
  407ba9:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  407baf:	b9 5f 90 40 00       	mov    $0x40905f,%ecx
  407bb4:	31 d2                	xor    %edx,%edx
  407bb6:	31 f6                	xor    %esi,%esi
  407bb8:	4c 89 ff             	mov    %r15,%rdi
  407bbb:	e8 d0 b7 ff ff       	call   403390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  407bc0:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
      { return _M_dataplus._M_p; }
  407bc5:	48 8b 08             	mov    (%rax),%rcx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  407bc8:	48 8d 50 10          	lea    0x10(%rax),%rdx
	if (__str._M_is_local())
  407bcc:	48 39 d1             	cmp    %rdx,%rcx
  407bcf:	0f 84 8b 02 00 00    	je     407e60 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x680>
      { _M_dataplus._M_p = __p; }
  407bd5:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
	    _M_capacity(__str._M_allocated_capacity);
  407bda:	48 8b 48 10          	mov    0x10(%rax),%rcx
      { _M_allocated_capacity = __capacity; }
  407bde:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
      { return _M_string_length; }
  407be3:	48 8b 48 08          	mov    0x8(%rax),%rcx
      { _M_string_length = __length; }
  407be7:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
      { _M_dataplus._M_p = __p; }
  407bec:	48 89 10             	mov    %rdx,(%rax)
  407bef:	c6 40 10 00          	movb   $0x0,0x10(%rax)
      { return _M_dataplus._M_p; }
  407bf3:	49 8b 3c 24          	mov    (%r12),%rdi
      { _M_string_length = __length; }
  407bf7:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  407bfe:	00 
      { return _M_dataplus._M_p; }
  407bff:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
	if (__str._M_is_local())
  407c04:	48 39 e8             	cmp    %rbp,%rax
  407c07:	0f 84 63 02 00 00    	je     407e70 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x690>
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  407c0d:	49 8d 54 24 10       	lea    0x10(%r12),%rdx
      { return _M_string_length; }
  407c12:	f3 0f 6f 44 24 48    	movdqu 0x48(%rsp),%xmm0
	    if (!_M_is_local())
  407c18:	48 39 d7             	cmp    %rdx,%rdi
  407c1b:	0f 84 0f 03 00 00    	je     407f30 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x750>
		    __capacity = _M_allocated_capacity;
  407c21:	49 8b 54 24 10       	mov    0x10(%r12),%rdx
      { _M_dataplus._M_p = __p; }
  407c26:	49 89 04 24          	mov    %rax,(%r12)
      { _M_string_length = __length; }
  407c2a:	41 0f 11 44 24 08    	movups %xmm0,0x8(%r12)
	    if (__data)
  407c30:	48 85 ff             	test   %rdi,%rdi
  407c33:	0f 84 01 03 00 00    	je     407f3a <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x75a>
      { _M_dataplus._M_p = __p; }
  407c39:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
      { _M_allocated_capacity = __capacity; }
  407c3e:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
      { _M_string_length = __length; }
  407c43:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  407c4a:	00 00 
  407c4c:	c6 07 00             	movb   $0x0,(%rdi)
      { return _M_dataplus._M_p; }
  407c4f:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
	if (!_M_is_local())
  407c54:	48 39 ef             	cmp    %rbp,%rdi
  407c57:	74 0e                	je     407c67 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x487>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  407c59:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  407c5e:	48 8d 70 01          	lea    0x1(%rax),%rsi
	::operator delete(__p
  407c62:	e8 b9 b5 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  407c67:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  407c6c:	4c 39 f7             	cmp    %r14,%rdi
  407c6f:	74 0e                	je     407c7f <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x49f>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  407c71:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  407c76:	48 8d 70 01          	lea    0x1(%rax),%rsi
  407c7a:	e8 a1 b5 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  407c7f:	49 8b 1c 24          	mov    (%r12),%rbx
      { return _M_string_length; }
  407c83:	4d 8b 64 24 08       	mov    0x8(%r12),%r12
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  407c88:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
  407c8d:	48 89 d8             	mov    %rbx,%rax
  407c90:	4c 01 e0             	add    %r12,%rax
  407c93:	74 09                	je     407c9e <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x4be>
  407c95:	48 85 db             	test   %rbx,%rbx
  407c98:	0f 84 fa 03 00 00    	je     408098 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x8b8>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
  407c9e:	4c 89 64 24 20       	mov    %r12,0x20(%rsp)
	if (__dnew > size_type(_S_local_capacity))
  407ca3:	49 83 fc 0f          	cmp    $0xf,%r12
  407ca7:	0f 87 33 01 00 00    	ja     407de0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x600>
	if (__n == 1)
  407cad:	49 83 fc 01          	cmp    $0x1,%r12
  407cb1:	0f 85 f9 00 00 00    	jne    407db0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x5d0>
  407cb7:	0f b6 03             	movzbl (%rbx),%eax
  407cba:	88 44 24 50          	mov    %al,0x50(%rsp)
  407cbe:	48 89 e8             	mov    %rbp,%rax
      { _M_string_length = __length; }
  407cc1:	4c 89 64 24 48       	mov    %r12,0x48(%rsp)
  407cc6:	42 c6 04 20 00       	movb   $0x0,(%rax,%r12,1)
      { return _M_dataplus._M_p; }
  407ccb:	4d 8b 65 00          	mov    0x0(%r13),%r12
      { return _M_string_length; }
  407ccf:	4d 8b 6d 08          	mov    0x8(%r13),%r13
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  407cd3:	4c 89 74 24 20       	mov    %r14,0x20(%rsp)
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
  407cd8:	4c 89 e0             	mov    %r12,%rax
  407cdb:	4c 01 e8             	add    %r13,%rax
  407cde:	74 09                	je     407ce9 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x509>
  407ce0:	4d 85 e4             	test   %r12,%r12
  407ce3:	0f 84 b9 03 00 00    	je     4080a2 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x8c2>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
  407ce9:	4c 89 6c 24 18       	mov    %r13,0x18(%rsp)
	if (__dnew > size_type(_S_local_capacity))
  407cee:	49 83 fd 0f          	cmp    $0xf,%r13
  407cf2:	0f 87 28 01 00 00    	ja     407e20 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x640>
	if (__n == 1)
  407cf8:	49 83 fd 01          	cmp    $0x1,%r13
  407cfc:	0f 85 c6 00 00 00    	jne    407dc8 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x5e8>
  407d02:	41 0f b6 04 24       	movzbl (%r12),%eax
  407d07:	88 44 24 30          	mov    %al,0x30(%rsp)
  407d0b:	4c 89 f0             	mov    %r14,%rax
      { _M_string_length = __length; }
  407d0e:	4c 89 6c 24 28       	mov    %r13,0x28(%rsp)
	string_to_display(fd, sec_string, min_string);
  407d13:	8b 7c 24 04          	mov    0x4(%rsp),%edi
  407d17:	48 8d 54 24 40       	lea    0x40(%rsp),%rdx
  407d1c:	4c 89 fe             	mov    %r15,%rsi
  407d1f:	42 c6 04 28 00       	movb   $0x0,(%rax,%r13,1)
  407d24:	e8 a7 f8 ff ff       	call   4075d0 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_>
      { return _M_dataplus._M_p; }
  407d29:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  407d2e:	4c 39 f7             	cmp    %r14,%rdi
  407d31:	74 0e                	je     407d41 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x561>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  407d33:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  407d38:	48 8d 70 01          	lea    0x1(%rax),%rsi
  407d3c:	e8 df b4 ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  407d41:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
	if (!_M_is_local())
  407d46:	48 39 ef             	cmp    %rbp,%rdi
  407d49:	74 0e                	je     407d59 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x579>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  407d4b:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  407d50:	48 8d 70 01          	lea    0x1(%rax),%rsi
  407d54:	e8 c7 b4 ff ff       	call   403220 <_ZdlPvm@plt>
}
  407d59:	48 83 c4 68          	add    $0x68,%rsp
  407d5d:	5b                   	pop    %rbx
  407d5e:	5d                   	pop    %rbp
  407d5f:	41 5c                	pop    %r12
  407d61:	41 5d                	pop    %r13
  407d63:	41 5e                	pop    %r14
  407d65:	41 5f                	pop    %r15
  407d67:	c3                   	ret    
  407d68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  407d6f:	00 
  }

  inline string
  to_string(unsigned __val)
  {
    string __str(__detail::__to_chars_len(__val), '\0');
  407d70:	8d 70 05             	lea    0x5(%rax),%esi
      { _M_construct(__n, __c); }
  407d73:	4c 89 ff             	mov    %r15,%rdi
  407d76:	31 d2                	xor    %edx,%edx
	: allocator_type(__a), _M_p(__dat) { }
  407d78:	4c 89 74 24 20       	mov    %r14,0x20(%rsp)
      { _M_construct(__n, __c); }
  407d7d:	e8 0e b5 ff ff       	call   403290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@plt>
      { return _M_dataplus._M_p; }
  407d82:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
      while (__val >= 100)
  407d87:	83 fb 63             	cmp    $0x63,%ebx
  407d8a:	0f 87 c0 01 00 00    	ja     407f50 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x770>
	  auto const __num = __val * 2;
  407d90:	01 db                	add    %ebx,%ebx
	  __first[1] = __digits[__num + 1];
  407d92:	8d 43 01             	lea    0x1(%rbx),%eax
	  __first[0] = __digits[__num];
  407d95:	0f b6 9b a0 94 40 00 	movzbl 0x4094a0(%rbx),%ebx
	  __first[1] = __digits[__num + 1];
  407d9c:	0f b6 80 a0 94 40 00 	movzbl 0x4094a0(%rax),%eax
  407da3:	88 47 01             	mov    %al,0x1(%rdi)
  407da6:	e9 fc fd ff ff       	jmp    407ba7 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3c7>
  407dab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	if (__n == 0)
  407db0:	4d 85 e4             	test   %r12,%r12
  407db3:	0f 85 fb 02 00 00    	jne    4080b4 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x8d4>
  407db9:	48 89 e8             	mov    %rbp,%rax
  407dbc:	e9 00 ff ff ff       	jmp    407cc1 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x4e1>
  407dc1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  407dc8:	4d 85 ed             	test   %r13,%r13
  407dcb:	0f 85 db 02 00 00    	jne    4080ac <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x8cc>
  407dd1:	4c 89 f0             	mov    %r14,%rax
  407dd4:	e9 35 ff ff ff       	jmp    407d0e <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x52e>
  407dd9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	    _M_data(_M_create(__dnew, size_type(0)));
  407de0:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  407de5:	31 d2                	xor    %edx,%edx
  407de7:	4c 89 fe             	mov    %r15,%rsi
  407dea:	e8 91 b6 ff ff       	call   403480 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
  407def:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  407df4:	48 89 c7             	mov    %rax,%rdi
      { _M_allocated_capacity = __capacity; }
  407df7:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  407dfc:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
  407e01:	4c 89 e2             	mov    %r12,%rdx
  407e04:	48 89 de             	mov    %rbx,%rsi
  407e07:	e8 c4 b3 ff ff       	call   4031d0 <memcpy@plt>
	_M_set_length(__dnew);
  407e0c:	4c 8b 64 24 20       	mov    0x20(%rsp),%r12
      { return _M_dataplus._M_p; }
  407e11:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  407e16:	e9 a6 fe ff ff       	jmp    407cc1 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x4e1>
  407e1b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	    _M_data(_M_create(__dnew, size_type(0)));
  407e20:	31 d2                	xor    %edx,%edx
  407e22:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  407e27:	4c 89 ff             	mov    %r15,%rdi
  407e2a:	e8 51 b6 ff ff       	call   403480 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
  407e2f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  407e34:	48 89 c7             	mov    %rax,%rdi
      { _M_allocated_capacity = __capacity; }
  407e37:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  407e3c:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  407e41:	4c 89 ea             	mov    %r13,%rdx
  407e44:	4c 89 e6             	mov    %r12,%rsi
  407e47:	e8 84 b3 ff ff       	call   4031d0 <memcpy@plt>
	_M_set_length(__dnew);
  407e4c:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
      { return _M_dataplus._M_p; }
  407e51:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  407e56:	e9 b3 fe ff ff       	jmp    407d0e <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x52e>
  407e5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  407e60:	f3 0f 6f 48 10       	movdqu 0x10(%rax),%xmm1
  407e65:	0f 29 4c 24 50       	movaps %xmm1,0x50(%rsp)
  407e6a:	e9 74 fd ff ff       	jmp    407be3 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x403>
  407e6f:	90                   	nop
      { return _M_string_length; }
  407e70:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
		if (__str.size())
  407e75:	48 85 d2             	test   %rdx,%rdx
  407e78:	74 1b                	je     407e95 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x6b5>
	if (__n == 1)
  407e7a:	48 83 fa 01          	cmp    $0x1,%rdx
  407e7e:	0f 84 c1 01 00 00    	je     408045 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x865>
  407e84:	48 89 ee             	mov    %rbp,%rsi
  407e87:	e8 44 b3 ff ff       	call   4031d0 <memcpy@plt>
      { return _M_string_length; }
  407e8c:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
      { return _M_dataplus._M_p; }
  407e91:	49 8b 3c 24          	mov    (%r12),%rdi
      { _M_string_length = __length; }
  407e95:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
      { __c1 = __c2; }
  407e9a:	c6 04 17 00          	movb   $0x0,(%rdi,%rdx,1)
      { return _M_dataplus._M_p; }
  407e9e:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
      }
  407ea3:	e9 9b fd ff ff       	jmp    407c43 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x463>
  407ea8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  407eaf:	00 
	  auto const __num = __val * 2;
  407eb0:	45 01 f6             	add    %r14d,%r14d
	  __first[1] = __digits[__num + 1];
  407eb3:	41 8d 46 01          	lea    0x1(%r14),%eax
  407eb7:	0f b6 80 a0 94 40 00 	movzbl 0x4094a0(%rax),%eax
  407ebe:	88 41 01             	mov    %al,0x1(%rcx)
	  __first[0] = __digits[__num];
  407ec1:	41 0f b6 86 a0 94 40 	movzbl 0x4094a0(%r14),%eax
  407ec8:	00 
  407ec9:	88 01                	mov    %al,(%rcx)
      { return _M_dataplus._M_p; }
  407ecb:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  407ed0:	49 8b 7d 00          	mov    0x0(%r13),%rdi
	if (__str._M_is_local())
  407ed4:	48 39 e8             	cmp    %rbp,%rax
  407ed7:	0f 85 4f fc ff ff    	jne    407b2c <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x34c>
      { return _M_string_length; }
  407edd:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
		if (__str.size())
  407ee2:	48 85 d2             	test   %rdx,%rdx
  407ee5:	74 1b                	je     407f02 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x722>
	if (__n == 1)
  407ee7:	48 83 fa 01          	cmp    $0x1,%rdx
  407eeb:	0f 84 3f 01 00 00    	je     408030 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x850>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
  407ef1:	48 89 ee             	mov    %rbp,%rsi
  407ef4:	e8 d7 b2 ff ff       	call   4031d0 <memcpy@plt>
      { return _M_string_length; }
  407ef9:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
      { return _M_dataplus._M_p; }
  407efe:	49 8b 7d 00          	mov    0x0(%r13),%rdi
      { _M_string_length = __length; }
  407f02:	49 89 55 08          	mov    %rdx,0x8(%r13)
      { __c1 = __c2; }
  407f06:	c6 04 17 00          	movb   $0x0,(%rdi,%rdx,1)
      { return _M_dataplus._M_p; }
  407f0a:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
      }
  407f0f:	e9 4b fc ff ff       	jmp    407b5f <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x37f>
  407f14:	0f 1f 40 00          	nopl   0x0(%rax)
    string __str(__detail::__to_chars_len(__val), '\0');
  407f18:	8d 70 06             	lea    0x6(%rax),%esi
  407f1b:	e9 94 fa ff ff       	jmp    4079b4 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x1d4>
  407f20:	8d 70 07             	lea    0x7(%rax),%esi
  407f23:	e9 8c fa ff ff       	jmp    4079b4 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x1d4>
  407f28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  407f2f:	00 
      { _M_dataplus._M_p = __p; }
  407f30:	49 89 04 24          	mov    %rax,(%r12)
      { _M_string_length = __length; }
  407f34:	41 0f 11 44 24 08    	movups %xmm0,0x8(%r12)
      { _M_dataplus._M_p = __p; }
  407f3a:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
  407f3f:	48 8d 6c 24 50       	lea    0x50(%rsp),%rbp
  407f44:	48 89 ef             	mov    %rbp,%rdi
  407f47:	e9 f7 fc ff ff       	jmp    407c43 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x463>
  407f4c:	0f 1f 40 00          	nopl   0x0(%rax)
      unsigned __pos = __len - 1;
  407f50:	8b 44 24 28          	mov    0x28(%rsp),%eax
  407f54:	89 d9                	mov    %ebx,%ecx
  407f56:	8d 70 ff             	lea    -0x1(%rax),%esi
  407f59:	e9 82 fa ff ff       	jmp    4079e0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x200>
  407f5e:	66 90                	xchg   %ax,%ax
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
  407f60:	f3 0f 6f 50 10       	movdqu 0x10(%rax),%xmm2
  407f65:	0f 29 54 24 50       	movaps %xmm2,0x50(%rsp)
  407f6a:	e9 2b f9 ff ff       	jmp    40789a <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0xba>
  407f6f:	90                   	nop
      { return _M_string_length; }
  407f70:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
		if (__str.size())
  407f75:	48 85 d2             	test   %rdx,%rdx
  407f78:	74 1b                	je     407f95 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7b5>
	if (__n == 1)
  407f7a:	48 83 fa 01          	cmp    $0x1,%rdx
  407f7e:	0f 84 97 00 00 00    	je     40801b <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x83b>
  407f84:	48 89 ee             	mov    %rbp,%rsi
  407f87:	e8 44 b2 ff ff       	call   4031d0 <memcpy@plt>
      { return _M_string_length; }
  407f8c:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
      { return _M_dataplus._M_p; }
  407f91:	49 8b 7d 00          	mov    0x0(%r13),%rdi
      { _M_string_length = __length; }
  407f95:	49 89 55 08          	mov    %rdx,0x8(%r13)
      { __c1 = __c2; }
  407f99:	c6 04 17 00          	movb   $0x0,(%rdi,%rdx,1)
      { return _M_dataplus._M_p; }
  407f9d:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
      }
  407fa2:	e9 50 f9 ff ff       	jmp    4078f7 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x117>
  407fa7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  407fae:	00 00 
	  if (__value < __b2) return __n + 1;
  407fb0:	83 c6 01             	add    $0x1,%esi
  407fb3:	e9 d2 fa ff ff       	jmp    407a8a <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x2aa>
  407fb8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  407fbf:	00 
	  if (__value < __b3) return __n + 2;
  407fc0:	83 c6 02             	add    $0x2,%esi
  407fc3:	e9 c2 fa ff ff       	jmp    407a8a <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x2aa>
  407fc8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  407fcf:	00 
	  if (__value < __b4) return __n + 3;
  407fd0:	83 c6 03             	add    $0x3,%esi
  407fd3:	e9 b2 fa ff ff       	jmp    407a8a <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x2aa>
  407fd8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  407fdf:	00 
      { _M_dataplus._M_p = __p; }
  407fe0:	49 89 45 00          	mov    %rax,0x0(%r13)
      { _M_string_length = __length; }
  407fe4:	41 0f 11 45 08       	movups %xmm0,0x8(%r13)
      { _M_dataplus._M_p = __p; }
  407fe9:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
  407fee:	48 8d 6c 24 50       	lea    0x50(%rsp),%rbp
  407ff3:	48 89 ef             	mov    %rbp,%rdi
  407ff6:	e9 fc f8 ff ff       	jmp    4078f7 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x117>
  407ffb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  408000:	49 89 45 00          	mov    %rax,0x0(%r13)
      { _M_string_length = __length; }
  408004:	41 0f 11 45 08       	movups %xmm0,0x8(%r13)
      { _M_dataplus._M_p = __p; }
  408009:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
  40800e:	48 8d 6c 24 50       	lea    0x50(%rsp),%rbp
  408013:	48 89 ef             	mov    %rbp,%rdi
  408016:	e9 44 fb ff ff       	jmp    407b5f <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x37f>
  40801b:	0f b6 44 24 50       	movzbl 0x50(%rsp),%eax
  408020:	88 07                	mov    %al,(%rdi)
      { return _M_string_length; }
  408022:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
      { return _M_dataplus._M_p; }
  408027:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  40802b:	e9 65 ff ff ff       	jmp    407f95 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7b5>
  408030:	0f b6 44 24 50       	movzbl 0x50(%rsp),%eax
  408035:	88 07                	mov    %al,(%rdi)
      { return _M_string_length; }
  408037:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
      { return _M_dataplus._M_p; }
  40803c:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  408040:	e9 bd fe ff ff       	jmp    407f02 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x722>
  408045:	0f b6 44 24 50       	movzbl 0x50(%rsp),%eax
  40804a:	88 07                	mov    %al,(%rdi)
      { return _M_string_length; }
  40804c:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
      { return _M_dataplus._M_p; }
  408051:	49 8b 3c 24          	mov    (%r12),%rdi
  408055:	e9 3b fe ff ff       	jmp    407e95 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x6b5>
      { _M_construct(__n, __c); }
  40805a:	4c 89 ff             	mov    %r15,%rdi
  40805d:	31 d2                	xor    %edx,%edx
  40805f:	be 01 00 00 00       	mov    $0x1,%esi
	: allocator_type(__a), _M_p(__dat) { }
  408064:	4c 89 74 24 20       	mov    %r14,0x20(%rsp)
      { _M_construct(__n, __c); }
  408069:	e8 22 b2 ff ff       	call   403290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@plt>
      { return _M_dataplus._M_p; }
  40806e:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
      while (__val >= 100)
  408073:	e9 2c fb ff ff       	jmp    407ba4 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3c4>
	  if (__value < __b2) return __n + 1;
  408078:	be 02 00 00 00       	mov    $0x2,%esi
  40807d:	e9 f1 fc ff ff       	jmp    407d73 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x593>
	  if (__value < __b4) return __n + 3;
  408082:	be 04 00 00 00       	mov    $0x4,%esi
  408087:	e9 28 f9 ff ff       	jmp    4079b4 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x1d4>
	  if (__value < __b3) return __n + 2;
  40808c:	be 03 00 00 00       	mov    $0x3,%esi
  408091:	89 d9                	mov    %ebx,%ecx
  408093:	e9 1c f9 ff ff       	jmp    4079b4 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x1d4>
	  std::__throw_logic_error(__N("basic_string::"
  408098:	bf 90 91 40 00       	mov    $0x409190,%edi
  40809d:	e8 ce b0 ff ff       	call   403170 <_ZSt19__throw_logic_errorPKc@plt>
  4080a2:	bf 90 91 40 00       	mov    $0x409190,%edi
  4080a7:	e8 c4 b0 ff ff       	call   403170 <_ZSt19__throw_logic_errorPKc@plt>
  4080ac:	4c 89 f7             	mov    %r14,%rdi
  4080af:	e9 8d fd ff ff       	jmp    407e41 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x661>
  4080b4:	48 89 ef             	mov    %rbp,%rdi
  4080b7:	e9 45 fd ff ff       	jmp    407e01 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x621>
  4080bc:	49 89 c4             	mov    %rax,%r12
  4080bf:	e9 dd b4 ff ff       	jmp    4035a1 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_.cold+0x18>
  4080c4:	49 89 c4             	mov    %rax,%r12
  4080c7:	e9 bd b4 ff ff       	jmp    403589 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_.cold>
  4080cc:	48 89 c5             	mov    %rax,%rbp
  4080cf:	e9 ed b4 ff ff       	jmp    4035c1 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_.cold+0x38>
  4080d4:	48 89 c5             	mov    %rax,%rbp
  4080d7:	e9 e5 b4 ff ff       	jmp    4035c1 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_.cold+0x38>
  4080dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004080e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
  4080e0:	41 55                	push   %r13
  4080e2:	41 54                	push   %r12
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  4080e4:	4c 8d 67 10          	lea    0x10(%rdi),%r12
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
  4080e8:	55                   	push   %rbp
  4080e9:	53                   	push   %rbx
  4080ea:	48 83 ec 18          	sub    $0x18,%rsp
	: allocator_type(__a), _M_p(__dat) { }
  4080ee:	4c 89 27             	mov    %r12,(%rdi)
	const _CharT* __end = __s ? __s + traits_type::length(__s)
  4080f1:	48 85 f6             	test   %rsi,%rsi
  4080f4:	0f 84 8c 00 00 00    	je     408186 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0xa6>
  4080fa:	48 89 fb             	mov    %rdi,%rbx
	return __builtin_strlen(__s);
  4080fd:	48 89 f7             	mov    %rsi,%rdi
  408100:	48 89 f5             	mov    %rsi,%rbp
  408103:	e8 08 b0 ff ff       	call   403110 <strlen@plt>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
  408108:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  40810d:	49 89 c5             	mov    %rax,%r13
	if (__dnew > size_type(_S_local_capacity))
  408110:	48 83 f8 0f          	cmp    $0xf,%rax
  408114:	77 3a                	ja     408150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x70>
	if (__n == 1)
  408116:	48 83 f8 01          	cmp    $0x1,%rax
  40811a:	75 24                	jne    408140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x60>
      { __c1 = __c2; }
  40811c:	0f b6 55 00          	movzbl 0x0(%rbp),%edx
  408120:	88 53 10             	mov    %dl,0x10(%rbx)
      { _M_string_length = __length; }
  408123:	48 89 43 08          	mov    %rax,0x8(%rbx)
  408127:	41 c6 04 04 00       	movb   $0x0,(%r12,%rax,1)
      }
  40812c:	48 83 c4 18          	add    $0x18,%rsp
  408130:	5b                   	pop    %rbx
  408131:	5d                   	pop    %rbp
  408132:	41 5c                	pop    %r12
  408134:	41 5d                	pop    %r13
  408136:	c3                   	ret    
  408137:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40813e:	00 00 
	if (__n == 0)
  408140:	48 85 c0             	test   %rax,%rax
  408143:	74 de                	je     408123 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x43>
  408145:	eb 27                	jmp    40816e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x8e>
  408147:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40814e:	00 00 
	    _M_data(_M_create(__dnew, size_type(0)));
  408150:	31 d2                	xor    %edx,%edx
  408152:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  408157:	48 89 df             	mov    %rbx,%rdi
  40815a:	e8 21 b3 ff ff       	call   403480 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
  40815f:	48 89 03             	mov    %rax,(%rbx)
  408162:	49 89 c4             	mov    %rax,%r12
      { _M_allocated_capacity = __capacity; }
  408165:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40816a:	48 89 43 10          	mov    %rax,0x10(%rbx)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
  40816e:	4c 89 e7             	mov    %r12,%rdi
  408171:	4c 89 ea             	mov    %r13,%rdx
  408174:	48 89 ee             	mov    %rbp,%rsi
  408177:	e8 54 b0 ff ff       	call   4031d0 <memcpy@plt>
	_M_set_length(__dnew);
  40817c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
      { return _M_dataplus._M_p; }
  408181:	4c 8b 23             	mov    (%rbx),%r12
  408184:	eb 9d                	jmp    408123 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x43>
	  std::__throw_logic_error(__N("basic_string::"
  408186:	bf 90 91 40 00       	mov    $0x409190,%edi
  40818b:	e8 e0 af ff ff       	call   403170 <_ZSt19__throw_logic_errorPKc@plt>

0000000000408190 <_ZN2sf4TextD1Ev>:
{
////////////////////////////////////////////////////////////
/// \brief Graphical text that can be drawn to a render target
///
////////////////////////////////////////////////////////////
class SFML_GRAPHICS_API Text : public Drawable, public Transformable
  408190:	b8 50 bd 40 00       	mov    $0x40bd50,%eax
  408195:	53                   	push   %rbx
  408196:	48 89 fb             	mov    %rdi,%rbx
{
////////////////////////////////////////////////////////////
/// \brief Define a set of one or more 2D primitives
///
////////////////////////////////////////////////////////////
class SFML_GRAPHICS_API VertexArray : public Drawable
  408199:	48 c7 87 28 01 00 00 	movq   $0x40bd98,0x128(%rdi)
  4081a0:	98 bd 40 00 
  4081a4:	66 48 0f 6e c0       	movq   %rax,%xmm0
  4081a9:	0f 16 05 c0 13 00 00 	movhps 0x13c0(%rip),%xmm0        # 409570 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xd0>
  4081b0:	0f 11 07             	movups %xmm0,(%rdi)
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4081b3:	48 8b bf 30 01 00 00 	mov    0x130(%rdi),%rdi
	if (__p)
  4081ba:	48 85 ff             	test   %rdi,%rdi
  4081bd:	74 0f                	je     4081ce <_ZN2sf4TextD1Ev+0x3e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  4081bf:	48 8b b3 40 01 00 00 	mov    0x140(%rbx),%rsi
  4081c6:	48 29 fe             	sub    %rdi,%rsi
  4081c9:	e8 52 b0 ff ff       	call   403220 <_ZdlPvm@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4081ce:	48 8b bb 08 01 00 00 	mov    0x108(%rbx),%rdi
  4081d5:	48 c7 83 00 01 00 00 	movq   $0x40bd98,0x100(%rbx)
  4081dc:	98 bd 40 00 
	if (__p)
  4081e0:	48 85 ff             	test   %rdi,%rdi
  4081e3:	74 0f                	je     4081f4 <_ZN2sf4TextD1Ev+0x64>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  4081e5:	48 8b b3 18 01 00 00 	mov    0x118(%rbx),%rsi
  4081ec:	48 29 fe             	sub    %rdi,%rsi
  4081ef:	e8 2c b0 ff ff       	call   403220 <_ZdlPvm@plt>
  4081f4:	48 8b bb b8 00 00 00 	mov    0xb8(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4081fb:	48 8d 83 c8 00 00 00 	lea    0xc8(%rbx),%rax
	if (!_M_is_local())
  408202:	48 39 c7             	cmp    %rax,%rdi
  408205:	74 14                	je     40821b <_ZN2sf4TextD1Ev+0x8b>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  408207:	48 8b 83 c8 00 00 00 	mov    0xc8(%rbx),%rax
  40820e:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  408215:	00 
  408216:	e8 05 b0 ff ff       	call   403220 <_ZdlPvm@plt>
  40821b:	48 8d 7b 08          	lea    0x8(%rbx),%rdi
  40821f:	5b                   	pop    %rbx
  408220:	e9 fb ae ff ff       	jmp    403120 <_ZN2sf13TransformableD2Ev@plt>
  408225:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  40822c:	00 00 00 00 

0000000000408230 <_ZThn8_N2sf4TextD1Ev>:
  408230:	b8 50 bd 40 00       	mov    $0x40bd50,%eax
  408235:	55                   	push   %rbp
  408236:	48 89 fd             	mov    %rdi,%rbp
  408239:	48 c7 87 20 01 00 00 	movq   $0x40bd98,0x120(%rdi)
  408240:	98 bd 40 00 
  408244:	66 48 0f 6e c0       	movq   %rax,%xmm0
  408249:	0f 16 05 20 13 00 00 	movhps 0x1320(%rip),%xmm0        # 409570 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xd0>
  408250:	0f 11 47 f8          	movups %xmm0,-0x8(%rdi)
  408254:	48 8b bf 28 01 00 00 	mov    0x128(%rdi),%rdi
  40825b:	48 85 ff             	test   %rdi,%rdi
  40825e:	74 0f                	je     40826f <_ZThn8_N2sf4TextD1Ev+0x3f>
  408260:	48 8b b5 38 01 00 00 	mov    0x138(%rbp),%rsi
  408267:	48 29 fe             	sub    %rdi,%rsi
  40826a:	e8 b1 af ff ff       	call   403220 <_ZdlPvm@plt>
  40826f:	48 8b bd 00 01 00 00 	mov    0x100(%rbp),%rdi
  408276:	48 c7 85 f8 00 00 00 	movq   $0x40bd98,0xf8(%rbp)
  40827d:	98 bd 40 00 
  408281:	48 85 ff             	test   %rdi,%rdi
  408284:	74 0f                	je     408295 <_ZThn8_N2sf4TextD1Ev+0x65>
  408286:	48 8b b5 10 01 00 00 	mov    0x110(%rbp),%rsi
  40828d:	48 29 fe             	sub    %rdi,%rsi
  408290:	e8 8b af ff ff       	call   403220 <_ZdlPvm@plt>
  408295:	48 8b bd b0 00 00 00 	mov    0xb0(%rbp),%rdi
  40829c:	48 8d 85 c0 00 00 00 	lea    0xc0(%rbp),%rax
  4082a3:	48 39 c7             	cmp    %rax,%rdi
  4082a6:	74 14                	je     4082bc <_ZThn8_N2sf4TextD1Ev+0x8c>
  4082a8:	48 8b 85 c0 00 00 00 	mov    0xc0(%rbp),%rax
  4082af:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4082b6:	00 
  4082b7:	e8 64 af ff ff       	call   403220 <_ZdlPvm@plt>
  4082bc:	48 89 ef             	mov    %rbp,%rdi
  4082bf:	5d                   	pop    %rbp
  4082c0:	e9 5b ae ff ff       	jmp    403120 <_ZN2sf13TransformableD2Ev@plt>
  4082c5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  4082cc:	00 00 00 
  4082cf:	90                   	nop

00000000004082d0 <_ZN2sf4TextD0Ev>:
  4082d0:	b8 50 bd 40 00       	mov    $0x40bd50,%eax
  4082d5:	55                   	push   %rbp
  4082d6:	48 89 fd             	mov    %rdi,%rbp
  4082d9:	48 c7 87 28 01 00 00 	movq   $0x40bd98,0x128(%rdi)
  4082e0:	98 bd 40 00 
  4082e4:	66 48 0f 6e c0       	movq   %rax,%xmm0
  4082e9:	0f 16 05 80 12 00 00 	movhps 0x1280(%rip),%xmm0        # 409570 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xd0>
  4082f0:	0f 11 07             	movups %xmm0,(%rdi)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4082f3:	48 8b bf 30 01 00 00 	mov    0x130(%rdi),%rdi
	if (__p)
  4082fa:	48 85 ff             	test   %rdi,%rdi
  4082fd:	74 0f                	je     40830e <_ZN2sf4TextD0Ev+0x3e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  4082ff:	48 8b b5 40 01 00 00 	mov    0x140(%rbp),%rsi
  408306:	48 29 fe             	sub    %rdi,%rsi
  408309:	e8 12 af ff ff       	call   403220 <_ZdlPvm@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  40830e:	48 8b bd 08 01 00 00 	mov    0x108(%rbp),%rdi
  408315:	48 c7 85 00 01 00 00 	movq   $0x40bd98,0x100(%rbp)
  40831c:	98 bd 40 00 
	if (__p)
  408320:	48 85 ff             	test   %rdi,%rdi
  408323:	74 0f                	je     408334 <_ZN2sf4TextD0Ev+0x64>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  408325:	48 8b b5 18 01 00 00 	mov    0x118(%rbp),%rsi
  40832c:	48 29 fe             	sub    %rdi,%rsi
  40832f:	e8 ec ae ff ff       	call   403220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  408334:	48 8b bd b8 00 00 00 	mov    0xb8(%rbp),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  40833b:	48 8d 85 c8 00 00 00 	lea    0xc8(%rbp),%rax
	if (!_M_is_local())
  408342:	48 39 c7             	cmp    %rax,%rdi
  408345:	74 14                	je     40835b <_ZN2sf4TextD0Ev+0x8b>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  408347:	48 8b 85 c8 00 00 00 	mov    0xc8(%rbp),%rax
  40834e:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  408355:	00 
  408356:	e8 c5 ae ff ff       	call   403220 <_ZdlPvm@plt>
  40835b:	48 8d 7d 08          	lea    0x8(%rbp),%rdi
  40835f:	e8 bc ad ff ff       	call   403120 <_ZN2sf13TransformableD2Ev@plt>
  408364:	48 89 ef             	mov    %rbp,%rdi
  408367:	be 70 01 00 00       	mov    $0x170,%esi
  40836c:	5d                   	pop    %rbp
  40836d:	e9 ae ae ff ff       	jmp    403220 <_ZdlPvm@plt>
  408372:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  408379:	00 00 00 00 
  40837d:	0f 1f 00             	nopl   (%rax)

0000000000408380 <_ZThn8_N2sf4TextD0Ev>:
  408380:	41 54                	push   %r12
  408382:	b8 50 bd 40 00       	mov    $0x40bd50,%eax
  408387:	4c 8d 67 f8          	lea    -0x8(%rdi),%r12
  40838b:	55                   	push   %rbp
  40838c:	66 48 0f 6e c0       	movq   %rax,%xmm0
  408391:	48 89 fd             	mov    %rdi,%rbp
  408394:	48 83 ec 08          	sub    $0x8,%rsp
  408398:	48 c7 87 20 01 00 00 	movq   $0x40bd98,0x120(%rdi)
  40839f:	98 bd 40 00 
  4083a3:	0f 16 05 c6 11 00 00 	movhps 0x11c6(%rip),%xmm0        # 409570 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xd0>
  4083aa:	0f 11 47 f8          	movups %xmm0,-0x8(%rdi)
  4083ae:	48 8b bf 28 01 00 00 	mov    0x128(%rdi),%rdi
  4083b5:	48 85 ff             	test   %rdi,%rdi
  4083b8:	74 0f                	je     4083c9 <_ZThn8_N2sf4TextD0Ev+0x49>
  4083ba:	48 8b b5 38 01 00 00 	mov    0x138(%rbp),%rsi
  4083c1:	48 29 fe             	sub    %rdi,%rsi
  4083c4:	e8 57 ae ff ff       	call   403220 <_ZdlPvm@plt>
  4083c9:	48 8b bd 00 01 00 00 	mov    0x100(%rbp),%rdi
  4083d0:	48 c7 85 f8 00 00 00 	movq   $0x40bd98,0xf8(%rbp)
  4083d7:	98 bd 40 00 
  4083db:	48 85 ff             	test   %rdi,%rdi
  4083de:	74 0f                	je     4083ef <_ZThn8_N2sf4TextD0Ev+0x6f>
  4083e0:	48 8b b5 10 01 00 00 	mov    0x110(%rbp),%rsi
  4083e7:	48 29 fe             	sub    %rdi,%rsi
  4083ea:	e8 31 ae ff ff       	call   403220 <_ZdlPvm@plt>
  4083ef:	48 8b bd b0 00 00 00 	mov    0xb0(%rbp),%rdi
  4083f6:	48 8d 85 c0 00 00 00 	lea    0xc0(%rbp),%rax
  4083fd:	48 39 c7             	cmp    %rax,%rdi
  408400:	74 14                	je     408416 <_ZThn8_N2sf4TextD0Ev+0x96>
  408402:	48 8b 85 c0 00 00 00 	mov    0xc0(%rbp),%rax
  408409:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  408410:	00 
  408411:	e8 0a ae ff ff       	call   403220 <_ZdlPvm@plt>
  408416:	48 89 ef             	mov    %rbp,%rdi
  408419:	e8 02 ad ff ff       	call   403120 <_ZN2sf13TransformableD2Ev@plt>
  40841e:	48 83 c4 08          	add    $0x8,%rsp
  408422:	4c 89 e7             	mov    %r12,%rdi
  408425:	be 70 01 00 00       	mov    $0x170,%esi
  40842a:	5d                   	pop    %rbp
  40842b:	41 5c                	pop    %r12
  40842d:	e9 ee ad ff ff       	jmp    403220 <_ZdlPvm@plt>

Desmontagem da secção .fini:

0000000000408434 <_fini>:
  408434:	f3 0f 1e fa          	endbr64 
  408438:	48 83 ec 08          	sub    $0x8,%rsp
  40843c:	48 83 c4 08          	add    $0x8,%rsp
  408440:	c3                   	ret    
