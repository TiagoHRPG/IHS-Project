
app/build/release/app:     formato de ficheiro elf64-x86-64

Secções:
Idx Name          Tam.      VMA               LMA               File off  Algn
  0 .interp       0000001c  0000000000400318  0000000000400318  00000318  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.gnu.property 00000040  0000000000400338  0000000000400338  00000338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  0000000000400378  0000000000400378  00000378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .note.ABI-tag 00000020  000000000040039c  000000000040039c  0000039c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .gnu.hash     00000048  00000000004003c0  00000000004003c0  000003c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynsym       000007f8  0000000000400408  0000000000400408  00000408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .dynstr       00000a5e  0000000000400c00  0000000000400c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version  000000aa  000000000040165e  000000000040165e  0000165e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .gnu.version_r 000000e0  0000000000401708  0000000000401708  00001708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rela.dyn     000000d8  00000000004017e8  00000000004017e8  000017e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .rela.plt     00000708  00000000004018c0  00000000004018c0  000018c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .init         0000001b  0000000000402000  0000000000402000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .plt          000004c0  0000000000402020  0000000000402020  00002020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text         00005082  00000000004024e0  00000000004024e0  000024e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .fini         0000000d  0000000000407564  0000000000407564  00007564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .rodata       0000064c  0000000000408000  0000000000408000  00008000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .eh_frame_hdr 000000c4  000000000040864c  000000000040864c  0000864c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .eh_frame     000003b4  0000000000408710  0000000000408710  00008710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .gcc_except_table 00000351  0000000000408ac4  0000000000408ac4  00008ac4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .init_array   00000010  000000000040acc8  000000000040acc8  00009cc8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 20 .fini_array   00000008  000000000040acd8  000000000040acd8  00009cd8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 21 .data.rel.ro  000000d0  000000000040ace0  000000000040ace0  00009ce0  2**4
                  CONTENTS, ALLOC, LOAD, DATA
 22 .dynamic      00000240  000000000040adb0  000000000040adb0  00009db0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 23 .got          00000010  000000000040aff0  000000000040aff0  00009ff0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 24 .got.plt      00000270  000000000040b000  000000000040b000  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 25 .data         00000004  000000000040b270  000000000040b270  0000a270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 26 .bss          000001b0  000000000040b280  000000000040b280  0000a274  2**6
                  ALLOC
 27 .comment      0000002e  0000000000000000  0000000000000000  0000a274  2**0
                  CONTENTS, READONLY
 28 .gnu.build.attributes 00001cd4  000000000040d430  000000000040d430  0000a2a4  2**2
                  CONTENTS, READONLY, OCTETS
 29 .debug_aranges 00000090  0000000000000000  0000000000000000  0000bf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_info   0003b82c  0000000000000000  0000000000000000  0000c008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_abbrev 0000131f  0000000000000000  0000000000000000  00047834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 32 .debug_line   0000683c  0000000000000000  0000000000000000  00048b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 33 .debug_str    00033e47  0000000000000000  0000000000000000  0004f38f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 34 .debug_line_str 000007a8  0000000000000000  0000000000000000  000831d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 35 .debug_loclists 000102fb  0000000000000000  0000000000000000  0008397e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 36 .debug_rnglists 00002cd6  0000000000000000  0000000000000000  00093c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Desmontagem da secção .init:

0000000000402000 <_init>:
  402000:	f3 0f 1e fa          	endbr64 
  402004:	48 83 ec 08          	sub    $0x8,%rsp
  402008:	48 8b 05 e9 8f 00 00 	mov    0x8fe9(%rip),%rax        # 40aff8 <__gmon_start__@Base>
  40200f:	48 85 c0             	test   %rax,%rax
  402012:	74 02                	je     402016 <_init+0x16>
  402014:	ff d0                	call   *%rax
  402016:	48 83 c4 08          	add    $0x8,%rsp
  40201a:	c3                   	ret    

Desmontagem da secção .plt:

0000000000402020 <_ZNSo3putEc@plt-0x10>:
  402020:	ff 35 e2 8f 00 00    	push   0x8fe2(%rip)        # 40b008 <_GLOBAL_OFFSET_TABLE_+0x8>
  402026:	ff 25 e4 8f 00 00    	jmp    *0x8fe4(%rip)        # 40b010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40202c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000402030 <_ZNSo3putEc@plt>:
  402030:	ff 25 e2 8f 00 00    	jmp    *0x8fe2(%rip)        # 40b018 <_ZNSo3putEc@GLIBCXX_3.4>
  402036:	68 00 00 00 00       	push   $0x0
  40203b:	e9 e0 ff ff ff       	jmp    402020 <_init+0x20>

0000000000402040 <printf@plt>:
  402040:	ff 25 da 8f 00 00    	jmp    *0x8fda(%rip)        # 40b020 <printf@GLIBC_2.2.5>
  402046:	68 01 00 00 00       	push   $0x1
  40204b:	e9 d0 ff ff ff       	jmp    402020 <_init+0x20>

0000000000402050 <_ZN2sf4TimeC1Ev@plt>:
  402050:	ff 25 d2 8f 00 00    	jmp    *0x8fd2(%rip)        # 40b028 <_ZN2sf4TimeC1Ev@Base>
  402056:	68 02 00 00 00       	push   $0x2
  40205b:	e9 c0 ff ff ff       	jmp    402020 <_init+0x20>

0000000000402060 <_ZN2sf5ShapeD2Ev@plt>:
  402060:	ff 25 ca 8f 00 00    	jmp    *0x8fca(%rip)        # 40b030 <_ZN2sf5ShapeD2Ev@Base>
  402066:	68 03 00 00 00       	push   $0x3
  40206b:	e9 b0 ff ff ff       	jmp    402020 <_init+0x20>

0000000000402070 <_ZN2sf5MusicC1Ev@plt>:
  402070:	ff 25 c2 8f 00 00    	jmp    *0x8fc2(%rip)        # 40b038 <_ZN2sf5MusicC1Ev@Base>
  402076:	68 04 00 00 00       	push   $0x4
  40207b:	e9 a0 ff ff ff       	jmp    402020 <_init+0x20>

0000000000402080 <_ZN2sf5Music12openFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
  402080:	ff 25 ba 8f 00 00    	jmp    *0x8fba(%rip)        # 40b040 <_ZN2sf5Music12openFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@Base>
  402086:	68 05 00 00 00       	push   $0x5
  40208b:	e9 90 ff ff ff       	jmp    402020 <_init+0x20>

0000000000402090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>:
  402090:	ff 25 b2 8f 00 00    	jmp    *0x8fb2(%rip)        # 40b048 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@GLIBCXX_3.4.21>
  402096:	68 06 00 00 00       	push   $0x6
  40209b:	e9 80 ff ff ff       	jmp    402020 <_init+0x20>

00000000004020a0 <_ZN2sf6StringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6locale@plt>:
  4020a0:	ff 25 aa 8f 00 00    	jmp    *0x8faa(%rip)        # 40b050 <_ZN2sf6StringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6locale@Base>
  4020a6:	68 07 00 00 00       	push   $0x7
  4020ab:	e9 70 ff ff ff       	jmp    402020 <_init+0x20>

00000000004020b0 <_ZN2sf4FontC1Ev@plt>:
  4020b0:	ff 25 a2 8f 00 00    	jmp    *0x8fa2(%rip)        # 40b058 <_ZN2sf4FontC1Ev@Base>
  4020b6:	68 08 00 00 00       	push   $0x8
  4020bb:	e9 60 ff ff ff       	jmp    402020 <_init+0x20>

00000000004020c0 <_ZN2sf6StringC1Ej@plt>:
  4020c0:	ff 25 9a 8f 00 00    	jmp    *0x8f9a(%rip)        # 40b060 <_ZN2sf6StringC1Ej@Base>
  4020c6:	68 09 00 00 00       	push   $0x9
  4020cb:	e9 50 ff ff ff       	jmp    402020 <_init+0x20>

00000000004020d0 <_ZN2sfplERKNS_6StringES2_@plt>:
  4020d0:	ff 25 92 8f 00 00    	jmp    *0x8f92(%rip)        # 40b068 <_ZN2sfplERKNS_6StringES2_@Base>
  4020d6:	68 0a 00 00 00       	push   $0xa
  4020db:	e9 40 ff ff ff       	jmp    402020 <_init+0x20>

00000000004020e0 <write@plt>:
  4020e0:	ff 25 8a 8f 00 00    	jmp    *0x8f8a(%rip)        # 40b070 <write@GLIBC_2.2.5>
  4020e6:	68 0b 00 00 00       	push   $0xb
  4020eb:	e9 30 ff ff ff       	jmp    402020 <_init+0x20>

00000000004020f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>:
  4020f0:	ff 25 82 8f 00 00    	jmp    *0x8f82(%rip)        # 40b078 <_ZN2sf6StringC1EPKcRKSt6locale@Base>
  4020f6:	68 0c 00 00 00       	push   $0xc
  4020fb:	e9 20 ff ff ff       	jmp    402020 <_init+0x20>

0000000000402100 <_ZN2sf5ColorC1Ehhhh@plt>:
  402100:	ff 25 7a 8f 00 00    	jmp    *0x8f7a(%rip)        # 40b080 <_ZN2sf5ColorC1Ehhhh@Base>
  402106:	68 0d 00 00 00       	push   $0xd
  40210b:	e9 10 ff ff ff       	jmp    402020 <_init+0x20>

0000000000402110 <strlen@plt>:
  402110:	ff 25 72 8f 00 00    	jmp    *0x8f72(%rip)        # 40b088 <strlen@GLIBC_2.2.5>
  402116:	68 0e 00 00 00       	push   $0xe
  40211b:	e9 00 ff ff ff       	jmp    402020 <_init+0x20>

0000000000402120 <_ZN2sf13TransformableD2Ev@plt>:
  402120:	ff 25 6a 8f 00 00    	jmp    *0x8f6a(%rip)        # 40b090 <_ZN2sf13TransformableD2Ev@Base>
  402126:	68 0f 00 00 00       	push   $0xf
  40212b:	e9 f0 fe ff ff       	jmp    402020 <_init+0x20>

0000000000402130 <_ZN2sf13Transformable11setPositionEff@plt>:
  402130:	ff 25 62 8f 00 00    	jmp    *0x8f62(%rip)        # 40b098 <_ZN2sf13Transformable11setPositionEff@Base>
  402136:	68 10 00 00 00       	push   $0x10
  40213b:	e9 e0 fe ff ff       	jmp    402020 <_init+0x20>

0000000000402140 <_ZSt24__throw_invalid_argumentPKc@plt>:
  402140:	ff 25 5a 8f 00 00    	jmp    *0x8f5a(%rip)        # 40b0a0 <_ZSt24__throw_invalid_argumentPKc@GLIBCXX_3.4>
  402146:	68 11 00 00 00       	push   $0x11
  40214b:	e9 d0 fe ff ff       	jmp    402020 <_init+0x20>

0000000000402150 <_ZN2sf7secondsEf@plt>:
  402150:	ff 25 52 8f 00 00    	jmp    *0x8f52(%rip)        # 40b0a8 <_ZN2sf7secondsEf@Base>
  402156:	68 12 00 00 00       	push   $0x12
  40215b:	e9 c0 fe ff ff       	jmp    402020 <_init+0x20>

0000000000402160 <_ZNSo5flushEv@plt>:
  402160:	ff 25 4a 8f 00 00    	jmp    *0x8f4a(%rip)        # 40b0b0 <_ZNSo5flushEv@GLIBCXX_3.4>
  402166:	68 13 00 00 00       	push   $0x13
  40216b:	e9 b0 fe ff ff       	jmp    402020 <_init+0x20>

0000000000402170 <_ZSt19__throw_logic_errorPKc@plt>:
  402170:	ff 25 42 8f 00 00    	jmp    *0x8f42(%rip)        # 40b0b8 <_ZSt19__throw_logic_errorPKc@GLIBCXX_3.4>
  402176:	68 14 00 00 00       	push   $0x14
  40217b:	e9 a0 fe ff ff       	jmp    402020 <_init+0x20>

0000000000402180 <_ZN2sf12RenderTarget5clearERKNS_5ColorE@plt>:
  402180:	ff 25 3a 8f 00 00    	jmp    *0x8f3a(%rip)        # 40b0c0 <_ZN2sf12RenderTarget5clearERKNS_5ColorE@Base>
  402186:	68 15 00 00 00       	push   $0x15
  40218b:	e9 90 fe ff ff       	jmp    402020 <_init+0x20>

0000000000402190 <open@plt>:
  402190:	ff 25 32 8f 00 00    	jmp    *0x8f32(%rip)        # 40b0c8 <open@GLIBC_2.2.5>
  402196:	68 16 00 00 00       	push   $0x16
  40219b:	e9 80 fe ff ff       	jmp    402020 <_init+0x20>

00000000004021a0 <_ZN2sf9VideoModeC1Ejjj@plt>:
  4021a0:	ff 25 2a 8f 00 00    	jmp    *0x8f2a(%rip)        # 40b0d0 <_ZN2sf9VideoModeC1Ejjj@Base>
  4021a6:	68 17 00 00 00       	push   $0x17
  4021ab:	e9 70 fe ff ff       	jmp    402020 <_init+0x20>

00000000004021b0 <_ZN2sf6String6insertEmRKS0_@plt>:
  4021b0:	ff 25 22 8f 00 00    	jmp    *0x8f22(%rip)        # 40b0d8 <_ZN2sf6String6insertEmRKS0_@Base>
  4021b6:	68 18 00 00 00       	push   $0x18
  4021bb:	e9 60 fe ff ff       	jmp    402020 <_init+0x20>

00000000004021c0 <_ZN2sf11CircleShapeC1Efm@plt>:
  4021c0:	ff 25 1a 8f 00 00    	jmp    *0x8f1a(%rip)        # 40b0e0 <_ZN2sf11CircleShapeC1Efm@Base>
  4021c6:	68 19 00 00 00       	push   $0x19
  4021cb:	e9 50 fe ff ff       	jmp    402020 <_init+0x20>

00000000004021d0 <memcpy@plt>:
  4021d0:	ff 25 12 8f 00 00    	jmp    *0x8f12(%rip)        # 40b0e8 <memcpy@GLIBC_2.14>
  4021d6:	68 1a 00 00 00       	push   $0x1a
  4021db:	e9 40 fe ff ff       	jmp    402020 <_init+0x20>

00000000004021e0 <_ZN2sf6Window9pollEventERNS_5EventE@plt>:
  4021e0:	ff 25 0a 8f 00 00    	jmp    *0x8f0a(%rip)        # 40b0f0 <_ZN2sf6Window9pollEventERNS_5EventE@Base>
  4021e6:	68 1b 00 00 00       	push   $0x1b
  4021eb:	e9 30 fe ff ff       	jmp    402020 <_init+0x20>

00000000004021f0 <_ZN2sf4TextC1ERKNS_6StringERKNS_4FontEj@plt>:
  4021f0:	ff 25 02 8f 00 00    	jmp    *0x8f02(%rip)        # 40b0f8 <_ZN2sf4TextC1ERKNS_6StringERKNS_4FontEj@Base>
  4021f6:	68 1c 00 00 00       	push   $0x1c
  4021fb:	e9 20 fe ff ff       	jmp    402020 <_init+0x20>

0000000000402200 <__cxa_atexit@plt>:
  402200:	ff 25 fa 8e 00 00    	jmp    *0x8efa(%rip)        # 40b100 <__cxa_atexit@GLIBC_2.2.5>
  402206:	68 1d 00 00 00       	push   $0x1d
  40220b:	e9 10 fe ff ff       	jmp    402020 <_init+0x20>

0000000000402210 <_ZN2sf4Font12loadFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
  402210:	ff 25 f2 8e 00 00    	jmp    *0x8ef2(%rip)        # 40b108 <_ZN2sf4Font12loadFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@Base>
  402216:	68 1e 00 00 00       	push   $0x1e
  40221b:	e9 00 fe ff ff       	jmp    402020 <_init+0x20>

0000000000402220 <_ZdlPvm@plt>:
  402220:	ff 25 ea 8e 00 00    	jmp    *0x8eea(%rip)        # 40b110 <_ZdlPvm@CXXABI_1.3.9>
  402226:	68 1f 00 00 00       	push   $0x1f
  40222b:	e9 f0 fd ff ff       	jmp    402020 <_init+0x20>

0000000000402230 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@plt>:
  402230:	ff 25 e2 8e 00 00    	jmp    *0x8ee2(%rip)        # 40b118 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@GLIBCXX_3.4.21>
  402236:	68 20 00 00 00       	push   $0x20
  40223b:	e9 e0 fd ff ff       	jmp    402020 <_init+0x20>

0000000000402240 <_ZNK2sf6Window6isOpenEv@plt>:
  402240:	ff 25 da 8e 00 00    	jmp    *0x8eda(%rip)        # 40b120 <_ZNK2sf6Window6isOpenEv@Base>
  402246:	68 21 00 00 00       	push   $0x21
  40224b:	e9 d0 fd ff ff       	jmp    402020 <_init+0x20>

0000000000402250 <_ZN2sf4FontD1Ev@plt>:
  402250:	ff 25 d2 8e 00 00    	jmp    *0x8ed2(%rip)        # 40b128 <_ZN2sf4FontD1Ev@Base>
  402256:	68 22 00 00 00       	push   $0x22
  40225b:	e9 c0 fd ff ff       	jmp    402020 <_init+0x20>

0000000000402260 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>:
  402260:	ff 25 ca 8e 00 00    	jmp    *0x8eca(%rip)        # 40b130 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@GLIBCXX_3.4.9>
  402266:	68 23 00 00 00       	push   $0x23
  40226b:	e9 b0 fd ff ff       	jmp    402020 <_init+0x20>

0000000000402270 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>:
  402270:	ff 25 c2 8e 00 00    	jmp    *0x8ec2(%rip)        # 40b138 <_ZNKSt5ctypeIcE13_M_widen_initEv@GLIBCXX_3.4.11>
  402276:	68 24 00 00 00       	push   $0x24
  40227b:	e9 a0 fd ff ff       	jmp    402020 <_init+0x20>

0000000000402280 <_ZN2sf6StringixEm@plt>:
  402280:	ff 25 ba 8e 00 00    	jmp    *0x8eba(%rip)        # 40b140 <_ZN2sf6StringixEm@Base>
  402286:	68 25 00 00 00       	push   $0x25
  40228b:	e9 90 fd ff ff       	jmp    402020 <_init+0x20>

0000000000402290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@plt>:
  402290:	ff 25 b2 8e 00 00    	jmp    *0x8eb2(%rip)        # 40b148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@GLIBCXX_3.4.21>
  402296:	68 26 00 00 00       	push   $0x26
  40229b:	e9 80 fd ff ff       	jmp    402020 <_init+0x20>

00000000004022a0 <_ZN2sfgeENS_4TimeES0_@plt>:
  4022a0:	ff 25 aa 8e 00 00    	jmp    *0x8eaa(%rip)        # 40b150 <_ZN2sfgeENS_4TimeES0_@Base>
  4022a6:	68 27 00 00 00       	push   $0x27
  4022ab:	e9 70 fd ff ff       	jmp    402020 <_init+0x20>

00000000004022b0 <_ZN2sf6Window17setFramerateLimitEj@plt>:
  4022b0:	ff 25 a2 8e 00 00    	jmp    *0x8ea2(%rip)        # 40b158 <_ZN2sf6Window17setFramerateLimitEj@Base>
  4022b6:	68 28 00 00 00       	push   $0x28
  4022bb:	e9 60 fd ff ff       	jmp    402020 <_init+0x20>

00000000004022c0 <_ZSt16__throw_bad_castv@plt>:
  4022c0:	ff 25 9a 8e 00 00    	jmp    *0x8e9a(%rip)        # 40b160 <_ZSt16__throw_bad_castv@GLIBCXX_3.4>
  4022c6:	68 29 00 00 00       	push   $0x29
  4022cb:	e9 50 fd ff ff       	jmp    402020 <_init+0x20>

00000000004022d0 <_ZN2sf6Window7displayEv@plt>:
  4022d0:	ff 25 92 8e 00 00    	jmp    *0x8e92(%rip)        # 40b168 <_ZN2sf6Window7displayEv@Base>
  4022d6:	68 2a 00 00 00       	push   $0x2a
  4022db:	e9 40 fd ff ff       	jmp    402020 <_init+0x20>

00000000004022e0 <_ZN2sf5ClockC1Ev@plt>:
  4022e0:	ff 25 8a 8e 00 00    	jmp    *0x8e8a(%rip)        # 40b170 <_ZN2sf5ClockC1Ev@Base>
  4022e6:	68 2b 00 00 00       	push   $0x2b
  4022eb:	e9 30 fd ff ff       	jmp    402020 <_init+0x20>

00000000004022f0 <ioctl@plt>:
  4022f0:	ff 25 82 8e 00 00    	jmp    *0x8e82(%rip)        # 40b178 <ioctl@GLIBC_2.2.5>
  4022f6:	68 2c 00 00 00       	push   $0x2c
  4022fb:	e9 20 fd ff ff       	jmp    402020 <_init+0x20>

0000000000402300 <_ZNSt6localeD1Ev@plt>:
  402300:	ff 25 7a 8e 00 00    	jmp    *0x8e7a(%rip)        # 40b180 <_ZNSt6localeD1Ev@GLIBCXX_3.4>
  402306:	68 2d 00 00 00       	push   $0x2d
  40230b:	e9 10 fd ff ff       	jmp    402020 <_init+0x20>

0000000000402310 <fprintf@plt>:
  402310:	ff 25 72 8e 00 00    	jmp    *0x8e72(%rip)        # 40b188 <fprintf@GLIBC_2.2.5>
  402316:	68 2e 00 00 00       	push   $0x2e
  40231b:	e9 00 fd ff ff       	jmp    402020 <_init+0x20>

0000000000402320 <read@plt>:
  402320:	ff 25 6a 8e 00 00    	jmp    *0x8e6a(%rip)        # 40b190 <read@GLIBC_2.2.5>
  402326:	68 2f 00 00 00       	push   $0x2f
  40232b:	e9 f0 fc ff ff       	jmp    402020 <_init+0x20>

0000000000402330 <_ZN2sf5MusicD1Ev@plt>:
  402330:	ff 25 62 8e 00 00    	jmp    *0x8e62(%rip)        # 40b198 <_ZN2sf5MusicD1Ev@Base>
  402336:	68 30 00 00 00       	push   $0x30
  40233b:	e9 e0 fc ff ff       	jmp    402020 <_init+0x20>

0000000000402340 <_ZN2sf12RenderWindowC1ENS_9VideoModeERKNS_6StringEjRKNS_15ContextSettingsE@plt>:
  402340:	ff 25 5a 8e 00 00    	jmp    *0x8e5a(%rip)        # 40b1a0 <_ZN2sf12RenderWindowC1ENS_9VideoModeERKNS_6StringEjRKNS_15ContextSettingsE@Base>
  402346:	68 31 00 00 00       	push   $0x31
  40234b:	e9 d0 fc ff ff       	jmp    402020 <_init+0x20>

0000000000402350 <_ZSt24__throw_out_of_range_fmtPKcz@plt>:
  402350:	ff 25 52 8e 00 00    	jmp    *0x8e52(%rip)        # 40b1a8 <_ZSt24__throw_out_of_range_fmtPKcz@GLIBCXX_3.4.20>
  402356:	68 32 00 00 00       	push   $0x32
  40235b:	e9 c0 fc ff ff       	jmp    402020 <_init+0x20>

0000000000402360 <_ZNK2sf6String7getSizeEv@plt>:
  402360:	ff 25 4a 8e 00 00    	jmp    *0x8e4a(%rip)        # 40b1b0 <_ZNK2sf6String7getSizeEv@Base>
  402366:	68 33 00 00 00       	push   $0x33
  40236b:	e9 b0 fc ff ff       	jmp    402020 <_init+0x20>

0000000000402370 <_ZNSt8ios_base4InitC1Ev@plt>:
  402370:	ff 25 42 8e 00 00    	jmp    *0x8e42(%rip)        # 40b1b8 <_ZNSt8ios_base4InitC1Ev@GLIBCXX_3.4>
  402376:	68 34 00 00 00       	push   $0x34
  40237b:	e9 a0 fc ff ff       	jmp    402020 <_init+0x20>

0000000000402380 <puts@plt>:
  402380:	ff 25 3a 8e 00 00    	jmp    *0x8e3a(%rip)        # 40b1c0 <puts@GLIBC_2.2.5>
  402386:	68 35 00 00 00       	push   $0x35
  40238b:	e9 90 fc ff ff       	jmp    402020 <_init+0x20>

0000000000402390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>:
  402390:	ff 25 32 8e 00 00    	jmp    *0x8e32(%rip)        # 40b1c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@GLIBCXX_3.4.21>
  402396:	68 36 00 00 00       	push   $0x36
  40239b:	e9 80 fc ff ff       	jmp    402020 <_init+0x20>

00000000004023a0 <_ZNK2sf5Clock14getElapsedTimeEv@plt>:
  4023a0:	ff 25 2a 8e 00 00    	jmp    *0x8e2a(%rip)        # 40b1d0 <_ZNK2sf5Clock14getElapsedTimeEv@Base>
  4023a6:	68 37 00 00 00       	push   $0x37
  4023ab:	e9 70 fc ff ff       	jmp    402020 <_init+0x20>

00000000004023b0 <_ZNK2sf4Text9getStringEv@plt>:
  4023b0:	ff 25 22 8e 00 00    	jmp    *0x8e22(%rip)        # 40b1d8 <_ZNK2sf4Text9getStringEv@Base>
  4023b6:	68 38 00 00 00       	push   $0x38
  4023bb:	e9 60 fc ff ff       	jmp    402020 <_init+0x20>

00000000004023c0 <_ZN2sfpLERNS_4TimeES0_@plt>:
  4023c0:	ff 25 1a 8e 00 00    	jmp    *0x8e1a(%rip)        # 40b1e0 <_ZN2sfpLERNS_4TimeES0_@Base>
  4023c6:	68 39 00 00 00       	push   $0x39
  4023cb:	e9 50 fc ff ff       	jmp    402020 <_init+0x20>

00000000004023d0 <_ZN2sf5Clock7restartEv@plt>:
  4023d0:	ff 25 12 8e 00 00    	jmp    *0x8e12(%rip)        # 40b1e8 <_ZN2sf5Clock7restartEv@Base>
  4023d6:	68 3a 00 00 00       	push   $0x3a
  4023db:	e9 40 fc ff ff       	jmp    402020 <_init+0x20>

00000000004023e0 <_ZN2sf11SoundStream4playEv@plt>:
  4023e0:	ff 25 0a 8e 00 00    	jmp    *0x8e0a(%rip)        # 40b1f0 <_ZN2sf11SoundStream4playEv@Base>
  4023e6:	68 3b 00 00 00       	push   $0x3b
  4023eb:	e9 30 fc ff ff       	jmp    402020 <_init+0x20>

00000000004023f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>:
  4023f0:	ff 25 02 8e 00 00    	jmp    *0x8e02(%rip)        # 40b1f8 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@Base>
  4023f6:	68 3c 00 00 00       	push   $0x3c
  4023fb:	e9 20 fc ff ff       	jmp    402020 <_init+0x20>

0000000000402400 <_ZN2sfmIERNS_4TimeES0_@plt>:
  402400:	ff 25 fa 8d 00 00    	jmp    *0x8dfa(%rip)        # 40b200 <_ZN2sfmIERNS_4TimeES0_@Base>
  402406:	68 3d 00 00 00       	push   $0x3d
  40240b:	e9 10 fc ff ff       	jmp    402020 <_init+0x20>

0000000000402410 <__gxx_personality_v0@plt>:
  402410:	ff 25 f2 8d 00 00    	jmp    *0x8df2(%rip)        # 40b208 <__gxx_personality_v0@CXXABI_1.3>
  402416:	68 3e 00 00 00       	push   $0x3e
  40241b:	e9 00 fc ff ff       	jmp    402020 <_init+0x20>

0000000000402420 <_ZN2sf6StringaSERKS0_@plt>:
  402420:	ff 25 ea 8d 00 00    	jmp    *0x8dea(%rip)        # 40b210 <_ZN2sf6StringaSERKS0_@Base>
  402426:	68 3f 00 00 00       	push   $0x3f
  40242b:	e9 f0 fb ff ff       	jmp    402020 <_init+0x20>

0000000000402430 <_ZNK2sf4Time9asSecondsEv@plt>:
  402430:	ff 25 e2 8d 00 00    	jmp    *0x8de2(%rip)        # 40b218 <_ZNK2sf4Time9asSecondsEv@Base>
  402436:	68 40 00 00 00       	push   $0x40
  40243b:	e9 e0 fb ff ff       	jmp    402020 <_init+0x20>

0000000000402440 <_ZN2sf12RenderWindowD1Ev@plt>:
  402440:	ff 25 da 8d 00 00    	jmp    *0x8dda(%rip)        # 40b220 <_ZN2sf12RenderWindowD1Ev@Base>
  402446:	68 41 00 00 00       	push   $0x41
  40244b:	e9 d0 fb ff ff       	jmp    402020 <_init+0x20>

0000000000402450 <_ZNK2sf6String12toAnsiStringB5cxx11ERKSt6locale@plt>:
  402450:	ff 25 d2 8d 00 00    	jmp    *0x8dd2(%rip)        # 40b228 <_ZNK2sf6String12toAnsiStringB5cxx11ERKSt6locale@Base>
  402456:	68 42 00 00 00       	push   $0x42
  40245b:	e9 c0 fb ff ff       	jmp    402020 <_init+0x20>

0000000000402460 <_ZN2sf4Text9setStringERKNS_6StringE@plt>:
  402460:	ff 25 ca 8d 00 00    	jmp    *0x8dca(%rip)        # 40b230 <_ZN2sf4Text9setStringERKNS_6StringE@Base>
  402466:	68 43 00 00 00       	push   $0x43
  40246b:	e9 b0 fb ff ff       	jmp    402020 <_init+0x20>

0000000000402470 <_Unwind_Resume@plt>:
  402470:	ff 25 c2 8d 00 00    	jmp    *0x8dc2(%rip)        # 40b238 <_Unwind_Resume@GCC_3.0>
  402476:	68 44 00 00 00       	push   $0x44
  40247b:	e9 a0 fb ff ff       	jmp    402020 <_init+0x20>

0000000000402480 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>:
  402480:	ff 25 ba 8d 00 00    	jmp    *0x8dba(%rip)        # 40b240 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@GLIBCXX_3.4.21>
  402486:	68 45 00 00 00       	push   $0x45
  40248b:	e9 90 fb ff ff       	jmp    402020 <_init+0x20>

0000000000402490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>:
  402490:	ff 25 b2 8d 00 00    	jmp    *0x8db2(%rip)        # 40b248 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@Base>
  402496:	68 46 00 00 00       	push   $0x46
  40249b:	e9 80 fb ff ff       	jmp    402020 <_init+0x20>

00000000004024a0 <_ZN2sf4Text12setFillColorERKNS_5ColorE@plt>:
  4024a0:	ff 25 aa 8d 00 00    	jmp    *0x8daa(%rip)        # 40b250 <_ZN2sf4Text12setFillColorERKNS_5ColorE@Base>
  4024a6:	68 47 00 00 00       	push   $0x47
  4024ab:	e9 70 fb ff ff       	jmp    402020 <_init+0x20>

00000000004024b0 <_ZN2sf6Window5closeEv@plt>:
  4024b0:	ff 25 a2 8d 00 00    	jmp    *0x8da2(%rip)        # 40b258 <_ZN2sf6Window5closeEv@Base>
  4024b6:	68 48 00 00 00       	push   $0x48
  4024bb:	e9 60 fb ff ff       	jmp    402020 <_init+0x20>

00000000004024c0 <_ZNSt6localeC1Ev@plt>:
  4024c0:	ff 25 9a 8d 00 00    	jmp    *0x8d9a(%rip)        # 40b260 <_ZNSt6localeC1Ev@GLIBCXX_3.4>
  4024c6:	68 49 00 00 00       	push   $0x49
  4024cb:	e9 50 fb ff ff       	jmp    402020 <_init+0x20>

00000000004024d0 <_ZNSt8ios_base4InitD1Ev@plt>:
  4024d0:	ff 25 92 8d 00 00    	jmp    *0x8d92(%rip)        # 40b268 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
  4024d6:	68 4a 00 00 00       	push   $0x4a
  4024db:	e9 40 fb ff ff       	jmp    402020 <_init+0x20>

Desmontagem da secção .text:

00000000004024e0 <_Z17char_to_stringbitB5cxx11c.cold>:
      _M_length(size_type __length)
      { _M_string_length = __length; }

      pointer
      _M_data() const
      { return _M_dataplus._M_p; }
  4024e0:	49 8b 3c 24          	mov    (%r12),%rdi
      _M_create(size_type&, size_type);

      void
      _M_dispose()
      {
	if (!_M_is_local())
  4024e4:	48 39 fb             	cmp    %rdi,%rbx
  4024e7:	74 0e                	je     4024f7 <_Z17char_to_stringbitB5cxx11c.cold+0x17>
	  _M_destroy(_M_allocated_capacity);
      }

      void
      _M_destroy(size_type __size) throw()
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4024e9:	49 8b 74 24 10       	mov    0x10(%r12),%rsi
  4024ee:	48 83 c6 01          	add    $0x1,%rsi
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
  4024f2:	e8 29 fd ff ff       	call   402220 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  4024f7:	48 89 ef             	mov    %rbp,%rdi
  4024fa:	e8 71 ff ff ff       	call   402470 <_Unwind_Resume@plt>

00000000004024ff <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold>:
      { return _M_dataplus._M_p; }
  4024ff:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  402504:	4c 39 e7             	cmp    %r12,%rdi
  402507:	74 0e                	je     402517 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x18>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402509:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  40250e:	48 8d 70 01          	lea    0x1(%rax),%rsi
	::operator delete(__p
  402512:	e8 09 fd ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  402517:	48 8b 3c 24          	mov    (%rsp),%rdi
	if (!_M_is_local())
  40251b:	48 39 df             	cmp    %rbx,%rdi
  40251e:	74 0e                	je     40252e <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x2f>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402520:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  402525:	48 8d 70 01          	lea    0x1(%rax),%rsi
  402529:	e8 f2 fc ff ff       	call   402220 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  40252e:	48 89 ef             	mov    %rbp,%rdi
  402531:	e8 3a ff ff ff       	call   402470 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
  402536:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  40253b:	4c 39 e7             	cmp    %r12,%rdi
  40253e:	74 d7                	je     402517 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x18>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402540:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  402545:	48 8d 70 01          	lea    0x1(%rax),%rsi
	::operator delete(__p
  402549:	e8 d2 fc ff ff       	call   402220 <_ZdlPvm@plt>
  40254e:	eb c7                	jmp    402517 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x18>
      { return _M_dataplus._M_p; }
  402550:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  402555:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  40255a:	48 39 c7             	cmp    %rax,%rdi
  40255d:	74 b8                	je     402517 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x18>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  40255f:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  402564:	48 8d 70 01          	lea    0x1(%rax),%rsi
  402568:	e8 b3 fc ff ff       	call   402220 <_ZdlPvm@plt>
  40256d:	eb a8                	jmp    402517 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x18>
      { return _M_dataplus._M_p; }
  40256f:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  402574:	4c 39 e7             	cmp    %r12,%rdi
  402577:	74 9e                	je     402517 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x18>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402579:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  40257e:	48 8d 70 01          	lea    0x1(%rax),%rsi
  402582:	e8 99 fc ff ff       	call   402220 <_ZdlPvm@plt>
  402587:	eb 8e                	jmp    402517 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x18>

0000000000402589 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_.cold>:
      { return _M_dataplus._M_p; }
  402589:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  40258e:	4c 39 f7             	cmp    %r14,%rdi
  402591:	74 0e                	je     4025a1 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_.cold+0x18>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402593:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  402598:	48 8d 70 01          	lea    0x1(%rax),%rsi
  40259c:	e8 7f fc ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  4025a1:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
	if (!_M_is_local())
  4025a6:	48 39 ef             	cmp    %rbp,%rdi
  4025a9:	74 0e                	je     4025b9 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_.cold+0x30>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4025ab:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  4025b0:	48 8d 70 01          	lea    0x1(%rax),%rsi
  4025b4:	e8 67 fc ff ff       	call   402220 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  4025b9:	4c 89 e7             	mov    %r12,%rdi
  4025bc:	e8 af fe ff ff       	call   402470 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
  4025c1:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  4025c6:	4c 39 f7             	cmp    %r14,%rdi
  4025c9:	74 0e                	je     4025d9 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_.cold+0x50>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4025cb:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  4025d0:	48 8d 70 01          	lea    0x1(%rax),%rsi
	::operator delete(__p
  4025d4:	e8 47 fc ff ff       	call   402220 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  4025d9:	48 89 ef             	mov    %rbp,%rdi
  4025dc:	e8 8f fe ff ff       	call   402470 <_Unwind_Resume@plt>

00000000004025e1 <main.cold>:
      { return _M_dataplus._M_p; }
  4025e1:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  4025e8:	48 3b bd 20 e0 ff ff 	cmp    -0x1fe0(%rbp),%rdi
  4025ef:	74 14                	je     402605 <main.cold+0x24>
	::operator delete(__p
  4025f1:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  4025f8:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4025ff:	00 
  402600:	e8 1b fc ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  402605:	48 8b bd a0 e1 ff ff 	mov    -0x1e60(%rbp),%rdi
	if (!_M_is_local())
  40260c:	48 3b bd 28 e0 ff ff 	cmp    -0x1fd8(%rbp),%rdi
  402613:	74 10                	je     402625 <main.cold+0x44>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402615:	48 8b 85 b0 e1 ff ff 	mov    -0x1e50(%rbp),%rax
  40261c:	48 8d 70 01          	lea    0x1(%rax),%rsi
  402620:	e8 fb fb ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  402625:	48 8b bd 80 e1 ff ff 	mov    -0x1e80(%rbp),%rdi
	if (!_M_is_local())
  40262c:	48 8d 85 90 e1 ff ff 	lea    -0x1e70(%rbp),%rax
  402633:	48 39 c7             	cmp    %rax,%rdi
  402636:	74 10                	je     402648 <main.cold+0x67>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402638:	48 8b 85 90 e1 ff ff 	mov    -0x1e70(%rbp),%rax
  40263f:	48 8d 70 01          	lea    0x1(%rax),%rsi
  402643:	e8 d8 fb ff ff       	call   402220 <_ZdlPvm@plt>
				{
					elapsedtime_text -= sf::seconds(.1f);
					if (typedtext.getSize() > 0)
					{
						text.setString(text.getString() + typedtext[0]);
						typedtext = typedtext.toAnsiString().substr(1);
  402648:	4c 89 ef             	mov    %r13,%rdi
  40264b:	e8 b0 fc ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
  402650:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
  402657:	e8 a4 fc ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
      { return _M_dataplus._M_p; }
  40265c:	48 8b bd 60 e1 ff ff 	mov    -0x1ea0(%rbp),%rdi
	if (!_M_is_local())
  402663:	48 8d 85 70 e1 ff ff 	lea    -0x1e90(%rbp),%rax
  40266a:	48 39 c7             	cmp    %rax,%rdi
  40266d:	74 10                	je     40267f <main.cold+0x9e>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  40266f:	48 8b 85 70 e1 ff ff 	mov    -0x1e90(%rbp),%rax
  402676:	48 8d 70 01          	lea    0x1(%rax),%rsi
  40267a:	e8 a1 fb ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  40267f:	48 8b bd 40 e1 ff ff 	mov    -0x1ec0(%rbp),%rdi
	if (!_M_is_local())
  402686:	48 8d 85 50 e1 ff ff 	lea    -0x1eb0(%rbp),%rax
  40268d:	48 39 c7             	cmp    %rax,%rdi
  402690:	74 10                	je     4026a2 <main.cold+0xc1>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402692:	48 8b 85 50 e1 ff ff 	mov    -0x1eb0(%rbp),%rax
  402699:	48 8d 70 01          	lea    0x1(%rax),%rsi
  40269d:	e8 7e fb ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  4026a2:	48 8b bd 20 e1 ff ff 	mov    -0x1ee0(%rbp),%rdi
	if (!_M_is_local())
  4026a9:	48 8d 85 30 e1 ff ff 	lea    -0x1ed0(%rbp),%rax
  4026b0:	48 39 c7             	cmp    %rax,%rdi
  4026b3:	74 14                	je     4026c9 <main.cold+0xe8>
  4026b5:	48 8b 85 30 e1 ff ff 	mov    -0x1ed0(%rbp),%rax
  4026bc:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4026c3:	00 
  4026c4:	e8 57 fb ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  4026c9:	48 8b bd 00 e1 ff ff 	mov    -0x1f00(%rbp),%rdi
	if (!_M_is_local())
  4026d0:	48 8d 85 10 e1 ff ff 	lea    -0x1ef0(%rbp),%rax
  4026d7:	48 39 c7             	cmp    %rax,%rdi
  4026da:	0f 85 a8 02 00 00    	jne    402988 <main.cold+0x3a7>
	}

	

	//close(fd);
}
  4026e0:	48 8d bd c0 e2 ff ff 	lea    -0x1d40(%rbp),%rdi
  4026e7:	e8 44 fc ff ff       	call   402330 <_ZN2sf5MusicD1Ev@plt>
  4026ec:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  4026f3:	e8 c8 4b 00 00       	call   4072c0 <_ZN2sf4TextD1Ev>
  4026f8:	48 8d bd 30 e2 ff ff 	lea    -0x1dd0(%rbp),%rdi
  4026ff:	e8 4c fb ff ff       	call   402250 <_ZN2sf4FontD1Ev@plt>
{
////////////////////////////////////////////////////////////
/// \brief Specialized shape representing a circle
///
////////////////////////////////////////////////////////////
class SFML_GRAPHICS_API CircleShape : public Shape
  402704:	41 bc f0 ac 40 00    	mov    $0x40acf0,%r12d
  40270a:	48 8d bd f0 fa ff ff 	lea    -0x510(%rbp),%rdi
  402711:	48 c7 85 30 e0 ff ff 	movq   $0x40ad28,-0x1fd0(%rbp)
  402718:	28 ad 40 00 
  40271c:	66 49 0f 6e c4       	movq   %r12,%xmm0
  402721:	0f 16 85 30 e0 ff ff 	movhps -0x1fd0(%rbp),%xmm0
  402728:	0f 29 85 f0 fa ff ff 	movaps %xmm0,-0x510(%rbp)
  40272f:	e8 2c f9 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  402734:	66 49 0f 6e c4       	movq   %r12,%xmm0
  402739:	48 8d bd 90 f9 ff ff 	lea    -0x670(%rbp),%rdi
  402740:	0f 16 85 30 e0 ff ff 	movhps -0x1fd0(%rbp),%xmm0
  402747:	0f 29 85 90 f9 ff ff 	movaps %xmm0,-0x670(%rbp)
  40274e:	e8 0d f9 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  402753:	66 49 0f 6e c4       	movq   %r12,%xmm0
  402758:	48 8d bd 30 f8 ff ff 	lea    -0x7d0(%rbp),%rdi
  40275f:	0f 16 85 30 e0 ff ff 	movhps -0x1fd0(%rbp),%xmm0
  402766:	0f 29 85 30 f8 ff ff 	movaps %xmm0,-0x7d0(%rbp)
  40276d:	e8 ee f8 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  402772:	66 49 0f 6e c4       	movq   %r12,%xmm0
  402777:	48 8d bd d0 f6 ff ff 	lea    -0x930(%rbp),%rdi
  40277e:	0f 16 85 30 e0 ff ff 	movhps -0x1fd0(%rbp),%xmm0
  402785:	0f 29 85 d0 f6 ff ff 	movaps %xmm0,-0x930(%rbp)
  40278c:	e8 cf f8 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  402791:	66 49 0f 6e c4       	movq   %r12,%xmm0
  402796:	48 8d bd 70 f5 ff ff 	lea    -0xa90(%rbp),%rdi
  40279d:	0f 16 85 30 e0 ff ff 	movhps -0x1fd0(%rbp),%xmm0
  4027a4:	0f 29 85 70 f5 ff ff 	movaps %xmm0,-0xa90(%rbp)
  4027ab:	e8 b0 f8 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  4027b0:	66 49 0f 6e c4       	movq   %r12,%xmm0
  4027b5:	48 8d bd 10 f4 ff ff 	lea    -0xbf0(%rbp),%rdi
  4027bc:	0f 16 85 30 e0 ff ff 	movhps -0x1fd0(%rbp),%xmm0
  4027c3:	0f 29 85 10 f4 ff ff 	movaps %xmm0,-0xbf0(%rbp)
  4027ca:	e8 91 f8 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  4027cf:	66 49 0f 6e c4       	movq   %r12,%xmm0
  4027d4:	48 8d bd b0 f2 ff ff 	lea    -0xd50(%rbp),%rdi
  4027db:	0f 16 85 30 e0 ff ff 	movhps -0x1fd0(%rbp),%xmm0
  4027e2:	0f 29 85 b0 f2 ff ff 	movaps %xmm0,-0xd50(%rbp)
  4027e9:	e8 72 f8 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  4027ee:	66 49 0f 6e c4       	movq   %r12,%xmm0
  4027f3:	48 8d bd 50 f1 ff ff 	lea    -0xeb0(%rbp),%rdi
  4027fa:	0f 16 85 30 e0 ff ff 	movhps -0x1fd0(%rbp),%xmm0
  402801:	0f 29 85 50 f1 ff ff 	movaps %xmm0,-0xeb0(%rbp)
  402808:	e8 53 f8 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  40280d:	66 49 0f 6e c4       	movq   %r12,%xmm0
  402812:	48 8d bd f0 ef ff ff 	lea    -0x1010(%rbp),%rdi
  402819:	0f 16 85 30 e0 ff ff 	movhps -0x1fd0(%rbp),%xmm0
  402820:	0f 29 85 f0 ef ff ff 	movaps %xmm0,-0x1010(%rbp)
  402827:	e8 34 f8 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  40282c:	66 49 0f 6e c4       	movq   %r12,%xmm0
  402831:	48 8d bd 90 ee ff ff 	lea    -0x1170(%rbp),%rdi
  402838:	0f 16 85 30 e0 ff ff 	movhps -0x1fd0(%rbp),%xmm0
  40283f:	0f 29 85 90 ee ff ff 	movaps %xmm0,-0x1170(%rbp)
  402846:	e8 15 f8 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  40284b:	66 49 0f 6e c4       	movq   %r12,%xmm0
  402850:	48 8d bd 30 ed ff ff 	lea    -0x12d0(%rbp),%rdi
  402857:	0f 16 85 30 e0 ff ff 	movhps -0x1fd0(%rbp),%xmm0
  40285e:	0f 29 85 30 ed ff ff 	movaps %xmm0,-0x12d0(%rbp)
  402865:	e8 f6 f7 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  40286a:	66 49 0f 6e c4       	movq   %r12,%xmm0
  40286f:	48 8d bd d0 eb ff ff 	lea    -0x1430(%rbp),%rdi
  402876:	0f 16 85 30 e0 ff ff 	movhps -0x1fd0(%rbp),%xmm0
  40287d:	0f 29 85 d0 eb ff ff 	movaps %xmm0,-0x1430(%rbp)
  402884:	e8 d7 f7 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  402889:	66 49 0f 6e c4       	movq   %r12,%xmm0
  40288e:	48 8d bd 70 ea ff ff 	lea    -0x1590(%rbp),%rdi
  402895:	0f 16 85 30 e0 ff ff 	movhps -0x1fd0(%rbp),%xmm0
  40289c:	0f 29 85 70 ea ff ff 	movaps %xmm0,-0x1590(%rbp)
  4028a3:	e8 b8 f7 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  4028a8:	66 49 0f 6e c4       	movq   %r12,%xmm0
  4028ad:	48 8d bd 10 e9 ff ff 	lea    -0x16f0(%rbp),%rdi
  4028b4:	0f 16 85 30 e0 ff ff 	movhps -0x1fd0(%rbp),%xmm0
  4028bb:	0f 29 85 10 e9 ff ff 	movaps %xmm0,-0x16f0(%rbp)
  4028c2:	e8 99 f7 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  4028c7:	66 49 0f 6e c4       	movq   %r12,%xmm0
  4028cc:	48 8d bd b0 e7 ff ff 	lea    -0x1850(%rbp),%rdi
  4028d3:	0f 16 85 30 e0 ff ff 	movhps -0x1fd0(%rbp),%xmm0
  4028da:	0f 29 85 b0 e7 ff ff 	movaps %xmm0,-0x1850(%rbp)
  4028e1:	e8 7a f7 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  4028e6:	66 49 0f 6e c4       	movq   %r12,%xmm0
  4028eb:	48 8d bd 50 e6 ff ff 	lea    -0x19b0(%rbp),%rdi
  4028f2:	0f 16 85 30 e0 ff ff 	movhps -0x1fd0(%rbp),%xmm0
  4028f9:	0f 29 85 50 e6 ff ff 	movaps %xmm0,-0x19b0(%rbp)
  402900:	e8 5b f7 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  402905:	66 49 0f 6e c4       	movq   %r12,%xmm0
  40290a:	48 8d bd f0 e4 ff ff 	lea    -0x1b10(%rbp),%rdi
  402911:	0f 16 85 30 e0 ff ff 	movhps -0x1fd0(%rbp),%xmm0
  402918:	0f 29 85 f0 e4 ff ff 	movaps %xmm0,-0x1b10(%rbp)
  40291f:	e8 3c f7 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  402924:	66 49 0f 6e c4       	movq   %r12,%xmm0
  402929:	48 8d bd 90 e3 ff ff 	lea    -0x1c70(%rbp),%rdi
  402930:	0f 16 85 30 e0 ff ff 	movhps -0x1fd0(%rbp),%xmm0
  402937:	0f 29 85 90 e3 ff ff 	movaps %xmm0,-0x1c70(%rbp)
  40293e:	e8 1d f7 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  402943:	48 8d bd c0 fd ff ff 	lea    -0x240(%rbp),%rdi
  40294a:	e8 f1 fa ff ff       	call   402440 <_ZN2sf12RenderWindowD1Ev@plt>
  40294f:	48 89 df             	mov    %rbx,%rdi
  402952:	e8 19 fb ff ff       	call   402470 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
  402957:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  40295e:	48 3b bd 20 e0 ff ff 	cmp    -0x1fe0(%rbp),%rdi
  402965:	74 14                	je     40297b <main.cold+0x39a>
  402967:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  40296e:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  402975:	00 
  402976:	e8 a5 f8 ff ff       	call   402220 <_ZdlPvm@plt>
					typedtext.insert(0, "[root@mbois ~] $ Tem alguma coisa piscando\n\n [root@mbois ~] $ voce deveria prestar atencao");
  40297b:	4c 89 f7             	mov    %r14,%rdi
  40297e:	e8 7d f9 ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
  402983:	e9 d4 fc ff ff       	jmp    40265c <main.cold+0x7b>
  402988:	48 8b 85 10 e1 ff ff 	mov    -0x1ef0(%rbp),%rax
  40298f:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  402996:	00 
  402997:	e8 84 f8 ff ff       	call   402220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  40299c:	e9 3f fd ff ff       	jmp    4026e0 <main.cold+0xff>
      { return _M_dataplus._M_p; }
  4029a1:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  4029a8:	48 3b bd 20 e0 ff ff 	cmp    -0x1fe0(%rbp),%rdi
  4029af:	74 ca                	je     40297b <main.cold+0x39a>
  4029b1:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  4029b8:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4029bf:	00 
  4029c0:	e8 5b f8 ff ff       	call   402220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4029c5:	eb b4                	jmp    40297b <main.cold+0x39a>
      { return _M_dataplus._M_p; }
  4029c7:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  4029ce:	48 8d 85 d0 e1 ff ff 	lea    -0x1e30(%rbp),%rax
  4029d5:	48 39 c7             	cmp    %rax,%rdi
  4029d8:	74 a1                	je     40297b <main.cold+0x39a>
  4029da:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  4029e1:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4029e8:	00 
  4029e9:	e8 32 f8 ff ff       	call   402220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4029ee:	eb 8b                	jmp    40297b <main.cold+0x39a>
      { return _M_dataplus._M_p; }
  4029f0:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  4029f7:	48 3b bd 20 e0 ff ff 	cmp    -0x1fe0(%rbp),%rdi
  4029fe:	74 14                	je     402a14 <main.cold+0x433>
  402a00:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  402a07:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  402a0e:	00 
  402a0f:	e8 0c f8 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  402a14:	48 8b bd a0 e1 ff ff 	mov    -0x1e60(%rbp),%rdi
	if (!_M_is_local())
  402a1b:	48 3b bd 28 e0 ff ff 	cmp    -0x1fd8(%rbp),%rdi
  402a22:	74 10                	je     402a34 <main.cold+0x453>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402a24:	48 8b 85 b0 e1 ff ff 	mov    -0x1e50(%rbp),%rax
  402a2b:	48 8d 70 01          	lea    0x1(%rax),%rsi
  402a2f:	e8 ec f7 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  402a34:	48 8b bd 80 e1 ff ff 	mov    -0x1e80(%rbp),%rdi
	if (!_M_is_local())
  402a3b:	48 8d 85 90 e1 ff ff 	lea    -0x1e70(%rbp),%rax
  402a42:	48 39 c7             	cmp    %rax,%rdi
  402a45:	0f 84 fd fb ff ff    	je     402648 <main.cold+0x67>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402a4b:	48 8b 85 90 e1 ff ff 	mov    -0x1e70(%rbp),%rax
  402a52:	48 8d 70 01          	lea    0x1(%rax),%rsi
  402a56:	e8 c5 f7 ff ff       	call   402220 <_ZdlPvm@plt>
  402a5b:	e9 e8 fb ff ff       	jmp    402648 <main.cold+0x67>
      { return _M_dataplus._M_p; }
  402a60:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  402a67:	48 8d 85 d0 e1 ff ff 	lea    -0x1e30(%rbp),%rax
  402a6e:	48 39 c7             	cmp    %rax,%rdi
  402a71:	0f 84 04 ff ff ff    	je     40297b <main.cold+0x39a>
  402a77:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  402a7e:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  402a85:	00 
  402a86:	e8 95 f7 ff ff       	call   402220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402a8b:	e9 eb fe ff ff       	jmp    40297b <main.cold+0x39a>
      { return _M_dataplus._M_p; }
  402a90:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  402a97:	48 3b bd 20 e0 ff ff 	cmp    -0x1fe0(%rbp),%rdi
  402a9e:	0f 84 ac fb ff ff    	je     402650 <main.cold+0x6f>
  402aa4:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  402aab:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  402ab2:	00 
  402ab3:	e8 68 f7 ff ff       	call   402220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402ab8:	e9 93 fb ff ff       	jmp    402650 <main.cold+0x6f>
      { return _M_dataplus._M_p; }
  402abd:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  402ac4:	48 8d 85 d0 e1 ff ff 	lea    -0x1e30(%rbp),%rax
  402acb:	48 39 c7             	cmp    %rax,%rdi
  402ace:	0f 84 7c fb ff ff    	je     402650 <main.cold+0x6f>
  402ad4:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  402adb:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  402ae2:	00 
  402ae3:	e8 38 f7 ff ff       	call   402220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402ae8:	e9 63 fb ff ff       	jmp    402650 <main.cold+0x6f>
      { return _M_dataplus._M_p; }
  402aed:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  402af4:	48 8d 85 d0 e1 ff ff 	lea    -0x1e30(%rbp),%rax
  402afb:	48 39 c7             	cmp    %rax,%rdi
  402afe:	74 14                	je     402b14 <main.cold+0x533>
  402b00:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  402b07:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  402b0e:	00 
  402b0f:	e8 0c f7 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  402b14:	48 8b bd a0 e1 ff ff 	mov    -0x1e60(%rbp),%rdi
	if (!_M_is_local())
  402b1b:	48 8d 85 b0 e1 ff ff 	lea    -0x1e50(%rbp),%rax
  402b22:	48 39 c7             	cmp    %rax,%rdi
  402b25:	0f 84 31 fb ff ff    	je     40265c <main.cold+0x7b>
  402b2b:	48 8b 85 b0 e1 ff ff 	mov    -0x1e50(%rbp),%rax
  402b32:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  402b39:	00 
  402b3a:	e8 e1 f6 ff ff       	call   402220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402b3f:	e9 18 fb ff ff       	jmp    40265c <main.cold+0x7b>
      { return _M_dataplus._M_p; }
  402b44:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  402b4b:	48 8d 85 d0 e1 ff ff 	lea    -0x1e30(%rbp),%rax
  402b52:	48 39 c7             	cmp    %rax,%rdi
  402b55:	0f 84 20 fe ff ff    	je     40297b <main.cold+0x39a>
  402b5b:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  402b62:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  402b69:	00 
  402b6a:	e8 b1 f6 ff ff       	call   402220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402b6f:	e9 07 fe ff ff       	jmp    40297b <main.cold+0x39a>
      { return _M_dataplus._M_p; }
  402b74:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  402b7b:	48 3b bd 20 e0 ff ff 	cmp    -0x1fe0(%rbp),%rdi
  402b82:	74 14                	je     402b98 <main.cold+0x5b7>
  402b84:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  402b8b:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  402b92:	00 
  402b93:	e8 88 f6 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  402b98:	48 8b bd a0 e1 ff ff 	mov    -0x1e60(%rbp),%rdi
	if (!_M_is_local())
  402b9f:	48 3b bd 28 e0 ff ff 	cmp    -0x1fd8(%rbp),%rdi
  402ba6:	74 10                	je     402bb8 <main.cold+0x5d7>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402ba8:	48 8b 85 b0 e1 ff ff 	mov    -0x1e50(%rbp),%rax
  402baf:	48 8d 70 01          	lea    0x1(%rax),%rsi
  402bb3:	e8 68 f6 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  402bb8:	48 8b bd 80 e1 ff ff 	mov    -0x1e80(%rbp),%rdi
	if (!_M_is_local())
  402bbf:	48 8d 85 90 e1 ff ff 	lea    -0x1e70(%rbp),%rax
  402bc6:	48 39 c7             	cmp    %rax,%rdi
  402bc9:	0f 84 79 fa ff ff    	je     402648 <main.cold+0x67>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402bcf:	48 8b 85 90 e1 ff ff 	mov    -0x1e70(%rbp),%rax
  402bd6:	48 8d 70 01          	lea    0x1(%rax),%rsi
  402bda:	e8 41 f6 ff ff       	call   402220 <_ZdlPvm@plt>
  402bdf:	e9 64 fa ff ff       	jmp    402648 <main.cold+0x67>
      { return _M_dataplus._M_p; }
  402be4:	48 8b bd 50 fc ff ff 	mov    -0x3b0(%rbp),%rdi
	if (!_M_is_local())
  402beb:	48 8d 85 60 fc ff ff 	lea    -0x3a0(%rbp),%rax
  402bf2:	48 39 c7             	cmp    %rax,%rdi
  402bf5:	74 14                	je     402c0b <main.cold+0x62a>
  402bf7:	48 8b 85 60 fc ff ff 	mov    -0x3a0(%rbp),%rax
  402bfe:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  402c05:	00 
  402c06:	e8 15 f6 ff ff       	call   402220 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  402c0b:	48 8d bd 90 f9 ff ff 	lea    -0x670(%rbp),%rdi
  402c12:	e8 e9 f6 ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
  402c17:	48 89 df             	mov    %rbx,%rdi
  402c1a:	e8 51 f8 ff ff       	call   402470 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
  402c1f:	48 8b bd e0 e1 ff ff 	mov    -0x1e20(%rbp),%rdi
	if (!_M_is_local())
  402c26:	48 8d 85 f0 e1 ff ff 	lea    -0x1e10(%rbp),%rax
  402c2d:	48 39 c7             	cmp    %rax,%rdi
  402c30:	0f 84 aa fa ff ff    	je     4026e0 <main.cold+0xff>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402c36:	48 8b 85 f0 e1 ff ff 	mov    -0x1e10(%rbp),%rax
  402c3d:	48 8d 70 01          	lea    0x1(%rax),%rsi
	::operator delete(__p
  402c41:	e8 da f5 ff ff       	call   402220 <_ZdlPvm@plt>
  402c46:	e9 95 fa ff ff       	jmp    4026e0 <main.cold+0xff>
  402c4b:	48 8d bd e0 e1 ff ff 	lea    -0x1e20(%rbp),%rdi
  402c52:	e8 a9 f6 ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
  402c57:	e9 6d fa ff ff       	jmp    4026c9 <main.cold+0xe8>
  402c5c:	48 8d bd e0 e1 ff ff 	lea    -0x1e20(%rbp),%rdi
  402c63:	e8 98 f6 ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
  402c68:	e9 73 fa ff ff       	jmp    4026e0 <main.cold+0xff>
      { return _M_dataplus._M_p; }
  402c6d:	48 8b bd 50 fc ff ff 	mov    -0x3b0(%rbp),%rdi
	if (!_M_is_local())
  402c74:	48 8d 85 60 fc ff ff 	lea    -0x3a0(%rbp),%rax
  402c7b:	48 39 c7             	cmp    %rax,%rdi
  402c7e:	0f 84 74 fa ff ff    	je     4026f8 <main.cold+0x117>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402c84:	48 8b 85 60 fc ff ff 	mov    -0x3a0(%rbp),%rax
  402c8b:	48 8d 70 01          	lea    0x1(%rax),%rsi
  402c8f:	e8 8c f5 ff ff       	call   402220 <_ZdlPvm@plt>
  402c94:	e9 5f fa ff ff       	jmp    4026f8 <main.cold+0x117>
      { return _M_dataplus._M_p; }
  402c99:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  402ca0:	48 8d 85 d0 e1 ff ff 	lea    -0x1e30(%rbp),%rax
  402ca7:	48 39 c7             	cmp    %rax,%rdi
  402caa:	0f 84 64 fe ff ff    	je     402b14 <main.cold+0x533>
  402cb0:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  402cb7:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  402cbe:	00 
  402cbf:	e8 5c f5 ff ff       	call   402220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402cc4:	e9 4b fe ff ff       	jmp    402b14 <main.cold+0x533>
      { return _M_dataplus._M_p; }
  402cc9:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  402cd0:	48 3b bd 20 e0 ff ff 	cmp    -0x1fe0(%rbp),%rdi
  402cd7:	74 14                	je     402ced <main.cold+0x70c>
  402cd9:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  402ce0:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  402ce7:	00 
  402ce8:	e8 33 f5 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  402ced:	48 8b bd a0 e1 ff ff 	mov    -0x1e60(%rbp),%rdi
	if (!_M_is_local())
  402cf4:	48 3b bd 28 e0 ff ff 	cmp    -0x1fd8(%rbp),%rdi
  402cfb:	74 10                	je     402d0d <main.cold+0x72c>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402cfd:	48 8b 85 b0 e1 ff ff 	mov    -0x1e50(%rbp),%rax
  402d04:	48 8d 70 01          	lea    0x1(%rax),%rsi
  402d08:	e8 13 f5 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  402d0d:	48 8b bd 80 e1 ff ff 	mov    -0x1e80(%rbp),%rdi
	if (!_M_is_local())
  402d14:	48 8d 85 90 e1 ff ff 	lea    -0x1e70(%rbp),%rax
  402d1b:	48 39 c7             	cmp    %rax,%rdi
  402d1e:	0f 84 24 f9 ff ff    	je     402648 <main.cold+0x67>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402d24:	48 8b 85 90 e1 ff ff 	mov    -0x1e70(%rbp),%rax
  402d2b:	48 8d 70 01          	lea    0x1(%rax),%rsi
  402d2f:	e8 ec f4 ff ff       	call   402220 <_ZdlPvm@plt>
  402d34:	e9 0f f9 ff ff       	jmp    402648 <main.cold+0x67>
      { return _M_dataplus._M_p; }
  402d39:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  402d40:	48 3b bd 20 e0 ff ff 	cmp    -0x1fe0(%rbp),%rdi
  402d47:	74 14                	je     402d5d <main.cold+0x77c>
  402d49:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  402d50:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  402d57:	00 
  402d58:	e8 c3 f4 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  402d5d:	48 8b bd a0 e1 ff ff 	mov    -0x1e60(%rbp),%rdi
	if (!_M_is_local())
  402d64:	48 3b bd 28 e0 ff ff 	cmp    -0x1fd8(%rbp),%rdi
  402d6b:	74 10                	je     402d7d <main.cold+0x79c>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402d6d:	48 8b 85 b0 e1 ff ff 	mov    -0x1e50(%rbp),%rax
  402d74:	48 8d 70 01          	lea    0x1(%rax),%rsi
  402d78:	e8 a3 f4 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  402d7d:	48 8b bd 80 e1 ff ff 	mov    -0x1e80(%rbp),%rdi
	if (!_M_is_local())
  402d84:	48 8d 85 90 e1 ff ff 	lea    -0x1e70(%rbp),%rax
  402d8b:	48 39 c7             	cmp    %rax,%rdi
  402d8e:	0f 84 b4 f8 ff ff    	je     402648 <main.cold+0x67>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402d94:	48 8b 85 90 e1 ff ff 	mov    -0x1e70(%rbp),%rax
  402d9b:	48 8d 70 01          	lea    0x1(%rax),%rsi
  402d9f:	e8 7c f4 ff ff       	call   402220 <_ZdlPvm@plt>
  402da4:	e9 9f f8 ff ff       	jmp    402648 <main.cold+0x67>
      { return _M_dataplus._M_p; }
  402da9:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  402db0:	48 8d 85 d0 e1 ff ff 	lea    -0x1e30(%rbp),%rax
  402db7:	48 39 c7             	cmp    %rax,%rdi
  402dba:	0f 84 54 fd ff ff    	je     402b14 <main.cold+0x533>
  402dc0:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  402dc7:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  402dce:	00 
  402dcf:	e8 4c f4 ff ff       	call   402220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402dd4:	e9 3b fd ff ff       	jmp    402b14 <main.cold+0x533>
      { return _M_dataplus._M_p; }
  402dd9:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  402de0:	48 3b bd 20 e0 ff ff 	cmp    -0x1fe0(%rbp),%rdi
  402de7:	74 14                	je     402dfd <main.cold+0x81c>
  402de9:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  402df0:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  402df7:	00 
  402df8:	e8 23 f4 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  402dfd:	48 8b bd a0 e1 ff ff 	mov    -0x1e60(%rbp),%rdi
	if (!_M_is_local())
  402e04:	48 3b bd 28 e0 ff ff 	cmp    -0x1fd8(%rbp),%rdi
  402e0b:	74 10                	je     402e1d <main.cold+0x83c>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402e0d:	48 8b 85 b0 e1 ff ff 	mov    -0x1e50(%rbp),%rax
  402e14:	48 8d 70 01          	lea    0x1(%rax),%rsi
  402e18:	e8 03 f4 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  402e1d:	48 8b bd 80 e1 ff ff 	mov    -0x1e80(%rbp),%rdi
	if (!_M_is_local())
  402e24:	48 8d 85 90 e1 ff ff 	lea    -0x1e70(%rbp),%rax
  402e2b:	48 39 c7             	cmp    %rax,%rdi
  402e2e:	0f 84 14 f8 ff ff    	je     402648 <main.cold+0x67>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402e34:	48 8b 85 90 e1 ff ff 	mov    -0x1e70(%rbp),%rax
  402e3b:	48 8d 70 01          	lea    0x1(%rax),%rsi
  402e3f:	e8 dc f3 ff ff       	call   402220 <_ZdlPvm@plt>
  402e44:	e9 ff f7 ff ff       	jmp    402648 <main.cold+0x67>
      { return _M_dataplus._M_p; }
  402e49:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  402e50:	48 3b bd 20 e0 ff ff 	cmp    -0x1fe0(%rbp),%rdi
  402e57:	0f 84 1e fb ff ff    	je     40297b <main.cold+0x39a>
  402e5d:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  402e64:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  402e6b:	00 
  402e6c:	e8 af f3 ff ff       	call   402220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402e71:	e9 05 fb ff ff       	jmp    40297b <main.cold+0x39a>
      { return _M_dataplus._M_p; }
  402e76:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  402e7d:	48 8d 85 d0 e1 ff ff 	lea    -0x1e30(%rbp),%rax
  402e84:	48 39 c7             	cmp    %rax,%rdi
  402e87:	0f 84 ee fa ff ff    	je     40297b <main.cold+0x39a>
  402e8d:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  402e94:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  402e9b:	00 
  402e9c:	e8 7f f3 ff ff       	call   402220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402ea1:	e9 d5 fa ff ff       	jmp    40297b <main.cold+0x39a>
      { return _M_dataplus._M_p; }
  402ea6:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  402ead:	48 3b bd 20 e0 ff ff 	cmp    -0x1fe0(%rbp),%rdi
  402eb4:	0f 84 c1 fa ff ff    	je     40297b <main.cold+0x39a>
  402eba:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  402ec1:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  402ec8:	00 
  402ec9:	e8 52 f3 ff ff       	call   402220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402ece:	e9 a8 fa ff ff       	jmp    40297b <main.cold+0x39a>
      { return _M_dataplus._M_p; }
  402ed3:	48 8b bd c0 e2 ff ff 	mov    -0x1d40(%rbp),%rdi
	if (!_M_is_local())
  402eda:	48 8d 85 d0 e2 ff ff 	lea    -0x1d30(%rbp),%rax
  402ee1:	48 39 c7             	cmp    %rax,%rdi
  402ee4:	74 14                	je     402efa <main.cold+0x919>
  402ee6:	48 8b 85 d0 e2 ff ff 	mov    -0x1d30(%rbp),%rax
  402eed:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  402ef4:	00 
  402ef5:	e8 26 f3 ff ff       	call   402220 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  402efa:	48 8d bd e0 e1 ff ff 	lea    -0x1e20(%rbp),%rdi
  402f01:	e8 fa f3 ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
  402f06:	e9 ed f7 ff ff       	jmp    4026f8 <main.cold+0x117>
      { return _M_dataplus._M_p; }
  402f0b:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  402f12:	48 8d 85 d0 e1 ff ff 	lea    -0x1e30(%rbp),%rax
  402f19:	48 39 c7             	cmp    %rax,%rdi
  402f1c:	0f 84 f2 fb ff ff    	je     402b14 <main.cold+0x533>
	::operator delete(__p
  402f22:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  402f29:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  402f30:	00 
  402f31:	e8 ea f2 ff ff       	call   402220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402f36:	e9 d9 fb ff ff       	jmp    402b14 <main.cold+0x533>
      { return _M_dataplus._M_p; }
  402f3b:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  402f42:	48 8d 85 d0 e1 ff ff 	lea    -0x1e30(%rbp),%rax
  402f49:	48 39 c7             	cmp    %rax,%rdi
  402f4c:	0f 84 c2 fb ff ff    	je     402b14 <main.cold+0x533>
  402f52:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  402f59:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  402f60:	00 
  402f61:	e8 ba f2 ff ff       	call   402220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402f66:	e9 a9 fb ff ff       	jmp    402b14 <main.cold+0x533>
      { return _M_dataplus._M_p; }
  402f6b:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  402f72:	48 8d 85 d0 e1 ff ff 	lea    -0x1e30(%rbp),%rax
  402f79:	48 39 c7             	cmp    %rax,%rdi
  402f7c:	0f 84 ce f6 ff ff    	je     402650 <main.cold+0x6f>
  402f82:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  402f89:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  402f90:	00 
  402f91:	e8 8a f2 ff ff       	call   402220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402f96:	e9 b5 f6 ff ff       	jmp    402650 <main.cold+0x6f>
      { return _M_dataplus._M_p; }
  402f9b:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  402fa2:	48 3b bd 20 e0 ff ff 	cmp    -0x1fe0(%rbp),%rdi
  402fa9:	0f 84 a1 f6 ff ff    	je     402650 <main.cold+0x6f>
  402faf:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  402fb6:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  402fbd:	00 
  402fbe:	e8 5d f2 ff ff       	call   402220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402fc3:	e9 88 f6 ff ff       	jmp    402650 <main.cold+0x6f>
      { return _M_dataplus._M_p; }
  402fc8:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  402fcf:	48 8d 85 d0 e1 ff ff 	lea    -0x1e30(%rbp),%rax
  402fd6:	48 39 c7             	cmp    %rax,%rdi
  402fd9:	0f 84 35 fb ff ff    	je     402b14 <main.cold+0x533>
  402fdf:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  402fe6:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  402fed:	00 
  402fee:	e8 2d f2 ff ff       	call   402220 <_ZdlPvm@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  402ff3:	e9 1c fb ff ff       	jmp    402b14 <main.cold+0x533>

0000000000402ff8 <.annobin_abi_note.c.exit>:
  402ff8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  402fff:	00 

0000000000403000 <_GLOBAL__sub_I__Z17char_to_stringbitB5cxx11c>:
}
  403000:	48 83 ec 08          	sub    $0x8,%rsp
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  ///@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
  403004:	bf 29 b4 40 00       	mov    $0x40b429,%edi
  403009:	e8 62 f3 ff ff       	call   402370 <_ZNSt8ios_base4InitC1Ev@plt>
  40300e:	ba 08 80 40 00       	mov    $0x408008,%edx
  403013:	be 29 b4 40 00       	mov    $0x40b429,%esi
  403018:	bf d0 24 40 00       	mov    $0x4024d0,%edi
  40301d:	48 83 c4 08          	add    $0x8,%rsp
  403021:	e9 da f1 ff ff       	jmp    402200 <__cxa_atexit@plt>
  403026:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  40302d:	00 00 00 

0000000000403030 <main>:
{
  403030:	55                   	push   %rbp
  403031:	48 89 e5             	mov    %rsp,%rbp
  403034:	41 57                	push   %r15
  403036:	41 56                	push   %r14
  403038:	41 55                	push   %r13
  40303a:	41 54                	push   %r12
  40303c:	53                   	push   %rbx
  40303d:	48 89 f3             	mov    %rsi,%rbx
  403040:	48 81 ec e8 1f 00 00 	sub    $0x1fe8,%rsp
	if(argc < 2){
  403047:	83 ff 01             	cmp    $0x1,%edi
  40304a:	0f 8e fb 2c 00 00    	jle    405d4b <main+0x2d1b>
	if((fd = open(argv[1], O_RDWR)) < 0){
  403050:	48 8b 7e 08          	mov    0x8(%rsi),%rdi
  403054:	31 c0                	xor    %eax,%eax
  403056:	be 02 00 00 00       	mov    $0x2,%esi
  40305b:	e8 30 f1 ff ff       	call   402190 <open@plt>
  403060:	41 89 c7             	mov    %eax,%r15d
  403063:	85 c0                	test   %eax,%eax
  403065:	0f 88 cb 2d 00 00    	js     405e36 <main+0x2e06>
	sf::VideoMode videomode(800, 600);
  40306b:	ba 58 02 00 00       	mov    $0x258,%edx
  403070:	be 20 03 00 00       	mov    $0x320,%esi
  403075:	b9 20 00 00 00       	mov    $0x20,%ecx
  40307a:	48 8d bd b4 e0 ff ff 	lea    -0x1f4c(%rbp),%rdi
  403081:	e8 1a f1 ff ff       	call   4021a0 <_ZN2sf9VideoModeC1Ejjj@plt>
    /// \param attributes   Attribute flags of the context
    /// \param sRgb         sRGB capable framebuffer
    ///
    ////////////////////////////////////////////////////////////
    explicit ContextSettings(unsigned int depth = 0, unsigned int stencil = 0, unsigned int antialiasing = 0, unsigned int major = 1, unsigned int minor = 1, unsigned int attributes = Default, bool sRgb = false) :
    depthBits        (depth),
  403086:	66 0f 6f 05 52 55 00 	movdqa 0x5552(%rip),%xmm0        # 4085e0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x100>
  40308d:	00 
    stencilBits      (stencil),
    antialiasingLevel(antialiasing),
    majorVersion     (major),
    minorVersion     (minor),
  40308e:	48 8b 05 23 55 00 00 	mov    0x5523(%rip),%rax        # 4085b8 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xd8>
	sf::RenderWindow window(videomode, "Project IHS", sf::Style::Titlebar | sf::Style::Default); //close button and not resizable
  403095:	48 8d bd 90 f9 ff ff 	lea    -0x670(%rbp),%rdi
    attributeFlags   (attributes),
    sRgbCapable      (sRgb)
  40309c:	c6 85 08 fb ff ff 00 	movb   $0x0,-0x4f8(%rbp)
    minorVersion     (minor),
  4030a3:	48 89 85 00 fb ff ff 	mov    %rax,-0x500(%rbp)
    depthBits        (depth),
  4030aa:	0f 29 85 f0 fa ff ff 	movaps %xmm0,-0x510(%rbp)
  4030b1:	e8 0a f4 ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  4030b6:	48 8d 95 90 f9 ff ff 	lea    -0x670(%rbp),%rdx
  4030bd:	be 9a 80 40 00       	mov    $0x40809a,%esi
  4030c2:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  4030c9:	e8 22 f0 ff ff       	call   4020f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  4030ce:	48 8b b5 b4 e0 ff ff 	mov    -0x1f4c(%rbp),%rsi
  4030d5:	8b 95 bc e0 ff ff    	mov    -0x1f44(%rbp),%edx
  4030db:	4c 8d 8d f0 fa ff ff 	lea    -0x510(%rbp),%r9
  4030e2:	41 b8 07 00 00 00    	mov    $0x7,%r8d
  4030e8:	48 8d 8d 50 fc ff ff 	lea    -0x3b0(%rbp),%rcx
  4030ef:	48 8d bd c0 fd ff ff 	lea    -0x240(%rbp),%rdi
  4030f6:	e8 45 f2 ff ff       	call   402340 <_ZN2sf12RenderWindowC1ENS_9VideoModeERKNS_6StringEjRKNS_15ContextSettingsE@plt>
      { return _M_dataplus._M_p; }
  4030fb:	48 8b bd 50 fc ff ff 	mov    -0x3b0(%rbp),%rdi
	if (!_M_is_local())
  403102:	48 8d 85 60 fc ff ff 	lea    -0x3a0(%rbp),%rax
  403109:	48 39 c7             	cmp    %rax,%rdi
  40310c:	74 14                	je     403122 <main+0xf2>
  40310e:	48 8b 85 60 fc ff ff 	mov    -0x3a0(%rbp),%rax
  403115:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  40311c:	00 
  40311d:	e8 fe f0 ff ff       	call   402220 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  403122:	48 8d bd 90 f9 ff ff 	lea    -0x670(%rbp),%rdi
  403129:	e8 d2 f1 ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
	sf::CircleShape square1(30, 4);
  40312e:	f3 0f 10 05 da 54 00 	movss  0x54da(%rip),%xmm0        # 408610 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  403135:	00 
  403136:	be 04 00 00 00       	mov    $0x4,%esi
  40313b:	48 8d bd 90 e3 ff ff 	lea    -0x1c70(%rbp),%rdi
  403142:	e8 79 f0 ff ff       	call   4021c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square1.setFillColor(sf::Color(108, 222, 153));
  403147:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  40314d:	b9 99 00 00 00       	mov    $0x99,%ecx
  403152:	ba de 00 00 00       	mov    $0xde,%edx
  403157:	be 6c 00 00 00       	mov    $0x6c,%esi
  40315c:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  403163:	e8 98 ef ff ff       	call   402100 <_ZN2sf5ColorC1Ehhhh@plt>
  403168:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  40316f:	48 8d bd 90 e3 ff ff 	lea    -0x1c70(%rbp),%rdi
  403176:	e8 15 f3 ff ff       	call   402490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square1.setPosition(20.f, 50.f);
  40317b:	f3 0f 10 0d 91 54 00 	movss  0x5491(%rip),%xmm1        # 408614 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x134>
  403182:	00 
  403183:	f3 0f 10 05 8d 54 00 	movss  0x548d(%rip),%xmm0        # 408618 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x138>
  40318a:	00 
  40318b:	48 8d bd 98 e3 ff ff 	lea    -0x1c68(%rbp),%rdi
  403192:	e8 99 ef ff ff       	call   402130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square2(30, 4);
  403197:	f3 0f 10 05 71 54 00 	movss  0x5471(%rip),%xmm0        # 408610 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  40319e:	00 
  40319f:	be 04 00 00 00       	mov    $0x4,%esi
  4031a4:	48 8d bd f0 e4 ff ff 	lea    -0x1b10(%rbp),%rdi
  4031ab:	e8 10 f0 ff ff       	call   4021c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square2.setFillColor(sf::Color(108, 222, 153));
  4031b0:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  4031b6:	b9 99 00 00 00       	mov    $0x99,%ecx
  4031bb:	ba de 00 00 00       	mov    $0xde,%edx
  4031c0:	be 6c 00 00 00       	mov    $0x6c,%esi
  4031c5:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  4031cc:	e8 2f ef ff ff       	call   402100 <_ZN2sf5ColorC1Ehhhh@plt>
  4031d1:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  4031d8:	48 8d bd f0 e4 ff ff 	lea    -0x1b10(%rbp),%rdi
  4031df:	e8 ac f2 ff ff       	call   402490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square2.setPosition(100.f, 50.f);
  4031e4:	f3 0f 10 0d 28 54 00 	movss  0x5428(%rip),%xmm1        # 408614 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x134>
  4031eb:	00 
  4031ec:	f3 0f 10 05 28 54 00 	movss  0x5428(%rip),%xmm0        # 40861c <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x13c>
  4031f3:	00 
  4031f4:	48 8d bd f8 e4 ff ff 	lea    -0x1b08(%rbp),%rdi
  4031fb:	e8 30 ef ff ff       	call   402130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square3(30, 4);
  403200:	f3 0f 10 05 08 54 00 	movss  0x5408(%rip),%xmm0        # 408610 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  403207:	00 
  403208:	be 04 00 00 00       	mov    $0x4,%esi
  40320d:	48 8d bd 50 e6 ff ff 	lea    -0x19b0(%rbp),%rdi
  403214:	e8 a7 ef ff ff       	call   4021c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square3.setFillColor(sf::Color(254, 0, 0));
  403219:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  40321f:	31 c9                	xor    %ecx,%ecx
  403221:	31 d2                	xor    %edx,%edx
  403223:	be fe 00 00 00       	mov    $0xfe,%esi
  403228:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  40322f:	e8 cc ee ff ff       	call   402100 <_ZN2sf5ColorC1Ehhhh@plt>
  403234:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  40323b:	48 8d bd 50 e6 ff ff 	lea    -0x19b0(%rbp),%rdi
  403242:	e8 49 f2 ff ff       	call   402490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square3.setPosition(180.f, 50.f);
  403247:	f3 0f 10 0d c5 53 00 	movss  0x53c5(%rip),%xmm1        # 408614 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x134>
  40324e:	00 
  40324f:	f3 0f 10 05 c9 53 00 	movss  0x53c9(%rip),%xmm0        # 408620 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x140>
  403256:	00 
  403257:	48 8d bd 58 e6 ff ff 	lea    -0x19a8(%rbp),%rdi
  40325e:	e8 cd ee ff ff       	call   402130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square4(30, 4);
  403263:	f3 0f 10 05 a5 53 00 	movss  0x53a5(%rip),%xmm0        # 408610 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  40326a:	00 
  40326b:	be 04 00 00 00       	mov    $0x4,%esi
  403270:	48 8d bd b0 e7 ff ff 	lea    -0x1850(%rbp),%rdi
  403277:	e8 44 ef ff ff       	call   4021c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square4.setFillColor(sf::Color(108, 222, 153));
  40327c:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  403282:	b9 99 00 00 00       	mov    $0x99,%ecx
  403287:	ba de 00 00 00       	mov    $0xde,%edx
  40328c:	be 6c 00 00 00       	mov    $0x6c,%esi
  403291:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  403298:	e8 63 ee ff ff       	call   402100 <_ZN2sf5ColorC1Ehhhh@plt>
  40329d:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  4032a4:	48 8d bd b0 e7 ff ff 	lea    -0x1850(%rbp),%rdi
  4032ab:	e8 e0 f1 ff ff       	call   402490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square4.setPosition(260.f, 50.f);
  4032b0:	f3 0f 10 0d 5c 53 00 	movss  0x535c(%rip),%xmm1        # 408614 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x134>
  4032b7:	00 
  4032b8:	f3 0f 10 05 64 53 00 	movss  0x5364(%rip),%xmm0        # 408624 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x144>
  4032bf:	00 
  4032c0:	48 8d bd b8 e7 ff ff 	lea    -0x1848(%rbp),%rdi
  4032c7:	e8 64 ee ff ff       	call   402130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square5(30, 4);
  4032cc:	f3 0f 10 05 3c 53 00 	movss  0x533c(%rip),%xmm0        # 408610 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  4032d3:	00 
  4032d4:	be 04 00 00 00       	mov    $0x4,%esi
  4032d9:	48 8d bd 10 e9 ff ff 	lea    -0x16f0(%rbp),%rdi
  4032e0:	e8 db ee ff ff       	call   4021c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square5.setFillColor(sf::Color(254, 0, 0));
  4032e5:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  4032eb:	31 c9                	xor    %ecx,%ecx
  4032ed:	31 d2                	xor    %edx,%edx
  4032ef:	be fe 00 00 00       	mov    $0xfe,%esi
  4032f4:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  4032fb:	e8 00 ee ff ff       	call   402100 <_ZN2sf5ColorC1Ehhhh@plt>
  403300:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  403307:	48 8d bd 10 e9 ff ff 	lea    -0x16f0(%rbp),%rdi
  40330e:	e8 7d f1 ff ff       	call   402490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square5.setPosition(340.f, 50.f);
  403313:	f3 0f 10 0d f9 52 00 	movss  0x52f9(%rip),%xmm1        # 408614 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x134>
  40331a:	00 
  40331b:	f3 0f 10 05 05 53 00 	movss  0x5305(%rip),%xmm0        # 408628 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x148>
  403322:	00 
  403323:	48 8d bd 18 e9 ff ff 	lea    -0x16e8(%rbp),%rdi
  40332a:	e8 01 ee ff ff       	call   402130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square6(30, 4);
  40332f:	f3 0f 10 05 d9 52 00 	movss  0x52d9(%rip),%xmm0        # 408610 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  403336:	00 
  403337:	be 04 00 00 00       	mov    $0x4,%esi
  40333c:	48 8d bd 70 ea ff ff 	lea    -0x1590(%rbp),%rdi
  403343:	e8 78 ee ff ff       	call   4021c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square6.setFillColor(sf::Color(108, 222, 153));
  403348:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  40334e:	b9 99 00 00 00       	mov    $0x99,%ecx
  403353:	ba de 00 00 00       	mov    $0xde,%edx
  403358:	be 6c 00 00 00       	mov    $0x6c,%esi
  40335d:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  403364:	e8 97 ed ff ff       	call   402100 <_ZN2sf5ColorC1Ehhhh@plt>
  403369:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  403370:	48 8d bd 70 ea ff ff 	lea    -0x1590(%rbp),%rdi
  403377:	e8 14 f1 ff ff       	call   402490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square6.setPosition(420.f, 50.f);
  40337c:	f3 0f 10 0d 90 52 00 	movss  0x5290(%rip),%xmm1        # 408614 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x134>
  403383:	00 
  403384:	f3 0f 10 05 a0 52 00 	movss  0x52a0(%rip),%xmm0        # 40862c <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x14c>
  40338b:	00 
  40338c:	48 8d bd 78 ea ff ff 	lea    -0x1588(%rbp),%rdi
  403393:	e8 98 ed ff ff       	call   402130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square7(30, 4);
  403398:	f3 0f 10 05 70 52 00 	movss  0x5270(%rip),%xmm0        # 408610 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  40339f:	00 
  4033a0:	be 04 00 00 00       	mov    $0x4,%esi
  4033a5:	48 8d bd d0 eb ff ff 	lea    -0x1430(%rbp),%rdi
  4033ac:	e8 0f ee ff ff       	call   4021c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square7.setFillColor(sf::Color(254, 0, 0));
  4033b1:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  4033b7:	31 c9                	xor    %ecx,%ecx
  4033b9:	31 d2                	xor    %edx,%edx
  4033bb:	be fe 00 00 00       	mov    $0xfe,%esi
  4033c0:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  4033c7:	e8 34 ed ff ff       	call   402100 <_ZN2sf5ColorC1Ehhhh@plt>
  4033cc:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  4033d3:	48 8d bd d0 eb ff ff 	lea    -0x1430(%rbp),%rdi
  4033da:	e8 b1 f0 ff ff       	call   402490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square7.setPosition(20.f, 190.f);
  4033df:	f3 0f 10 0d 49 52 00 	movss  0x5249(%rip),%xmm1        # 408630 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x150>
  4033e6:	00 
  4033e7:	f3 0f 10 05 29 52 00 	movss  0x5229(%rip),%xmm0        # 408618 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x138>
  4033ee:	00 
  4033ef:	48 8d bd d8 eb ff ff 	lea    -0x1428(%rbp),%rdi
  4033f6:	e8 35 ed ff ff       	call   402130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square8(30, 4);
  4033fb:	f3 0f 10 05 0d 52 00 	movss  0x520d(%rip),%xmm0        # 408610 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  403402:	00 
  403403:	be 04 00 00 00       	mov    $0x4,%esi
  403408:	48 8d bd 30 ed ff ff 	lea    -0x12d0(%rbp),%rdi
  40340f:	e8 ac ed ff ff       	call   4021c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square8.setFillColor(sf::Color(108, 222, 153));
  403414:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  40341a:	b9 99 00 00 00       	mov    $0x99,%ecx
  40341f:	ba de 00 00 00       	mov    $0xde,%edx
  403424:	be 6c 00 00 00       	mov    $0x6c,%esi
  403429:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  403430:	e8 cb ec ff ff       	call   402100 <_ZN2sf5ColorC1Ehhhh@plt>
  403435:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  40343c:	48 8d bd 30 ed ff ff 	lea    -0x12d0(%rbp),%rdi
  403443:	e8 48 f0 ff ff       	call   402490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square8.setPosition(100.f, 190.f);
  403448:	f3 0f 10 0d e0 51 00 	movss  0x51e0(%rip),%xmm1        # 408630 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x150>
  40344f:	00 
  403450:	f3 0f 10 05 c4 51 00 	movss  0x51c4(%rip),%xmm0        # 40861c <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x13c>
  403457:	00 
  403458:	48 8d bd 38 ed ff ff 	lea    -0x12c8(%rbp),%rdi
  40345f:	e8 cc ec ff ff       	call   402130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square9(30, 4);
  403464:	f3 0f 10 05 a4 51 00 	movss  0x51a4(%rip),%xmm0        # 408610 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  40346b:	00 
  40346c:	be 04 00 00 00       	mov    $0x4,%esi
  403471:	48 8d bd 90 ee ff ff 	lea    -0x1170(%rbp),%rdi
  403478:	e8 43 ed ff ff       	call   4021c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square9.setFillColor(sf::Color(254, 0, 0));
  40347d:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  403483:	31 c9                	xor    %ecx,%ecx
  403485:	31 d2                	xor    %edx,%edx
  403487:	be fe 00 00 00       	mov    $0xfe,%esi
  40348c:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  403493:	e8 68 ec ff ff       	call   402100 <_ZN2sf5ColorC1Ehhhh@plt>
  403498:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  40349f:	48 8d bd 90 ee ff ff 	lea    -0x1170(%rbp),%rdi
  4034a6:	e8 e5 ef ff ff       	call   402490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square9.setPosition(180.f, 190.f);
  4034ab:	f3 0f 10 0d 7d 51 00 	movss  0x517d(%rip),%xmm1        # 408630 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x150>
  4034b2:	00 
  4034b3:	f3 0f 10 05 65 51 00 	movss  0x5165(%rip),%xmm0        # 408620 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x140>
  4034ba:	00 
  4034bb:	48 8d bd 98 ee ff ff 	lea    -0x1168(%rbp),%rdi
  4034c2:	e8 69 ec ff ff       	call   402130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square10(30, 4);
  4034c7:	f3 0f 10 05 41 51 00 	movss  0x5141(%rip),%xmm0        # 408610 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  4034ce:	00 
  4034cf:	be 04 00 00 00       	mov    $0x4,%esi
  4034d4:	48 8d bd f0 ef ff ff 	lea    -0x1010(%rbp),%rdi
  4034db:	e8 e0 ec ff ff       	call   4021c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square10.setFillColor(sf::Color(108, 222, 153));
  4034e0:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  4034e6:	b9 99 00 00 00       	mov    $0x99,%ecx
  4034eb:	ba de 00 00 00       	mov    $0xde,%edx
  4034f0:	be 6c 00 00 00       	mov    $0x6c,%esi
  4034f5:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  4034fc:	e8 ff eb ff ff       	call   402100 <_ZN2sf5ColorC1Ehhhh@plt>
  403501:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  403508:	48 8d bd f0 ef ff ff 	lea    -0x1010(%rbp),%rdi
  40350f:	e8 7c ef ff ff       	call   402490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square10.setPosition(260.f, 190.f);
  403514:	f3 0f 10 0d 14 51 00 	movss  0x5114(%rip),%xmm1        # 408630 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x150>
  40351b:	00 
  40351c:	f3 0f 10 05 00 51 00 	movss  0x5100(%rip),%xmm0        # 408624 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x144>
  403523:	00 
  403524:	48 8d bd f8 ef ff ff 	lea    -0x1008(%rbp),%rdi
  40352b:	e8 00 ec ff ff       	call   402130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square11(30, 4);
  403530:	f3 0f 10 05 d8 50 00 	movss  0x50d8(%rip),%xmm0        # 408610 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  403537:	00 
  403538:	be 04 00 00 00       	mov    $0x4,%esi
  40353d:	48 8d bd 50 f1 ff ff 	lea    -0xeb0(%rbp),%rdi
  403544:	e8 77 ec ff ff       	call   4021c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square11.setFillColor(sf::Color(108, 222, 153));
  403549:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  40354f:	b9 99 00 00 00       	mov    $0x99,%ecx
  403554:	ba de 00 00 00       	mov    $0xde,%edx
  403559:	be 6c 00 00 00       	mov    $0x6c,%esi
  40355e:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  403565:	e8 96 eb ff ff       	call   402100 <_ZN2sf5ColorC1Ehhhh@plt>
  40356a:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  403571:	48 8d bd 50 f1 ff ff 	lea    -0xeb0(%rbp),%rdi
  403578:	e8 13 ef ff ff       	call   402490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square11.setPosition(340.f, 190.f);
  40357d:	f3 0f 10 0d ab 50 00 	movss  0x50ab(%rip),%xmm1        # 408630 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x150>
  403584:	00 
  403585:	f3 0f 10 05 9b 50 00 	movss  0x509b(%rip),%xmm0        # 408628 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x148>
  40358c:	00 
  40358d:	48 8d bd 58 f1 ff ff 	lea    -0xea8(%rbp),%rdi
  403594:	e8 97 eb ff ff       	call   402130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square12(30, 4);
  403599:	f3 0f 10 05 6f 50 00 	movss  0x506f(%rip),%xmm0        # 408610 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  4035a0:	00 
  4035a1:	be 04 00 00 00       	mov    $0x4,%esi
  4035a6:	48 8d bd b0 f2 ff ff 	lea    -0xd50(%rbp),%rdi
  4035ad:	e8 0e ec ff ff       	call   4021c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square12.setFillColor(sf::Color(108, 222, 153));
  4035b2:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  4035b8:	b9 99 00 00 00       	mov    $0x99,%ecx
  4035bd:	ba de 00 00 00       	mov    $0xde,%edx
  4035c2:	be 6c 00 00 00       	mov    $0x6c,%esi
  4035c7:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  4035ce:	e8 2d eb ff ff       	call   402100 <_ZN2sf5ColorC1Ehhhh@plt>
  4035d3:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  4035da:	48 8d bd b0 f2 ff ff 	lea    -0xd50(%rbp),%rdi
  4035e1:	e8 aa ee ff ff       	call   402490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square12.setPosition(420.f, 190.f);
  4035e6:	f3 0f 10 0d 42 50 00 	movss  0x5042(%rip),%xmm1        # 408630 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x150>
  4035ed:	00 
  4035ee:	f3 0f 10 05 36 50 00 	movss  0x5036(%rip),%xmm0        # 40862c <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x14c>
  4035f5:	00 
  4035f6:	48 8d bd b8 f2 ff ff 	lea    -0xd48(%rbp),%rdi
  4035fd:	e8 2e eb ff ff       	call   402130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square13(30, 4);
  403602:	f3 0f 10 05 06 50 00 	movss  0x5006(%rip),%xmm0        # 408610 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  403609:	00 
  40360a:	be 04 00 00 00       	mov    $0x4,%esi
  40360f:	48 8d bd 10 f4 ff ff 	lea    -0xbf0(%rbp),%rdi
  403616:	e8 a5 eb ff ff       	call   4021c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square13.setFillColor(sf::Color(108, 222, 153));
  40361b:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  403621:	b9 99 00 00 00       	mov    $0x99,%ecx
  403626:	ba de 00 00 00       	mov    $0xde,%edx
  40362b:	be 6c 00 00 00       	mov    $0x6c,%esi
  403630:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  403637:	e8 c4 ea ff ff       	call   402100 <_ZN2sf5ColorC1Ehhhh@plt>
  40363c:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  403643:	48 8d bd 10 f4 ff ff 	lea    -0xbf0(%rbp),%rdi
  40364a:	e8 41 ee ff ff       	call   402490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square13.setPosition(20.f, 330.f);
  40364f:	f3 0f 10 0d dd 4f 00 	movss  0x4fdd(%rip),%xmm1        # 408634 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x154>
  403656:	00 
  403657:	f3 0f 10 05 b9 4f 00 	movss  0x4fb9(%rip),%xmm0        # 408618 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x138>
  40365e:	00 
  40365f:	48 8d bd 18 f4 ff ff 	lea    -0xbe8(%rbp),%rdi
  403666:	e8 c5 ea ff ff       	call   402130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square14(30, 4);
  40366b:	f3 0f 10 05 9d 4f 00 	movss  0x4f9d(%rip),%xmm0        # 408610 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  403672:	00 
  403673:	be 04 00 00 00       	mov    $0x4,%esi
  403678:	48 8d bd 70 f5 ff ff 	lea    -0xa90(%rbp),%rdi
  40367f:	e8 3c eb ff ff       	call   4021c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square14.setFillColor(sf::Color(254, 0, 0));
  403684:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  40368a:	31 c9                	xor    %ecx,%ecx
  40368c:	31 d2                	xor    %edx,%edx
  40368e:	be fe 00 00 00       	mov    $0xfe,%esi
  403693:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  40369a:	e8 61 ea ff ff       	call   402100 <_ZN2sf5ColorC1Ehhhh@plt>
  40369f:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  4036a6:	48 8d bd 70 f5 ff ff 	lea    -0xa90(%rbp),%rdi
  4036ad:	e8 de ed ff ff       	call   402490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square14.setPosition(100.f, 330.f);
  4036b2:	f3 0f 10 0d 7a 4f 00 	movss  0x4f7a(%rip),%xmm1        # 408634 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x154>
  4036b9:	00 
  4036ba:	f3 0f 10 05 5a 4f 00 	movss  0x4f5a(%rip),%xmm0        # 40861c <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x13c>
  4036c1:	00 
  4036c2:	48 8d bd 78 f5 ff ff 	lea    -0xa88(%rbp),%rdi
  4036c9:	e8 62 ea ff ff       	call   402130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square15(30, 4);
  4036ce:	f3 0f 10 05 3a 4f 00 	movss  0x4f3a(%rip),%xmm0        # 408610 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  4036d5:	00 
  4036d6:	be 04 00 00 00       	mov    $0x4,%esi
  4036db:	48 8d bd d0 f6 ff ff 	lea    -0x930(%rbp),%rdi
  4036e2:	e8 d9 ea ff ff       	call   4021c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square15.setFillColor(sf::Color(108, 222, 153));
  4036e7:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  4036ed:	b9 99 00 00 00       	mov    $0x99,%ecx
  4036f2:	ba de 00 00 00       	mov    $0xde,%edx
  4036f7:	be 6c 00 00 00       	mov    $0x6c,%esi
  4036fc:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  403703:	e8 f8 e9 ff ff       	call   402100 <_ZN2sf5ColorC1Ehhhh@plt>
  403708:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  40370f:	48 8d bd d0 f6 ff ff 	lea    -0x930(%rbp),%rdi
  403716:	e8 75 ed ff ff       	call   402490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square15.setPosition(180.f, 330.f);
  40371b:	f3 0f 10 0d 11 4f 00 	movss  0x4f11(%rip),%xmm1        # 408634 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x154>
  403722:	00 
  403723:	f3 0f 10 05 f5 4e 00 	movss  0x4ef5(%rip),%xmm0        # 408620 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x140>
  40372a:	00 
  40372b:	48 8d bd d8 f6 ff ff 	lea    -0x928(%rbp),%rdi
  403732:	e8 f9 e9 ff ff       	call   402130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square16(30, 4);
  403737:	f3 0f 10 05 d1 4e 00 	movss  0x4ed1(%rip),%xmm0        # 408610 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  40373e:	00 
  40373f:	be 04 00 00 00       	mov    $0x4,%esi
  403744:	48 8d bd 30 f8 ff ff 	lea    -0x7d0(%rbp),%rdi
  40374b:	e8 70 ea ff ff       	call   4021c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square16.setFillColor(sf::Color(254, 0, 0));
  403750:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  403756:	31 c9                	xor    %ecx,%ecx
  403758:	31 d2                	xor    %edx,%edx
  40375a:	be fe 00 00 00       	mov    $0xfe,%esi
  40375f:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  403766:	e8 95 e9 ff ff       	call   402100 <_ZN2sf5ColorC1Ehhhh@plt>
  40376b:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  403772:	48 8d bd 30 f8 ff ff 	lea    -0x7d0(%rbp),%rdi
  403779:	e8 12 ed ff ff       	call   402490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square16.setPosition(260.f, 330.f);
  40377e:	f3 0f 10 0d ae 4e 00 	movss  0x4eae(%rip),%xmm1        # 408634 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x154>
  403785:	00 
  403786:	f3 0f 10 05 96 4e 00 	movss  0x4e96(%rip),%xmm0        # 408624 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x144>
  40378d:	00 
  40378e:	48 8d bd 38 f8 ff ff 	lea    -0x7c8(%rbp),%rdi
  403795:	e8 96 e9 ff ff       	call   402130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square17(30, 4);
  40379a:	f3 0f 10 05 6e 4e 00 	movss  0x4e6e(%rip),%xmm0        # 408610 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  4037a1:	00 
  4037a2:	be 04 00 00 00       	mov    $0x4,%esi
  4037a7:	48 8d bd 90 f9 ff ff 	lea    -0x670(%rbp),%rdi
  4037ae:	e8 0d ea ff ff       	call   4021c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square17.setFillColor(sf::Color(108, 222, 153));
  4037b3:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  4037b9:	b9 99 00 00 00       	mov    $0x99,%ecx
  4037be:	ba de 00 00 00       	mov    $0xde,%edx
  4037c3:	be 6c 00 00 00       	mov    $0x6c,%esi
  4037c8:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  4037cf:	e8 2c e9 ff ff       	call   402100 <_ZN2sf5ColorC1Ehhhh@plt>
  4037d4:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  4037db:	48 8d bd 90 f9 ff ff 	lea    -0x670(%rbp),%rdi
  4037e2:	e8 a9 ec ff ff       	call   402490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square17.setPosition(340.f, 330.f);
  4037e7:	f3 0f 10 0d 45 4e 00 	movss  0x4e45(%rip),%xmm1        # 408634 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x154>
  4037ee:	00 
  4037ef:	f3 0f 10 05 31 4e 00 	movss  0x4e31(%rip),%xmm0        # 408628 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x148>
  4037f6:	00 
  4037f7:	48 8d bd 98 f9 ff ff 	lea    -0x668(%rbp),%rdi
  4037fe:	e8 2d e9 ff ff       	call   402130 <_ZN2sf13Transformable11setPositionEff@plt>
	sf::CircleShape square18(30, 4);
  403803:	f3 0f 10 05 05 4e 00 	movss  0x4e05(%rip),%xmm0        # 408610 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x130>
  40380a:	00 
  40380b:	be 04 00 00 00       	mov    $0x4,%esi
  403810:	48 8d bd f0 fa ff ff 	lea    -0x510(%rbp),%rdi
  403817:	e8 a4 e9 ff ff       	call   4021c0 <_ZN2sf11CircleShapeC1Efm@plt>
	square18.setFillColor(sf::Color(254, 0, 0));
  40381c:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  403822:	31 c9                	xor    %ecx,%ecx
  403824:	31 d2                	xor    %edx,%edx
  403826:	be fe 00 00 00       	mov    $0xfe,%esi
  40382b:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  403832:	e8 c9 e8 ff ff       	call   402100 <_ZN2sf5ColorC1Ehhhh@plt>
  403837:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  40383e:	48 8d bd f0 fa ff ff 	lea    -0x510(%rbp),%rdi
  403845:	e8 46 ec ff ff       	call   402490 <_ZN2sf5Shape12setFillColorERKNS_5ColorE@plt>
	square18.setPosition(420.f, 330.f);
  40384a:	f3 0f 10 0d e2 4d 00 	movss  0x4de2(%rip),%xmm1        # 408634 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x154>
  403851:	00 
  403852:	f3 0f 10 05 d2 4d 00 	movss  0x4dd2(%rip),%xmm0        # 40862c <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x14c>
  403859:	00 
  40385a:	48 8d bd f8 fa ff ff 	lea    -0x508(%rbp),%rdi
  403861:	e8 ca e8 ff ff       	call   402130 <_ZN2sf13Transformable11setPositionEff@plt>
	window.setFramerateLimit(12);
  403866:	be 0c 00 00 00       	mov    $0xc,%esi
  40386b:	48 8d bd c0 fd ff ff 	lea    -0x240(%rbp),%rdi
  403872:	e8 39 ea ff ff       	call   4022b0 <_ZN2sf6Window17setFramerateLimitEj@plt>
	sf::Font font;
  403877:	48 8d bd 30 e2 ff ff 	lea    -0x1dd0(%rbp),%rdi
  40387e:	e8 2d e8 ff ff       	call   4020b0 <_ZN2sf4FontC1Ev@plt>
	font.loadFromFile("/home/de2i-150/Desktop/Projeto-IHS/IHS-Project/ihs-project-layout/app/fonts/cour.ttf");
  403883:	48 8d 95 c0 e2 ff ff 	lea    -0x1d40(%rbp),%rdx
  40388a:	be c8 81 40 00       	mov    $0x4081c8,%esi
  40388f:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  403896:	e8 75 39 00 00       	call   407210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
  40389b:	48 8d b5 50 fc ff ff 	lea    -0x3b0(%rbp),%rsi
  4038a2:	48 8d bd 30 e2 ff ff 	lea    -0x1dd0(%rbp),%rdi
  4038a9:	e8 62 e9 ff ff       	call   402210 <_ZN2sf4Font12loadFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>
      { return _M_dataplus._M_p; }
  4038ae:	48 8b bd 50 fc ff ff 	mov    -0x3b0(%rbp),%rdi
	if (!_M_is_local())
  4038b5:	48 8d 85 60 fc ff ff 	lea    -0x3a0(%rbp),%rax
  4038bc:	48 39 c7             	cmp    %rax,%rdi
  4038bf:	74 10                	je     4038d1 <main+0x8a1>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4038c1:	48 8b 85 60 fc ff ff 	mov    -0x3a0(%rbp),%rax
  4038c8:	48 8d 70 01          	lea    0x1(%rax),%rsi
	::operator delete(__p
  4038cc:	e8 4f e9 ff ff       	call   402220 <_ZdlPvm@plt>
	sf::Text text("", font, 20);
  4038d1:	48 8d bd e0 e1 ff ff 	lea    -0x1e20(%rbp),%rdi
  4038d8:	e8 e3 eb ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  4038dd:	48 8d 95 e0 e1 ff ff 	lea    -0x1e20(%rbp),%rdx
  4038e4:	be d5 80 40 00       	mov    $0x4080d5,%esi
  4038e9:	48 8d bd c0 e2 ff ff 	lea    -0x1d40(%rbp),%rdi
  4038f0:	e8 fb e7 ff ff       	call   4020f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  4038f5:	b9 14 00 00 00       	mov    $0x14,%ecx
  4038fa:	48 8d 95 30 e2 ff ff 	lea    -0x1dd0(%rbp),%rdx
  403901:	48 8d b5 c0 e2 ff ff 	lea    -0x1d40(%rbp),%rsi
  403908:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  40390f:	e8 dc e8 ff ff       	call   4021f0 <_ZN2sf4TextC1ERKNS_6StringERKNS_4FontEj@plt>
      { return _M_dataplus._M_p; }
  403914:	48 8b bd c0 e2 ff ff 	mov    -0x1d40(%rbp),%rdi
	if (!_M_is_local())
  40391b:	48 8d 85 d0 e2 ff ff 	lea    -0x1d30(%rbp),%rax
  403922:	48 39 c7             	cmp    %rax,%rdi
  403925:	74 14                	je     40393b <main+0x90b>
  403927:	48 8b 85 d0 e2 ff ff 	mov    -0x1d30(%rbp),%rax
  40392e:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403935:	00 
  403936:	e8 e5 e8 ff ff       	call   402220 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  40393b:	48 8d bd e0 e1 ff ff 	lea    -0x1e20(%rbp),%rdi
  403942:	e8 b9 e9 ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
	text.setFillColor(sf::Color(39, 225, 122));
  403947:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  40394d:	b9 7a 00 00 00       	mov    $0x7a,%ecx
  403952:	ba e1 00 00 00       	mov    $0xe1,%edx
  403957:	be 27 00 00 00       	mov    $0x27,%esi
  40395c:	48 8d bd c0 e2 ff ff 	lea    -0x1d40(%rbp),%rdi
  403963:	e8 98 e7 ff ff       	call   402100 <_ZN2sf5ColorC1Ehhhh@plt>
  403968:	48 8d b5 c0 e2 ff ff 	lea    -0x1d40(%rbp),%rsi
  40396f:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  403976:	e8 25 eb ff ff       	call   4024a0 <_ZN2sf4Text12setFillColorERKNS_5ColorE@plt>
	sf::Music typing;
  40397b:	48 8d bd c0 e2 ff ff 	lea    -0x1d40(%rbp),%rdi
  403982:	e8 e9 e6 ff ff       	call   402070 <_ZN2sf5MusicC1Ev@plt>
	if (!typing.openFromFile("/home/de2i-150/Desktop/Projeto-IHS/IHS-Project/ihs-project-layout/app/assets/sounds/typing.ogg"))
  403987:	48 8d 95 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdx
  40398e:	be 20 82 40 00       	mov    $0x408220,%esi
  403993:	48 8d bd e0 e1 ff ff 	lea    -0x1e20(%rbp),%rdi
  40399a:	e8 71 38 00 00       	call   407210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
  40399f:	48 8d b5 e0 e1 ff ff 	lea    -0x1e20(%rbp),%rsi
  4039a6:	48 8d bd c0 e2 ff ff 	lea    -0x1d40(%rbp),%rdi
  4039ad:	e8 ce e6 ff ff       	call   402080 <_ZN2sf5Music12openFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>
      { return _M_dataplus._M_p; }
  4039b2:	48 8b bd e0 e1 ff ff 	mov    -0x1e20(%rbp),%rdi
  4039b9:	89 c3                	mov    %eax,%ebx
	if (!_M_is_local())
  4039bb:	48 8d 85 f0 e1 ff ff 	lea    -0x1e10(%rbp),%rax
  4039c2:	48 39 c7             	cmp    %rax,%rdi
  4039c5:	74 10                	je     4039d7 <main+0x9a7>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4039c7:	48 8b 85 f0 e1 ff ff 	mov    -0x1e10(%rbp),%rax
  4039ce:	48 8d 70 01          	lea    0x1(%rax),%rsi
	::operator delete(__p
  4039d2:	e8 49 e8 ff ff       	call   402220 <_ZdlPvm@plt>
  4039d7:	84 db                	test   %bl,%bl
  4039d9:	0f 84 86 1e 00 00    	je     405865 <main+0x2835>
	sf::String typedtext = "[root@mbois ~] $ Ola, vejo que voce encontrou minha caixa...\n\n[root@mbois ~] $ Espero (ou nao) que voce consiga completar\nos desafios que preparei para hoje.\n\n[root@mbois ~] $ Mas cuidado com o tempo e tente nao perder\na cabeca!!\n\n[root@mbois ~] $ ASS ?";
  4039df:	48 8d bd e0 e1 ff ff 	lea    -0x1e20(%rbp),%rdi
  4039e6:	e8 d5 ea ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  4039eb:	48 8d 95 e0 e1 ff ff 	lea    -0x1e20(%rbp),%rdx
  4039f2:	be a0 82 40 00       	mov    $0x4082a0,%esi
  4039f7:	48 8d bd 00 e1 ff ff 	lea    -0x1f00(%rbp),%rdi
  4039fe:	e8 ed e6 ff ff       	call   4020f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  403a03:	48 8d bd e0 e1 ff ff 	lea    -0x1e20(%rbp),%rdi
  403a0a:	e8 f1 e8 ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
	sf::String challenge1_string = "[root@mbois ~] $ Voce deveria saber matematica";
  403a0f:	48 8d bd e0 e1 ff ff 	lea    -0x1e20(%rbp),%rdi
  403a16:	e8 a5 ea ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  403a1b:	48 8d 95 e0 e1 ff ff 	lea    -0x1e20(%rbp),%rdx
  403a22:	be a0 83 40 00       	mov    $0x4083a0,%esi
  403a27:	48 8d bd 20 e1 ff ff 	lea    -0x1ee0(%rbp),%rdi
  403a2e:	e8 bd e6 ff ff       	call   4020f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  403a33:	48 8d bd e0 e1 ff ff 	lea    -0x1e20(%rbp),%rdi
  403a3a:	e8 c1 e8 ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
	sf::Clock clock_text;
  403a3f:	48 8d bd 70 e0 ff ff 	lea    -0x1f90(%rbp),%rdi
  403a46:	e8 95 e8 ff ff       	call   4022e0 <_ZN2sf5ClockC1Ev@plt>
	sf::Time elapsedtime_text;
  403a4b:	48 8d bd 78 e0 ff ff 	lea    -0x1f88(%rbp),%rdi
  403a52:	e8 f9 e5 ff ff       	call   402050 <_ZN2sf4TimeC1Ev@plt>
	sf::Clock temp_clock;
  403a57:	48 8d bd 80 e0 ff ff 	lea    -0x1f80(%rbp),%rdi
  403a5e:	e8 7d e8 ff ff       	call   4022e0 <_ZN2sf5ClockC1Ev@plt>
	sf::Time temp_time;
  403a63:	48 8d bd 88 e0 ff ff 	lea    -0x1f78(%rbp),%rdi
  403a6a:	e8 e1 e5 ff ff       	call   402050 <_ZN2sf4TimeC1Ev@plt>
	sf::Clock clock_bomb;
  403a6f:	48 8d bd 90 e0 ff ff 	lea    -0x1f70(%rbp),%rdi
  403a76:	e8 65 e8 ff ff       	call   4022e0 <_ZN2sf5ClockC1Ev@plt>
	sf::Time time_bomb;
  403a7b:	48 8d bd 98 e0 ff ff 	lea    -0x1f68(%rbp),%rdi
  403a82:	e8 c9 e5 ff ff       	call   402050 <_ZN2sf4TimeC1Ev@plt>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  403a87:	48 8d 85 50 e1 ff ff 	lea    -0x1eb0(%rbp),%rax
	unsigned int oldSwitches = 0x0AA15;
  403a8e:	bb 15 aa 00 00       	mov    $0xaa15,%ebx
      { _M_string_length = __length; }
  403a93:	48 c7 85 48 e1 ff ff 	movq   $0x0,-0x1eb8(%rbp)
  403a9a:	00 00 00 00 
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  403a9e:	48 89 85 40 e1 ff ff 	mov    %rax,-0x1ec0(%rbp)
  403aa5:	48 8d 85 70 e1 ff ff 	lea    -0x1e90(%rbp),%rax
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { __c1 = __c2; }
  403aac:	c6 85 50 e1 ff ff 00 	movb   $0x0,-0x1eb0(%rbp)
  403ab3:	48 89 85 60 e1 ff ff 	mov    %rax,-0x1ea0(%rbp)
      { _M_string_length = __length; }
  403aba:	48 c7 85 68 e1 ff ff 	movq   $0x0,-0x1e98(%rbp)
  403ac1:	00 00 00 00 
  403ac5:	c6 85 70 e1 ff ff 00 	movb   $0x0,-0x1e90(%rbp)
	int flag_correct = 1;
  403acc:	c7 85 f8 df ff ff 01 	movl   $0x1,-0x2008(%rbp)
  403ad3:	00 00 00 
	int flag = 1;
  403ad6:	c7 85 0c e0 ff ff 01 	movl   $0x1,-0x1ff4(%rbp)
  403add:	00 00 00 
	int old_button = 0xF;
  403ae0:	c7 85 fc df ff ff 0f 	movl   $0xf,-0x2004(%rbp)
  403ae7:	00 00 00 
	unsigned int switches = 0x00000;
  403aea:	c7 85 18 e0 ff ff 00 	movl   $0x0,-0x1fe8(%rbp)
  403af1:	00 00 00 
	int screen = 0;
  403af4:	c7 85 1c e0 ff ff 00 	movl   $0x0,-0x1fe4(%rbp)
  403afb:	00 00 00 
  403afe:	66 90                	xchg   %ax,%ax
	while (window.isOpen())
  403b00:	48 8d bd c0 fd ff ff 	lea    -0x240(%rbp),%rdi
  403b07:	e8 34 e7 ff ff       	call   402240 <_ZNK2sf6Window6isOpenEv@plt>
  403b0c:	84 c0                	test   %al,%al
  403b0e:	75 16                	jne    403b26 <main+0xaf6>
  403b10:	e9 12 1a 00 00       	jmp    405527 <main+0x24f7>
  403b15:	0f 1f 00             	nopl   (%rax)
			if (event.type == sf::Event::Closed)
  403b18:	8b b5 c0 e0 ff ff    	mov    -0x1f40(%rbp),%esi
  403b1e:	85 f6                	test   %esi,%esi
  403b20:	0f 84 4a 0c 00 00    	je     404770 <main+0x1740>
		while (window.pollEvent(event))
  403b26:	48 8d b5 c0 e0 ff ff 	lea    -0x1f40(%rbp),%rsi
  403b2d:	48 8d bd c0 fd ff ff 	lea    -0x240(%rbp),%rdi
  403b34:	e8 a7 e6 ff ff       	call   4021e0 <_ZN2sf6Window9pollEventERNS_5EventE@plt>
  403b39:	84 c0                	test   %al,%al
  403b3b:	75 db                	jne    403b18 <main+0xae8>
		window.clear(sf::Color(48, 49, 52));
  403b3d:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  403b43:	b9 34 00 00 00       	mov    $0x34,%ecx
  403b48:	ba 31 00 00 00       	mov    $0x31,%edx
  403b4d:	be 30 00 00 00       	mov    $0x30,%esi
  403b52:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  403b59:	e8 a2 e5 ff ff       	call   402100 <_ZN2sf5ColorC1Ehhhh@plt>
  403b5e:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  403b65:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  403b6c:	e8 0f e6 ff ff       	call   402180 <_ZN2sf12RenderTarget5clearERKNS_5ColorE@plt>
		if(screen == 0){
  403b71:	8b 85 1c e0 ff ff    	mov    -0x1fe4(%rbp),%eax
  403b77:	85 c0                	test   %eax,%eax
  403b79:	0f 84 09 0c 00 00    	je     404788 <main+0x1758>
		if (screen != 1 && screen != 6)
  403b7f:	83 f8 01             	cmp    $0x1,%eax
  403b82:	74 56                	je     403bda <main+0xbaa>
  403b84:	83 f8 06             	cmp    $0x6,%eax
  403b87:	74 51                	je     403bda <main+0xbaa>
			time_bomb = clock_bomb.getElapsedTime();
  403b89:	48 8d bd 90 e0 ff ff 	lea    -0x1f70(%rbp),%rdi
  403b90:	e8 0b e8 ff ff       	call   4023a0 <_ZNK2sf5Clock14getElapsedTimeEv@plt>
			seconds = 300 - time_bomb.asSeconds();
  403b95:	48 8d bd 98 e0 ff ff 	lea    -0x1f68(%rbp),%rdi
			time_bomb = clock_bomb.getElapsedTime();
  403b9c:	48 89 85 98 e0 ff ff 	mov    %rax,-0x1f68(%rbp)
			seconds = 300 - time_bomb.asSeconds();
  403ba3:	e8 88 e8 ff ff       	call   402430 <_ZNK2sf4Time9asSecondsEv@plt>
  403ba8:	0f 28 c8             	movaps %xmm0,%xmm1
  403bab:	f3 0f 10 05 85 4a 00 	movss  0x4a85(%rip),%xmm0        # 408638 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x158>
  403bb2:	00 
			int_to_string(fd, seconds, min_string, sec_string);		
  403bb3:	48 8d 8d 40 e1 ff ff 	lea    -0x1ec0(%rbp),%rcx
  403bba:	44 89 ff             	mov    %r15d,%edi
  403bbd:	48 8d 95 60 e1 ff ff 	lea    -0x1ea0(%rbp),%rdx
			seconds = 300 - time_bomb.asSeconds();
  403bc4:	f3 0f 5c c1          	subss  %xmm1,%xmm0
  403bc8:	f3 4c 0f 2c f0       	cvttss2si %xmm0,%r14
  403bcd:	44 89 f6             	mov    %r14d,%esi
			int_to_string(fd, seconds, min_string, sec_string);		
  403bd0:	e8 3b 2d 00 00       	call   406910 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
			if (seconds <= 0)
  403bd5:	45 85 f6             	test   %r14d,%r14d
  403bd8:	74 16                	je     403bf0 <main+0xbc0>
		switch (screen) {
  403bda:	8b 85 1c e0 ff ff    	mov    -0x1fe4(%rbp),%eax
  403be0:	83 f8 06             	cmp    $0x6,%eax
  403be3:	0f 87 74 01 00 00    	ja     403d5d <main+0xd2d>
  403be9:	ff 24 c5 40 81 40 00 	jmp    *0x408140(,%rax,8)
				text.setString("");
  403bf0:	4c 8d b5 a0 e1 ff ff 	lea    -0x1e60(%rbp),%r14
  403bf7:	4c 89 f7             	mov    %r14,%rdi
  403bfa:	e8 c1 e8 ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  403bff:	4c 89 f2             	mov    %r14,%rdx
  403c02:	be d5 80 40 00       	mov    $0x4080d5,%esi
  403c07:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  403c0e:	e8 dd e4 ff ff       	call   4020f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  403c13:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  403c1a:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  403c21:	e8 3a e8 ff ff       	call   402460 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  403c26:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  403c2d:	48 8d 85 d0 e1 ff ff 	lea    -0x1e30(%rbp),%rax
  403c34:	48 89 85 20 e0 ff ff 	mov    %rax,-0x1fe0(%rbp)
  403c3b:	48 39 c7             	cmp    %rax,%rdi
  403c3e:	74 14                	je     403c54 <main+0xc24>
  403c40:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  403c47:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403c4e:	00 
  403c4f:	e8 cc e5 ff ff       	call   402220 <_ZdlPvm@plt>
  403c54:	4c 89 f7             	mov    %r14,%rdi
  403c57:	e8 a4 e6 ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
				typedtext.insert(0, "BOOM!!!");
  403c5c:	4c 89 f7             	mov    %r14,%rdi
  403c5f:	e8 5c e8 ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  403c64:	4c 89 f2             	mov    %r14,%rdx
  403c67:	be a6 80 40 00       	mov    $0x4080a6,%esi
  403c6c:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  403c73:	e8 78 e4 ff ff       	call   4020f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  403c78:	48 8d 95 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdx
  403c7f:	31 f6                	xor    %esi,%esi
  403c81:	48 8d bd 00 e1 ff ff 	lea    -0x1f00(%rbp),%rdi
  403c88:	e8 23 e5 ff ff       	call   4021b0 <_ZN2sf6String6insertEmRKS0_@plt>
      { return _M_dataplus._M_p; }
  403c8d:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  403c94:	48 3b bd 20 e0 ff ff 	cmp    -0x1fe0(%rbp),%rdi
  403c9b:	74 14                	je     403cb1 <main+0xc81>
  403c9d:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  403ca4:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403cab:	00 
  403cac:	e8 6f e5 ff ff       	call   402220 <_ZdlPvm@plt>
  403cb1:	4c 89 f7             	mov    %r14,%rdi
  403cb4:	e8 47 e6 ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
				clock_text.restart();
  403cb9:	48 8d bd 70 e0 ff ff 	lea    -0x1f90(%rbp),%rdi
  403cc0:	e8 0b e7 ff ff       	call   4023d0 <_ZN2sf5Clock7restartEv@plt>
				elapsedtime_text += clock_text.restart();
  403cc5:	48 8d bd 70 e0 ff ff 	lea    -0x1f90(%rbp),%rdi
  403ccc:	e8 ff e6 ff ff       	call   4023d0 <_ZN2sf5Clock7restartEv@plt>
  403cd1:	48 89 c6             	mov    %rax,%rsi
  403cd4:	48 8d bd 78 e0 ff ff 	lea    -0x1f88(%rbp),%rdi
  403cdb:	e8 e0 e6 ff ff       	call   4023c0 <_ZN2sfpLERNS_4TimeES0_@plt>
  403ce0:	44 8b 35 5d 49 00 00 	mov    0x495d(%rip),%r14d        # 408644 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x164>
  403ce7:	eb 35                	jmp    403d1e <main+0xcee>
  403ce9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
					elapsedtime_text -= sf::seconds(.1f);
  403cf0:	66 41 0f 6e c6       	movd   %r14d,%xmm0
  403cf5:	e8 56 e4 ff ff       	call   402150 <_ZN2sf7secondsEf@plt>
  403cfa:	48 89 c6             	mov    %rax,%rsi
  403cfd:	48 8d bd 78 e0 ff ff 	lea    -0x1f88(%rbp),%rdi
  403d04:	e8 f7 e6 ff ff       	call   402400 <_ZN2sfmIERNS_4TimeES0_@plt>
					if (typedtext.getSize() > 0)
  403d09:	48 8d bd 00 e1 ff ff 	lea    -0x1f00(%rbp),%rdi
  403d10:	e8 4b e6 ff ff       	call   402360 <_ZNK2sf6String7getSizeEv@plt>
  403d15:	48 85 c0             	test   %rax,%rax
  403d18:	0f 85 6a 0f 00 00    	jne    404c88 <main+0x1c58>
				while (elapsedtime_text >= sf::seconds(.1f))
  403d1e:	66 41 0f 6e c6       	movd   %r14d,%xmm0
  403d23:	e8 28 e4 ff ff       	call   402150 <_ZN2sf7secondsEf@plt>
  403d28:	48 8b bd 78 e0 ff ff 	mov    -0x1f88(%rbp),%rdi
  403d2f:	48 89 c6             	mov    %rax,%rsi
  403d32:	e8 69 e5 ff ff       	call   4022a0 <_ZN2sfgeENS_4TimeES0_@plt>
  403d37:	84 c0                	test   %al,%al
  403d39:	75 b5                	jne    403cf0 <main+0xcc0>
				window.draw(text);
  403d3b:	ba 80 b2 40 00       	mov    $0x40b280,%edx
  403d40:	48 8d b5 50 fc ff ff 	lea    -0x3b0(%rbp),%rsi
  403d47:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  403d4e:	e8 9d e6 ff ff       	call   4023f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
  403d53:	c7 85 1c e0 ff ff 06 	movl   $0x6,-0x1fe4(%rbp)
  403d5a:	00 00 00 
		window.display();
  403d5d:	48 8d bd c0 fd ff ff 	lea    -0x240(%rbp),%rdi
  403d64:	e8 67 e5 ff ff       	call   4022d0 <_ZN2sf6Window7displayEv@plt>
  403d69:	e9 92 fd ff ff       	jmp    403b00 <main+0xad0>
				elapsedtime_text += clock_text.restart();
  403d6e:	48 8d bd 70 e0 ff ff 	lea    -0x1f90(%rbp),%rdi
  403d75:	e8 56 e6 ff ff       	call   4023d0 <_ZN2sf5Clock7restartEv@plt>
  403d7a:	48 89 c6             	mov    %rax,%rsi
  403d7d:	48 8d bd 78 e0 ff ff 	lea    -0x1f88(%rbp),%rdi
  403d84:	e8 37 e6 ff ff       	call   4023c0 <_ZN2sfpLERNS_4TimeES0_@plt>
  403d89:	44 8b 35 b4 48 00 00 	mov    0x48b4(%rip),%r14d        # 408644 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x164>
  403d90:	eb 34                	jmp    403dc6 <main+0xd96>
  403d92:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
					elapsedtime_text -= sf::seconds(.1f);
  403d98:	66 41 0f 6e c6       	movd   %r14d,%xmm0
  403d9d:	e8 ae e3 ff ff       	call   402150 <_ZN2sf7secondsEf@plt>
  403da2:	48 89 c6             	mov    %rax,%rsi
  403da5:	48 8d bd 78 e0 ff ff 	lea    -0x1f88(%rbp),%rdi
  403dac:	e8 4f e6 ff ff       	call   402400 <_ZN2sfmIERNS_4TimeES0_@plt>
					if (typedtext.getSize() > 0)
  403db1:	48 8d bd 00 e1 ff ff 	lea    -0x1f00(%rbp),%rdi
  403db8:	e8 a3 e5 ff ff       	call   402360 <_ZNK2sf6String7getSizeEv@plt>
  403dbd:	48 85 c0             	test   %rax,%rax
  403dc0:	0f 85 ae 15 00 00    	jne    405374 <main+0x2344>
				while (elapsedtime_text >= sf::seconds(.1f))
  403dc6:	66 41 0f 6e c6       	movd   %r14d,%xmm0
  403dcb:	e8 80 e3 ff ff       	call   402150 <_ZN2sf7secondsEf@plt>
  403dd0:	48 8b bd 78 e0 ff ff 	mov    -0x1f88(%rbp),%rdi
  403dd7:	48 89 c6             	mov    %rax,%rsi
  403dda:	e8 c1 e4 ff ff       	call   4022a0 <_ZN2sfgeENS_4TimeES0_@plt>
  403ddf:	84 c0                	test   %al,%al
  403de1:	75 b5                	jne    403d98 <main+0xd68>
				window.draw(text);
  403de3:	ba 80 b2 40 00       	mov    $0x40b280,%edx
  403de8:	48 8d b5 50 fc ff ff 	lea    -0x3b0(%rbp),%rsi
  403def:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  403df6:	e8 f5 e5 ff ff       	call   4023f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				int seqGreenLeds[BUTTON_AMOUNT] = {48, 12, 192, 48, 3, 48}; // 2^4+2^5, 2^2+2^3, 2^6+2^7, 2^0+2^1
  403dfb:	66 0f 6f 25 ed 47 00 	movdqa 0x47ed(%rip),%xmm4        # 4085f0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x110>
  403e02:	00 
  403e03:	48 8b 05 be 47 00 00 	mov    0x47be(%rip),%rax        # 4085c8 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe8>
				temp_time = temp_clock.getElapsedTime();
  403e0a:	48 8d bd 80 e0 ff ff 	lea    -0x1f80(%rbp),%rdi
				int seqGreenLeds[BUTTON_AMOUNT] = {48, 12, 192, 48, 3, 48}; // 2^4+2^5, 2^2+2^3, 2^6+2^7, 2^0+2^1
  403e11:	48 89 85 90 e1 ff ff 	mov    %rax,-0x1e70(%rbp)
  403e18:	0f 29 a5 80 e1 ff ff 	movaps %xmm4,-0x1e80(%rbp)
				temp_time = temp_clock.getElapsedTime();
  403e1f:	e8 7c e5 ff ff       	call   4023a0 <_ZNK2sf5Clock14getElapsedTimeEv@plt>
				if(temp_time >= sf::seconds(3.0f) && i < BUTTON_AMOUNT && flag){
  403e24:	f3 0f 10 05 1c 48 00 	movss  0x481c(%rip),%xmm0        # 408648 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x168>
  403e2b:	00 
				temp_time = temp_clock.getElapsedTime();
  403e2c:	48 89 85 88 e0 ff ff 	mov    %rax,-0x1f78(%rbp)
				if(temp_time >= sf::seconds(3.0f) && i < BUTTON_AMOUNT && flag){
  403e33:	e8 18 e3 ff ff       	call   402150 <_ZN2sf7secondsEf@plt>
  403e38:	48 8b bd 88 e0 ff ff 	mov    -0x1f78(%rbp),%rdi
  403e3f:	48 89 c6             	mov    %rax,%rsi
  403e42:	e8 59 e4 ff ff       	call   4022a0 <_ZN2sfgeENS_4TimeES0_@plt>
  403e47:	0f b6 95 0c e0 ff ff 	movzbl -0x1ff4(%rbp),%edx
  403e4e:	84 c0                	test   %al,%al
  403e50:	0f 85 a4 19 00 00    	jne    4057fa <main+0x27ca>
				else if (i >= BUTTON_AMOUNT && flag && temp_time >= sf::seconds(3.0f)){
  403e56:	83 bd 08 e0 ff ff 05 	cmpl   $0x5,-0x1ff8(%rbp)
  403e5d:	7e 08                	jle    403e67 <main+0xe37>
  403e5f:	84 d2                	test   %dl,%dl
  403e61:	0f 85 fd 1e 00 00    	jne    405d64 <main+0x2d34>
				int answer[BUTTON_AMOUNT] = {11, 13, 7, 11, 14, 11}; // 0xB, 0xD, 0x7, 0xE
  403e67:	48 8b 05 62 47 00 00 	mov    0x4762(%rip),%rax        # 4085d0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xf0>
  403e6e:	66 0f 6f 2d 8a 47 00 	movdqa 0x478a(%rip),%xmm5        # 408600 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x120>
  403e75:	00 
	ioctl(fd, RD_PBUTTONS);
  403e76:	be 62 61 00 00       	mov    $0x6162,%esi
  403e7b:	44 89 ff             	mov    %r15d,%edi
				int answer[BUTTON_AMOUNT] = {11, 13, 7, 11, 14, 11}; // 0xB, 0xD, 0x7, 0xE
  403e7e:	48 89 85 b0 e1 ff ff 	mov    %rax,-0x1e50(%rbp)
				int button = readButton(fd, button);
  403e85:	8b 85 04 e0 ff ff    	mov    -0x1ffc(%rbp),%eax
				int answer[BUTTON_AMOUNT] = {11, 13, 7, 11, 14, 11}; // 0xB, 0xD, 0x7, 0xE
  403e8b:	0f 29 ad a0 e1 ff ff 	movaps %xmm5,-0x1e60(%rbp)
  403e92:	89 85 a8 e0 ff ff    	mov    %eax,-0x1f58(%rbp)
	ioctl(fd, RD_PBUTTONS);
  403e98:	31 c0                	xor    %eax,%eax
  403e9a:	e8 51 e4 ff ff       	call   4022f0 <ioctl@plt>
	read(fd, &data, 1);
  403e9f:	48 8d 85 a8 e0 ff ff 	lea    -0x1f58(%rbp),%rax
  403ea6:	ba 01 00 00 00       	mov    $0x1,%edx
  403eab:	44 89 ff             	mov    %r15d,%edi
  403eae:	48 89 c6             	mov    %rax,%rsi
  403eb1:	48 89 85 30 e0 ff ff 	mov    %rax,-0x1fd0(%rbp)
  403eb8:	e8 63 e4 ff ff       	call   402320 <read@plt>
	return data;
  403ebd:	8b 8d a8 e0 ff ff    	mov    -0x1f58(%rbp),%ecx
  403ec3:	89 8d 04 e0 ff ff    	mov    %ecx,-0x1ffc(%rbp)
				if(button != 0xF && button != old_button && j < BUTTON_AMOUNT){
  403ec9:	83 f9 0f             	cmp    $0xf,%ecx
  403ecc:	0f 84 67 1e 00 00    	je     405d39 <main+0x2d09>
  403ed2:	39 8d fc df ff ff    	cmp    %ecx,-0x2004(%rbp)
  403ed8:	0f 84 5b 1e 00 00    	je     405d39 <main+0x2d09>
  403ede:	8b 95 00 e0 ff ff    	mov    -0x2000(%rbp),%edx
  403ee4:	83 fa 06             	cmp    $0x6,%edx
  403ee7:	0f 85 33 1e 00 00    	jne    405d20 <main+0x2cf0>
					printf("%d %d %d %d %d %d\n", input[0], input[1], input[2], input[3], input[4], input[5]);
  403eed:	8b 85 f4 e0 ff ff    	mov    -0x1f0c(%rbp),%eax
  403ef3:	51                   	push   %rcx
  403ef4:	bf c3 80 40 00       	mov    $0x4080c3,%edi
  403ef9:	44 8b 8d f0 e0 ff ff 	mov    -0x1f10(%rbp),%r9d
  403f00:	44 8b 85 ec e0 ff ff 	mov    -0x1f14(%rbp),%r8d
  403f07:	8b 8d e8 e0 ff ff    	mov    -0x1f18(%rbp),%ecx
  403f0d:	8b 95 e4 e0 ff ff    	mov    -0x1f1c(%rbp),%edx
  403f13:	50                   	push   %rax
  403f14:	31 c0                	xor    %eax,%eax
  403f16:	8b b5 e0 e0 ff ff    	mov    -0x1f20(%rbp),%esi
  403f1c:	e8 1f e1 ff ff       	call   402040 <printf@plt>
  403f21:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
  403f28:	58                   	pop    %rax
  403f29:	4c 8d b5 a0 e1 ff ff 	lea    -0x1e60(%rbp),%r14
  403f30:	31 c0                	xor    %eax,%eax
  403f32:	5a                   	pop    %rdx
						if(answer[k] != input[k]){
  403f33:	41 8b 34 06          	mov    (%r14,%rax,1),%esi
  403f37:	8b 94 05 e0 e0 ff ff 	mov    -0x1f20(%rbp,%rax,1),%edx
  403f3e:	39 d6                	cmp    %edx,%esi
  403f40:	0f 85 11 1f 00 00    	jne    405e57 <main+0x2e27>
					for (int k = 0; k < BUTTON_AMOUNT; k++){
  403f46:	48 83 c0 04          	add    $0x4,%rax
  403f4a:	48 83 f8 18          	cmp    $0x18,%rax
  403f4e:	75 e3                	jne    403f33 <main+0xf03>
					if(flag_correct){
  403f50:	83 bd f8 df ff ff 00 	cmpl   $0x0,-0x2008(%rbp)
  403f57:	48 89 bd 30 e0 ff ff 	mov    %rdi,-0x1fd0(%rbp)
  403f5e:	c7 85 00 e0 ff ff 06 	movl   $0x6,-0x2000(%rbp)
  403f65:	00 00 00 
  403f68:	0f 84 ef fd ff ff    	je     403d5d <main+0xd2d>
						text.setString("");
  403f6e:	49 89 fe             	mov    %rdi,%r14
  403f71:	e8 4a e5 ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  403f76:	4c 89 f2             	mov    %r14,%rdx
  403f79:	be d5 80 40 00       	mov    $0x4080d5,%esi
  403f7e:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  403f85:	e8 66 e1 ff ff       	call   4020f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  403f8a:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  403f91:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  403f98:	e8 c3 e4 ff ff       	call   402460 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  403f9d:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  403fa4:	48 8d 85 d0 e1 ff ff 	lea    -0x1e30(%rbp),%rax
  403fab:	48 89 85 20 e0 ff ff 	mov    %rax,-0x1fe0(%rbp)
  403fb2:	48 39 c7             	cmp    %rax,%rdi
  403fb5:	74 14                	je     403fcb <main+0xf9b>
  403fb7:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  403fbe:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  403fc5:	00 
  403fc6:	e8 55 e2 ff ff       	call   402220 <_ZdlPvm@plt>
  403fcb:	4c 8b b5 30 e0 ff ff 	mov    -0x1fd0(%rbp),%r14
  403fd2:	4c 89 f7             	mov    %r14,%rdi
  403fd5:	e8 26 e3 ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
						typedtext.insert(0, "Quarta fase");
  403fda:	4c 89 f7             	mov    %r14,%rdi
  403fdd:	e8 de e4 ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  403fe2:	4c 89 f2             	mov    %r14,%rdx
  403fe5:	be e3 80 40 00       	mov    $0x4080e3,%esi
  403fea:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  403ff1:	e8 fa e0 ff ff       	call   4020f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  403ff6:	48 8d 95 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdx
  403ffd:	31 f6                	xor    %esi,%esi
  403fff:	48 8d bd 00 e1 ff ff 	lea    -0x1f00(%rbp),%rdi
  404006:	e8 a5 e1 ff ff       	call   4021b0 <_ZN2sf6String6insertEmRKS0_@plt>
      { return _M_dataplus._M_p; }
  40400b:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  404012:	48 3b bd 20 e0 ff ff 	cmp    -0x1fe0(%rbp),%rdi
  404019:	74 14                	je     40402f <main+0xfff>
  40401b:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  404022:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  404029:	00 
  40402a:	e8 f1 e1 ff ff       	call   402220 <_ZdlPvm@plt>
  40402f:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
  404036:	e8 c5 e2 ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
						clock_text.restart();
  40403b:	48 8d bd 70 e0 ff ff 	lea    -0x1f90(%rbp),%rdi
  404042:	e8 89 e3 ff ff       	call   4023d0 <_ZN2sf5Clock7restartEv@plt>
  404047:	c7 85 00 e0 ff ff 06 	movl   $0x6,-0x2000(%rbp)
  40404e:	00 00 00 
						screen = 5;
  404051:	c7 85 1c e0 ff ff 05 	movl   $0x5,-0x1fe4(%rbp)
  404058:	00 00 00 
  40405b:	e9 fd fc ff ff       	jmp    403d5d <main+0xd2d>
				elapsedtime_text += clock_text.restart();
  404060:	48 8d bd 70 e0 ff ff 	lea    -0x1f90(%rbp),%rdi
  404067:	e8 64 e3 ff ff       	call   4023d0 <_ZN2sf5Clock7restartEv@plt>
  40406c:	48 89 c6             	mov    %rax,%rsi
  40406f:	48 8d bd 78 e0 ff ff 	lea    -0x1f88(%rbp),%rdi
  404076:	e8 45 e3 ff ff       	call   4023c0 <_ZN2sfpLERNS_4TimeES0_@plt>
  40407b:	44 8b 35 c2 45 00 00 	mov    0x45c2(%rip),%r14d        # 408644 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x164>
  404082:	eb 32                	jmp    4040b6 <main+0x1086>
  404084:	0f 1f 40 00          	nopl   0x0(%rax)
					elapsedtime_text -= sf::seconds(.1f);
  404088:	66 41 0f 6e c6       	movd   %r14d,%xmm0
  40408d:	e8 be e0 ff ff       	call   402150 <_ZN2sf7secondsEf@plt>
  404092:	48 89 c6             	mov    %rax,%rsi
  404095:	48 8d bd 78 e0 ff ff 	lea    -0x1f88(%rbp),%rdi
  40409c:	e8 5f e3 ff ff       	call   402400 <_ZN2sfmIERNS_4TimeES0_@plt>
					if (typedtext.getSize() > 0)
  4040a1:	48 8d bd 00 e1 ff ff 	lea    -0x1f00(%rbp),%rdi
  4040a8:	e8 b3 e2 ff ff       	call   402360 <_ZNK2sf6String7getSizeEv@plt>
  4040ad:	48 85 c0             	test   %rax,%rax
  4040b0:	0f 85 0b 11 00 00    	jne    4051c1 <main+0x2191>
				while (elapsedtime_text >= sf::seconds(.1f))
  4040b6:	66 41 0f 6e c6       	movd   %r14d,%xmm0
  4040bb:	e8 90 e0 ff ff       	call   402150 <_ZN2sf7secondsEf@plt>
  4040c0:	48 8b bd 78 e0 ff ff 	mov    -0x1f88(%rbp),%rdi
  4040c7:	48 89 c6             	mov    %rax,%rsi
  4040ca:	e8 d1 e1 ff ff       	call   4022a0 <_ZN2sfgeENS_4TimeES0_@plt>
  4040cf:	84 c0                	test   %al,%al
  4040d1:	75 b5                	jne    404088 <main+0x1058>
				window.draw(text);
  4040d3:	ba 80 b2 40 00       	mov    $0x40b280,%edx
  4040d8:	48 8d b5 50 fc ff ff 	lea    -0x3b0(%rbp),%rsi
  4040df:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  4040e6:	e8 05 e3 ff ff       	call   4023f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square1);
  4040eb:	ba 80 b2 40 00       	mov    $0x40b280,%edx
  4040f0:	48 8d b5 90 e3 ff ff 	lea    -0x1c70(%rbp),%rsi
  4040f7:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  4040fe:	e8 ed e2 ff ff       	call   4023f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square2);
  404103:	ba 80 b2 40 00       	mov    $0x40b280,%edx
  404108:	48 8d b5 f0 e4 ff ff 	lea    -0x1b10(%rbp),%rsi
  40410f:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  404116:	e8 d5 e2 ff ff       	call   4023f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square3);
  40411b:	ba 80 b2 40 00       	mov    $0x40b280,%edx
  404120:	48 8d b5 50 e6 ff ff 	lea    -0x19b0(%rbp),%rsi
  404127:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  40412e:	e8 bd e2 ff ff       	call   4023f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square4);
  404133:	ba 80 b2 40 00       	mov    $0x40b280,%edx
  404138:	48 8d b5 b0 e7 ff ff 	lea    -0x1850(%rbp),%rsi
  40413f:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  404146:	e8 a5 e2 ff ff       	call   4023f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square5);
  40414b:	ba 80 b2 40 00       	mov    $0x40b280,%edx
  404150:	48 8d b5 10 e9 ff ff 	lea    -0x16f0(%rbp),%rsi
  404157:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  40415e:	e8 8d e2 ff ff       	call   4023f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square6);
  404163:	ba 80 b2 40 00       	mov    $0x40b280,%edx
  404168:	48 8d b5 70 ea ff ff 	lea    -0x1590(%rbp),%rsi
  40416f:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  404176:	e8 75 e2 ff ff       	call   4023f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square7);
  40417b:	ba 80 b2 40 00       	mov    $0x40b280,%edx
  404180:	48 8d b5 d0 eb ff ff 	lea    -0x1430(%rbp),%rsi
  404187:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  40418e:	e8 5d e2 ff ff       	call   4023f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square8);
  404193:	ba 80 b2 40 00       	mov    $0x40b280,%edx
  404198:	48 8d b5 30 ed ff ff 	lea    -0x12d0(%rbp),%rsi
  40419f:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  4041a6:	e8 45 e2 ff ff       	call   4023f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square9);
  4041ab:	ba 80 b2 40 00       	mov    $0x40b280,%edx
  4041b0:	48 8d b5 90 ee ff ff 	lea    -0x1170(%rbp),%rsi
  4041b7:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  4041be:	e8 2d e2 ff ff       	call   4023f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square10);
  4041c3:	ba 80 b2 40 00       	mov    $0x40b280,%edx
  4041c8:	48 8d b5 f0 ef ff ff 	lea    -0x1010(%rbp),%rsi
  4041cf:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  4041d6:	e8 15 e2 ff ff       	call   4023f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square11);
  4041db:	ba 80 b2 40 00       	mov    $0x40b280,%edx
  4041e0:	48 8d b5 50 f1 ff ff 	lea    -0xeb0(%rbp),%rsi
  4041e7:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  4041ee:	e8 fd e1 ff ff       	call   4023f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square12);
  4041f3:	ba 80 b2 40 00       	mov    $0x40b280,%edx
  4041f8:	48 8d b5 b0 f2 ff ff 	lea    -0xd50(%rbp),%rsi
  4041ff:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  404206:	e8 e5 e1 ff ff       	call   4023f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square13);
  40420b:	ba 80 b2 40 00       	mov    $0x40b280,%edx
  404210:	48 8d b5 10 f4 ff ff 	lea    -0xbf0(%rbp),%rsi
  404217:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  40421e:	e8 cd e1 ff ff       	call   4023f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square14);
  404223:	ba 80 b2 40 00       	mov    $0x40b280,%edx
  404228:	48 8d b5 70 f5 ff ff 	lea    -0xa90(%rbp),%rsi
  40422f:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  404236:	e8 b5 e1 ff ff       	call   4023f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square15);
  40423b:	ba 80 b2 40 00       	mov    $0x40b280,%edx
  404240:	48 8d b5 d0 f6 ff ff 	lea    -0x930(%rbp),%rsi
  404247:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  40424e:	e8 9d e1 ff ff       	call   4023f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square16);
  404253:	ba 80 b2 40 00       	mov    $0x40b280,%edx
  404258:	48 8d b5 30 f8 ff ff 	lea    -0x7d0(%rbp),%rsi
  40425f:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  404266:	e8 85 e1 ff ff       	call   4023f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square17);
  40426b:	ba 80 b2 40 00       	mov    $0x40b280,%edx
  404270:	48 8d b5 90 f9 ff ff 	lea    -0x670(%rbp),%rsi
  404277:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  40427e:	e8 6d e1 ff ff       	call   4023f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				window.draw(square18);
  404283:	ba 80 b2 40 00       	mov    $0x40b280,%edx
  404288:	48 8d b5 f0 fa ff ff 	lea    -0x510(%rbp),%rsi
  40428f:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  404296:	e8 55 e1 ff ff       	call   4023f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				switches = readSwitch(fd, switches);
  40429b:	8b 85 18 e0 ff ff    	mov    -0x1fe8(%rbp),%eax
	ioctl(fd, RD_SWITCHES);
  4042a1:	be 61 61 00 00       	mov    $0x6161,%esi
  4042a6:	44 89 ff             	mov    %r15d,%edi
  4042a9:	89 85 60 e0 ff ff    	mov    %eax,-0x1fa0(%rbp)
  4042af:	31 c0                	xor    %eax,%eax
  4042b1:	e8 3a e0 ff ff       	call   4022f0 <ioctl@plt>
	read(fd, &data, 3);
  4042b6:	ba 03 00 00 00       	mov    $0x3,%edx
  4042bb:	48 8d b5 60 e0 ff ff 	lea    -0x1fa0(%rbp),%rsi
  4042c2:	44 89 ff             	mov    %r15d,%edi
  4042c5:	e8 56 e0 ff ff       	call   402320 <read@plt>
	return data;
  4042ca:	44 8b b5 60 e0 ff ff 	mov    -0x1fa0(%rbp),%r14d
	ioctl(fd, WR_RED_LEDS);
  4042d1:	be 65 61 00 00       	mov    $0x6165,%esi
  4042d6:	44 89 ff             	mov    %r15d,%edi
  4042d9:	31 c0                	xor    %eax,%eax
	return data;
  4042db:	44 89 b5 18 e0 ff ff 	mov    %r14d,-0x1fe8(%rbp)
				writeRedLed(fd, switches);
  4042e2:	44 89 b5 64 e0 ff ff 	mov    %r14d,-0x1f9c(%rbp)
	ioctl(fd, WR_RED_LEDS);
  4042e9:	e8 02 e0 ff ff       	call   4022f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  4042ee:	ba 04 00 00 00       	mov    $0x4,%edx
  4042f3:	48 8d b5 64 e0 ff ff 	lea    -0x1f9c(%rbp),%rsi
  4042fa:	44 89 ff             	mov    %r15d,%edi
  4042fd:	e8 de dd ff ff       	call   4020e0 <write@plt>
				if(switches == 0x0AA15){
  404302:	41 81 fe 15 aa 00 00 	cmp    $0xaa15,%r14d
  404309:	0f 85 4e fa ff ff    	jne    403d5d <main+0xd2d>
					text.setString("");
  40430f:	4c 8d b5 a0 e1 ff ff 	lea    -0x1e60(%rbp),%r14
  404316:	4c 89 f7             	mov    %r14,%rdi
  404319:	e8 a2 e1 ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  40431e:	4c 89 f2             	mov    %r14,%rdx
  404321:	be d5 80 40 00       	mov    $0x4080d5,%esi
  404326:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  40432d:	e8 be dd ff ff       	call   4020f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  404332:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  404339:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  404340:	e8 1b e1 ff ff       	call   402460 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  404345:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  40434c:	48 8d 85 d0 e1 ff ff 	lea    -0x1e30(%rbp),%rax
  404353:	48 89 85 20 e0 ff ff 	mov    %rax,-0x1fe0(%rbp)
  40435a:	48 39 c7             	cmp    %rax,%rdi
  40435d:	74 14                	je     404373 <main+0x1343>
  40435f:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  404366:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  40436d:	00 
  40436e:	e8 ad de ff ff       	call   402220 <_ZdlPvm@plt>
  404373:	4c 89 f7             	mov    %r14,%rdi
  404376:	e8 85 df ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
					typedtext.insert(0, "[root@mbois ~] $ Tem alguma coisa piscando\n\n [root@mbois ~] $ voce deveria prestar atencao");
  40437b:	4c 89 f7             	mov    %r14,%rdi
  40437e:	e8 3d e1 ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  404383:	4c 89 f2             	mov    %r14,%rdx
  404386:	be 70 84 40 00       	mov    $0x408470,%esi
  40438b:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  404392:	e8 59 dd ff ff       	call   4020f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  404397:	48 8d 95 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdx
  40439e:	31 f6                	xor    %esi,%esi
  4043a0:	48 8d bd 00 e1 ff ff 	lea    -0x1f00(%rbp),%rdi
  4043a7:	e8 04 de ff ff       	call   4021b0 <_ZN2sf6String6insertEmRKS0_@plt>
      { return _M_dataplus._M_p; }
  4043ac:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  4043b3:	48 3b bd 20 e0 ff ff 	cmp    -0x1fe0(%rbp),%rdi
  4043ba:	74 14                	je     4043d0 <main+0x13a0>
  4043bc:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  4043c3:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4043ca:	00 
  4043cb:	e8 50 de ff ff       	call   402220 <_ZdlPvm@plt>
  4043d0:	4c 89 f7             	mov    %r14,%rdi
  4043d3:	e8 28 df ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
					temp_clock.restart();
  4043d8:	48 8d bd 80 e0 ff ff 	lea    -0x1f80(%rbp),%rdi
  4043df:	e8 ec df ff ff       	call   4023d0 <_ZN2sf5Clock7restartEv@plt>
	ioctl(fd, WR_GREEN_LEDS);
  4043e4:	be 66 61 00 00       	mov    $0x6166,%esi
  4043e9:	44 89 ff             	mov    %r15d,%edi
  4043ec:	31 c0                	xor    %eax,%eax
  4043ee:	c7 85 68 e0 ff ff 00 	movl   $0x0,-0x1f98(%rbp)
  4043f5:	00 00 00 
  4043f8:	e8 f3 de ff ff       	call   4022f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  4043fd:	ba 04 00 00 00       	mov    $0x4,%edx
  404402:	48 8d b5 68 e0 ff ff 	lea    -0x1f98(%rbp),%rsi
  404409:	44 89 ff             	mov    %r15d,%edi
  40440c:	e8 cf dc ff ff       	call   4020e0 <write@plt>
					flag = 1;
  404411:	c7 85 0c e0 ff ff 01 	movl   $0x1,-0x1ff4(%rbp)
  404418:	00 00 00 
					old_button = 0xF;
  40441b:	c7 85 fc df ff ff 0f 	movl   $0xf,-0x2004(%rbp)
  404422:	00 00 00 
					i = 0;
  404425:	c7 85 08 e0 ff ff 00 	movl   $0x0,-0x1ff8(%rbp)
  40442c:	00 00 00 
					screen = 4;
  40442f:	c7 85 1c e0 ff ff 04 	movl   $0x4,-0x1fe4(%rbp)
  404436:	00 00 00 
  404439:	e9 1f f9 ff ff       	jmp    403d5d <main+0xd2d>
				elapsedtime_text += clock_text.restart();
  40443e:	48 8d bd 70 e0 ff ff 	lea    -0x1f90(%rbp),%rdi
  404445:	e8 86 df ff ff       	call   4023d0 <_ZN2sf5Clock7restartEv@plt>
  40444a:	48 89 c6             	mov    %rax,%rsi
  40444d:	48 8d bd 78 e0 ff ff 	lea    -0x1f88(%rbp),%rdi
  404454:	e8 67 df ff ff       	call   4023c0 <_ZN2sfpLERNS_4TimeES0_@plt>
  404459:	44 8b 35 e4 41 00 00 	mov    0x41e4(%rip),%r14d        # 408644 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x164>
  404460:	eb 34                	jmp    404496 <main+0x1466>
  404462:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
					elapsedtime_text -= sf::seconds(.1f);
  404468:	66 41 0f 6e c6       	movd   %r14d,%xmm0
  40446d:	e8 de dc ff ff       	call   402150 <_ZN2sf7secondsEf@plt>
  404472:	48 89 c6             	mov    %rax,%rsi
  404475:	48 8d bd 78 e0 ff ff 	lea    -0x1f88(%rbp),%rdi
  40447c:	e8 7f df ff ff       	call   402400 <_ZN2sfmIERNS_4TimeES0_@plt>
					if (typedtext.getSize() > 0)
  404481:	48 8d bd 00 e1 ff ff 	lea    -0x1f00(%rbp),%rdi
  404488:	e8 d3 de ff ff       	call   402360 <_ZNK2sf6String7getSizeEv@plt>
  40448d:	48 85 c0             	test   %rax,%rax
  404490:	0f 85 78 0b 00 00    	jne    40500e <main+0x1fde>
				while (elapsedtime_text >= sf::seconds(.1f))
  404496:	66 41 0f 6e c6       	movd   %r14d,%xmm0
  40449b:	e8 b0 dc ff ff       	call   402150 <_ZN2sf7secondsEf@plt>
  4044a0:	48 8b bd 78 e0 ff ff 	mov    -0x1f88(%rbp),%rdi
  4044a7:	48 89 c6             	mov    %rax,%rsi
  4044aa:	e8 f1 dd ff ff       	call   4022a0 <_ZN2sfgeENS_4TimeES0_@plt>
  4044af:	84 c0                	test   %al,%al
  4044b1:	75 b5                	jne    404468 <main+0x1438>
				window.draw(text);
  4044b3:	ba 80 b2 40 00       	mov    $0x40b280,%edx
  4044b8:	48 8d b5 50 fc ff ff 	lea    -0x3b0(%rbp),%rsi
  4044bf:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  4044c6:	e8 25 df ff ff       	call   4023f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
				switches = readSwitch(fd, switches);
  4044cb:	8b 85 18 e0 ff ff    	mov    -0x1fe8(%rbp),%eax
	ioctl(fd, RD_SWITCHES);
  4044d1:	be 61 61 00 00       	mov    $0x6161,%esi
  4044d6:	44 89 ff             	mov    %r15d,%edi
  4044d9:	89 85 6c e0 ff ff    	mov    %eax,-0x1f94(%rbp)
  4044df:	31 c0                	xor    %eax,%eax
  4044e1:	e8 0a de ff ff       	call   4022f0 <ioctl@plt>
	read(fd, &data, 3);
  4044e6:	ba 03 00 00 00       	mov    $0x3,%edx
  4044eb:	48 8d b5 6c e0 ff ff 	lea    -0x1f94(%rbp),%rsi
  4044f2:	44 89 ff             	mov    %r15d,%edi
  4044f5:	e8 26 de ff ff       	call   402320 <read@plt>
	return data;
  4044fa:	8b 85 6c e0 ff ff    	mov    -0x1f94(%rbp),%eax
  404500:	89 85 18 e0 ff ff    	mov    %eax,-0x1fe8(%rbp)
				if(mask != 0){
  404506:	39 c3                	cmp    %eax,%ebx
  404508:	0f 85 99 13 00 00    	jne    4058a7 <main+0x2877>
				if (switches == 0x3FFFF)
  40450e:	81 bd 18 e0 ff ff ff 	cmpl   $0x3ffff,-0x1fe8(%rbp)
  404515:	ff 03 00 
  404518:	0f 85 3f f8 ff ff    	jne    403d5d <main+0xd2d>
					window.clear(sf::Color::Green);
  40451e:	be e8 b2 40 00       	mov    $0x40b2e8,%esi
  404523:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  40452a:	e8 51 dc ff ff       	call   402180 <_ZN2sf12RenderTarget5clearERKNS_5ColorE@plt>
  40452f:	e9 29 f8 ff ff       	jmp    403d5d <main+0xd2d>
				elapsedtime_text += clock_text.restart();
  404534:	48 8d bd 70 e0 ff ff 	lea    -0x1f90(%rbp),%rdi
  40453b:	e8 90 de ff ff       	call   4023d0 <_ZN2sf5Clock7restartEv@plt>
  404540:	48 89 c6             	mov    %rax,%rsi
  404543:	48 8d bd 78 e0 ff ff 	lea    -0x1f88(%rbp),%rdi
  40454a:	e8 71 de ff ff       	call   4023c0 <_ZN2sfpLERNS_4TimeES0_@plt>
  40454f:	44 8b 35 ee 40 00 00 	mov    0x40ee(%rip),%r14d        # 408644 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x164>
  404556:	eb 36                	jmp    40458e <main+0x155e>
  404558:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40455f:	00 
					elapsedtime_text -= sf::seconds(.1f);
  404560:	66 41 0f 6e c6       	movd   %r14d,%xmm0
  404565:	e8 e6 db ff ff       	call   402150 <_ZN2sf7secondsEf@plt>
  40456a:	48 89 c6             	mov    %rax,%rsi
  40456d:	48 8d bd 78 e0 ff ff 	lea    -0x1f88(%rbp),%rdi
  404574:	e8 87 de ff ff       	call   402400 <_ZN2sfmIERNS_4TimeES0_@plt>
					if (typedtext.getSize() > 0)
  404579:	48 8d bd 00 e1 ff ff 	lea    -0x1f00(%rbp),%rdi
  404580:	e8 db dd ff ff       	call   402360 <_ZNK2sf6String7getSizeEv@plt>
  404585:	48 85 c0             	test   %rax,%rax
  404588:	0f 85 cd 08 00 00    	jne    404e5b <main+0x1e2b>
				while (elapsedtime_text >= sf::seconds(.1f))
  40458e:	66 41 0f 6e c6       	movd   %r14d,%xmm0
  404593:	e8 b8 db ff ff       	call   402150 <_ZN2sf7secondsEf@plt>
  404598:	48 8b bd 78 e0 ff ff 	mov    -0x1f88(%rbp),%rdi
  40459f:	48 89 c6             	mov    %rax,%rsi
  4045a2:	e8 f9 dc ff ff       	call   4022a0 <_ZN2sfgeENS_4TimeES0_@plt>
  4045a7:	84 c0                	test   %al,%al
  4045a9:	75 b5                	jne    404560 <main+0x1530>
				window.draw(text);
  4045ab:	ba 80 b2 40 00       	mov    $0x40b280,%edx
  4045b0:	48 8d b5 50 fc ff ff 	lea    -0x3b0(%rbp),%rsi
  4045b7:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  4045be:	e8 2d de ff ff       	call   4023f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
	ioctl(fd, WR_R_DISPLAY);
  4045c3:	be 64 61 00 00       	mov    $0x6164,%esi
  4045c8:	44 89 ff             	mov    %r15d,%edi
  4045cb:	31 c0                	xor    %eax,%eax
  4045cd:	c7 85 54 e0 ff ff a4 	movl   $0x90f999a4,-0x1fac(%rbp)
  4045d4:	99 f9 90 
  4045d7:	e8 14 dd ff ff       	call   4022f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  4045dc:	ba 04 00 00 00       	mov    $0x4,%edx
  4045e1:	48 8d b5 54 e0 ff ff 	lea    -0x1fac(%rbp),%rsi
  4045e8:	44 89 ff             	mov    %r15d,%edi
  4045eb:	e8 f0 da ff ff       	call   4020e0 <write@plt>
				switches = readSwitch(fd, switches);
  4045f0:	8b 85 18 e0 ff ff    	mov    -0x1fe8(%rbp),%eax
	ioctl(fd, RD_SWITCHES);
  4045f6:	be 61 61 00 00       	mov    $0x6161,%esi
  4045fb:	44 89 ff             	mov    %r15d,%edi
  4045fe:	89 85 58 e0 ff ff    	mov    %eax,-0x1fa8(%rbp)
  404604:	31 c0                	xor    %eax,%eax
  404606:	e8 e5 dc ff ff       	call   4022f0 <ioctl@plt>
	read(fd, &data, 3);
  40460b:	ba 03 00 00 00       	mov    $0x3,%edx
  404610:	48 8d b5 58 e0 ff ff 	lea    -0x1fa8(%rbp),%rsi
  404617:	44 89 ff             	mov    %r15d,%edi
  40461a:	e8 01 dd ff ff       	call   402320 <read@plt>
	return data;
  40461f:	8b 85 58 e0 ff ff    	mov    -0x1fa8(%rbp),%eax
  404625:	89 85 18 e0 ff ff    	mov    %eax,-0x1fe8(%rbp)
				if (switches == 0x23B6) // 9142 em hexa
  40462b:	3d b6 23 00 00       	cmp    $0x23b6,%eax
  404630:	0f 85 27 f7 ff ff    	jne    403d5d <main+0xd2d>
	ioctl(fd, WR_R_DISPLAY);
  404636:	be 64 61 00 00       	mov    $0x6164,%esi
  40463b:	44 89 ff             	mov    %r15d,%edi
  40463e:	31 c0                	xor    %eax,%eax
  404640:	c7 85 5c e0 ff ff 00 	movl   $0x0,-0x1fa4(%rbp)
  404647:	00 00 00 
  40464a:	e8 a1 dc ff ff       	call   4022f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  40464f:	ba 04 00 00 00       	mov    $0x4,%edx
  404654:	48 8d b5 5c e0 ff ff 	lea    -0x1fa4(%rbp),%rsi
  40465b:	44 89 ff             	mov    %r15d,%edi
  40465e:	e8 7d da ff ff       	call   4020e0 <write@plt>
					text.setString("");
  404663:	4c 8d b5 a0 e1 ff ff 	lea    -0x1e60(%rbp),%r14
  40466a:	4c 89 f7             	mov    %r14,%rdi
  40466d:	e8 4e de ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  404672:	4c 89 f2             	mov    %r14,%rdx
  404675:	be d5 80 40 00       	mov    $0x4080d5,%esi
  40467a:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  404681:	e8 6a da ff ff       	call   4020f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  404686:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  40468d:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  404694:	e8 c7 dd ff ff       	call   402460 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  404699:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  4046a0:	48 8d 85 d0 e1 ff ff 	lea    -0x1e30(%rbp),%rax
  4046a7:	48 89 85 20 e0 ff ff 	mov    %rax,-0x1fe0(%rbp)
  4046ae:	48 39 c7             	cmp    %rax,%rdi
  4046b1:	74 14                	je     4046c7 <main+0x1697>
  4046b3:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  4046ba:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4046c1:	00 
  4046c2:	e8 59 db ff ff       	call   402220 <_ZdlPvm@plt>
  4046c7:	4c 89 f7             	mov    %r14,%rdi
  4046ca:	e8 31 dc ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
					typedtext.insert(0, "[root@mbois ~] $ Isso faz algum sentido?");
  4046cf:	4c 89 f7             	mov    %r14,%rdi
  4046d2:	e8 e9 dd ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  4046d7:	4c 89 f2             	mov    %r14,%rdx
  4046da:	be 40 84 40 00       	mov    $0x408440,%esi
  4046df:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  4046e6:	e8 05 da ff ff       	call   4020f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  4046eb:	48 8d 95 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdx
  4046f2:	31 f6                	xor    %esi,%esi
  4046f4:	48 8d bd 00 e1 ff ff 	lea    -0x1f00(%rbp),%rdi
  4046fb:	e8 b0 da ff ff       	call   4021b0 <_ZN2sf6String6insertEmRKS0_@plt>
      { return _M_dataplus._M_p; }
  404700:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  404707:	48 3b bd 20 e0 ff ff 	cmp    -0x1fe0(%rbp),%rdi
  40470e:	74 14                	je     404724 <main+0x16f4>
  404710:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  404717:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  40471e:	00 
  40471f:	e8 fc da ff ff       	call   402220 <_ZdlPvm@plt>
  404724:	4c 89 f7             	mov    %r14,%rdi
  404727:	e8 d4 db ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
					window.clear();
  40472c:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  404732:	31 c9                	xor    %ecx,%ecx
  404734:	31 d2                	xor    %edx,%edx
  404736:	31 f6                	xor    %esi,%esi
  404738:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  40473f:	e8 bc d9 ff ff       	call   402100 <_ZN2sf5ColorC1Ehhhh@plt>
  404744:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  40474b:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  404752:	e8 29 da ff ff       	call   402180 <_ZN2sf12RenderTarget5clearERKNS_5ColorE@plt>
					screen = 3;
  404757:	c7 85 1c e0 ff ff 03 	movl   $0x3,-0x1fe4(%rbp)
  40475e:	00 00 00 
  404761:	e9 f7 f5 ff ff       	jmp    403d5d <main+0xd2d>
  404766:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  40476d:	00 00 00 
				window.close();
  404770:	48 8d bd c0 fd ff ff 	lea    -0x240(%rbp),%rdi
  404777:	e8 34 dd ff ff       	call   4024b0 <_ZN2sf6Window5closeEv@plt>
  40477c:	e9 a5 f3 ff ff       	jmp    403b26 <main+0xaf6>
  404781:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
			typing.play();
  404788:	48 8d bd c0 e2 ff ff 	lea    -0x1d40(%rbp),%rdi
  40478f:	e8 4c dc ff ff       	call   4023e0 <_ZN2sf11SoundStream4playEv@plt>
	ioctl(fd, WR_L_DISPLAY);
  404794:	be 63 61 00 00       	mov    $0x6163,%esi
  404799:	44 89 ff             	mov    %r15d,%edi
  40479c:	31 c0                	xor    %eax,%eax
  40479e:	c7 85 40 e0 ff ff 00 	movl   $0x0,-0x1fc0(%rbp)
  4047a5:	00 00 00 
  4047a8:	e8 43 db ff ff       	call   4022f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  4047ad:	ba 04 00 00 00       	mov    $0x4,%edx
  4047b2:	48 8d b5 40 e0 ff ff 	lea    -0x1fc0(%rbp),%rsi
  4047b9:	44 89 ff             	mov    %r15d,%edi
  4047bc:	e8 1f d9 ff ff       	call   4020e0 <write@plt>
	ioctl(fd, WR_R_DISPLAY);
  4047c1:	be 64 61 00 00       	mov    $0x6164,%esi
  4047c6:	44 89 ff             	mov    %r15d,%edi
  4047c9:	31 c0                	xor    %eax,%eax
  4047cb:	c7 85 44 e0 ff ff 00 	movl   $0x0,-0x1fbc(%rbp)
  4047d2:	00 00 00 
  4047d5:	e8 16 db ff ff       	call   4022f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  4047da:	ba 04 00 00 00       	mov    $0x4,%edx
  4047df:	48 8d b5 44 e0 ff ff 	lea    -0x1fbc(%rbp),%rsi
  4047e6:	44 89 ff             	mov    %r15d,%edi
  4047e9:	e8 f2 d8 ff ff       	call   4020e0 <write@plt>
	ioctl(fd, WR_GREEN_LEDS);
  4047ee:	be 66 61 00 00       	mov    $0x6166,%esi
  4047f3:	44 89 ff             	mov    %r15d,%edi
  4047f6:	31 c0                	xor    %eax,%eax
  4047f8:	c7 85 48 e0 ff ff 00 	movl   $0x0,-0x1fb8(%rbp)
  4047ff:	00 00 00 
  404802:	e8 e9 da ff ff       	call   4022f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  404807:	ba 04 00 00 00       	mov    $0x4,%edx
  40480c:	48 8d b5 48 e0 ff ff 	lea    -0x1fb8(%rbp),%rsi
  404813:	44 89 ff             	mov    %r15d,%edi
  404816:	e8 c5 d8 ff ff       	call   4020e0 <write@plt>
	ioctl(fd, WR_RED_LEDS);
  40481b:	be 65 61 00 00       	mov    $0x6165,%esi
  404820:	44 89 ff             	mov    %r15d,%edi
  404823:	31 c0                	xor    %eax,%eax
  404825:	c7 85 4c e0 ff ff 00 	movl   $0x0,-0x1fb4(%rbp)
  40482c:	00 00 00 
  40482f:	e8 bc da ff ff       	call   4022f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  404834:	ba 04 00 00 00       	mov    $0x4,%edx
  404839:	48 8d b5 4c e0 ff ff 	lea    -0x1fb4(%rbp),%rsi
  404840:	44 89 ff             	mov    %r15d,%edi
  404843:	e8 98 d8 ff ff       	call   4020e0 <write@plt>
				elapsedtime_text += clock_text.restart();
  404848:	48 8d bd 70 e0 ff ff 	lea    -0x1f90(%rbp),%rdi
  40484f:	e8 7c db ff ff       	call   4023d0 <_ZN2sf5Clock7restartEv@plt>
  404854:	48 89 c6             	mov    %rax,%rsi
  404857:	48 8d bd 78 e0 ff ff 	lea    -0x1f88(%rbp),%rdi
  40485e:	e8 5d db ff ff       	call   4023c0 <_ZN2sfpLERNS_4TimeES0_@plt>
  404863:	c7 85 1c e0 ff ff 01 	movl   $0x1,-0x1fe4(%rbp)
  40486a:	00 00 00 
  40486d:	0f 1f 00             	nopl   (%rax)
				while (elapsedtime_text >= sf::seconds(.001f))
  404870:	f3 0f 10 05 c4 3d 00 	movss  0x3dc4(%rip),%xmm0        # 40863c <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x15c>
  404877:	00 
  404878:	e8 d3 d8 ff ff       	call   402150 <_ZN2sf7secondsEf@plt>
  40487d:	48 8b bd 78 e0 ff ff 	mov    -0x1f88(%rbp),%rdi
  404884:	48 89 c6             	mov    %rax,%rsi
  404887:	e8 14 da ff ff       	call   4022a0 <_ZN2sfgeENS_4TimeES0_@plt>
  40488c:	84 c0                	test   %al,%al
  40488e:	0f 84 aa 05 00 00    	je     404e3e <main+0x1e0e>
					elapsedtime_text -= sf::seconds(.001f);
  404894:	f3 0f 10 05 a0 3d 00 	movss  0x3da0(%rip),%xmm0        # 40863c <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x15c>
  40489b:	00 
  40489c:	e8 af d8 ff ff       	call   402150 <_ZN2sf7secondsEf@plt>
  4048a1:	48 89 c6             	mov    %rax,%rsi
  4048a4:	48 8d bd 78 e0 ff ff 	lea    -0x1f88(%rbp),%rdi
  4048ab:	e8 50 db ff ff       	call   402400 <_ZN2sfmIERNS_4TimeES0_@plt>
					if (typedtext.getSize() > 0)
  4048b0:	48 8d bd 00 e1 ff ff 	lea    -0x1f00(%rbp),%rdi
  4048b7:	e8 a4 da ff ff       	call   402360 <_ZNK2sf6String7getSizeEv@plt>
  4048bc:	48 85 c0             	test   %rax,%rax
  4048bf:	0f 84 0b 02 00 00    	je     404ad0 <main+0x1aa0>
						text.setString(text.getString() + typedtext[0]);
  4048c5:	31 f6                	xor    %esi,%esi
  4048c7:	48 8d bd 00 e1 ff ff 	lea    -0x1f00(%rbp),%rdi
  4048ce:	e8 ad d9 ff ff       	call   402280 <_ZN2sf6StringixEm@plt>
  4048d3:	4c 8d b5 a0 e1 ff ff 	lea    -0x1e60(%rbp),%r14
  4048da:	8b 30                	mov    (%rax),%esi
  4048dc:	4c 89 f7             	mov    %r14,%rdi
  4048df:	e8 dc d7 ff ff       	call   4020c0 <_ZN2sf6StringC1Ej@plt>
  4048e4:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  4048eb:	e8 c0 da ff ff       	call   4023b0 <_ZNK2sf4Text9getStringEv@plt>
  4048f0:	48 89 c6             	mov    %rax,%rsi
  4048f3:	4c 89 f2             	mov    %r14,%rdx
  4048f6:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  4048fd:	e8 ce d7 ff ff       	call   4020d0 <_ZN2sfplERKNS_6StringES2_@plt>
  404902:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  404909:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  404910:	e8 4b db ff ff       	call   402460 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  404915:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  40491c:	48 8d 85 d0 e1 ff ff 	lea    -0x1e30(%rbp),%rax
  404923:	48 89 85 20 e0 ff ff 	mov    %rax,-0x1fe0(%rbp)
  40492a:	48 39 c7             	cmp    %rax,%rdi
  40492d:	74 14                	je     404943 <main+0x1913>
  40492f:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  404936:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  40493d:	00 
  40493e:	e8 dd d8 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  404943:	48 8b bd a0 e1 ff ff 	mov    -0x1e60(%rbp),%rdi
	if (!_M_is_local())
  40494a:	48 8d 85 b0 e1 ff ff 	lea    -0x1e50(%rbp),%rax
  404951:	48 89 85 28 e0 ff ff 	mov    %rax,-0x1fd8(%rbp)
  404958:	48 39 c7             	cmp    %rax,%rdi
  40495b:	74 14                	je     404971 <main+0x1941>
  40495d:	48 8b 85 b0 e1 ff ff 	mov    -0x1e50(%rbp),%rax
  404964:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  40496b:	00 
  40496c:	e8 af d8 ff ff       	call   402220 <_ZdlPvm@plt>
						typedtext = typedtext.toAnsiString().substr(1);
  404971:	48 8d 85 a8 e0 ff ff 	lea    -0x1f58(%rbp),%rax
  404978:	4c 8d ad a0 e0 ff ff 	lea    -0x1f60(%rbp),%r13
  40497f:	48 89 c7             	mov    %rax,%rdi
  404982:	48 89 85 30 e0 ff ff 	mov    %rax,-0x1fd0(%rbp)
  404989:	e8 32 db ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  40498e:	4c 89 ef             	mov    %r13,%rdi
  404991:	e8 2a db ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  404996:	4c 89 ea             	mov    %r13,%rdx
  404999:	48 8d b5 00 e1 ff ff 	lea    -0x1f00(%rbp),%rsi
  4049a0:	48 8d bd 80 e1 ff ff 	lea    -0x1e80(%rbp),%rdi
  4049a7:	e8 a4 da ff ff       	call   402450 <_ZNK2sf6String12toAnsiStringB5cxx11ERKSt6locale@plt>
      // Capacity:
      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
  4049ac:	4c 8b a5 88 e1 ff ff 	mov    -0x1e78(%rbp),%r12
	if (__pos > this->size())
  4049b3:	4d 85 e4             	test   %r12,%r12
  4049b6:	0f 84 c8 15 00 00    	je     405f84 <main+0x2f54>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  4049bc:	48 8b 85 28 e0 ff ff 	mov    -0x1fd8(%rbp),%rax
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
  4049c3:	49 83 ec 01          	sub    $0x1,%r12
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
  4049c7:	4c 89 a5 c0 e1 ff ff 	mov    %r12,-0x1e40(%rbp)
  4049ce:	48 89 85 a0 e1 ff ff 	mov    %rax,-0x1e60(%rbp)
      { return _M_dataplus._M_p; }
  4049d5:	48 8b 85 80 e1 ff ff 	mov    -0x1e80(%rbp),%rax
  4049dc:	48 89 85 10 e0 ff ff 	mov    %rax,-0x1ff0(%rbp)

	if (__dnew > size_type(_S_local_capacity))
  4049e3:	49 83 fc 0f          	cmp    $0xf,%r12
  4049e7:	0f 87 4c 02 00 00    	ja     404c39 <main+0x1c09>
	if (__n == 1)
  4049ed:	49 83 fc 01          	cmp    $0x1,%r12
  4049f1:	0f 85 2d 02 00 00    	jne    404c24 <main+0x1bf4>
  4049f7:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  4049fb:	88 85 b0 e1 ff ff    	mov    %al,-0x1e50(%rbp)
  404a01:	48 8b 85 28 e0 ff ff 	mov    -0x1fd8(%rbp),%rax
      { _M_string_length = __length; }
  404a08:	4c 89 a5 a8 e1 ff ff 	mov    %r12,-0x1e58(%rbp)
  404a0f:	48 8b 95 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdx
  404a16:	4c 89 f6             	mov    %r14,%rsi
  404a19:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  404a20:	42 c6 04 20 00       	movb   $0x0,(%rax,%r12,1)
  404a25:	e8 76 d6 ff ff       	call   4020a0 <_ZN2sf6StringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6locale@plt>
  404a2a:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  404a31:	48 8d bd 00 e1 ff ff 	lea    -0x1f00(%rbp),%rdi
  404a38:	e8 e3 d9 ff ff       	call   402420 <_ZN2sf6StringaSERKS0_@plt>
      { return _M_dataplus._M_p; }
  404a3d:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  404a44:	48 3b bd 20 e0 ff ff 	cmp    -0x1fe0(%rbp),%rdi
  404a4b:	74 14                	je     404a61 <main+0x1a31>
  404a4d:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  404a54:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  404a5b:	00 
  404a5c:	e8 bf d7 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  404a61:	48 8b bd a0 e1 ff ff 	mov    -0x1e60(%rbp),%rdi
	if (!_M_is_local())
  404a68:	48 3b bd 28 e0 ff ff 	cmp    -0x1fd8(%rbp),%rdi
  404a6f:	74 10                	je     404a81 <main+0x1a51>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  404a71:	48 8b 85 b0 e1 ff ff 	mov    -0x1e50(%rbp),%rax
  404a78:	48 8d 70 01          	lea    0x1(%rax),%rsi
  404a7c:	e8 9f d7 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  404a81:	48 8b bd 80 e1 ff ff 	mov    -0x1e80(%rbp),%rdi
	if (!_M_is_local())
  404a88:	48 8d 85 90 e1 ff ff 	lea    -0x1e70(%rbp),%rax
  404a8f:	48 39 c7             	cmp    %rax,%rdi
  404a92:	74 10                	je     404aa4 <main+0x1a74>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  404a94:	48 8b 85 90 e1 ff ff 	mov    -0x1e70(%rbp),%rax
  404a9b:	48 8d 70 01          	lea    0x1(%rax),%rsi
  404a9f:	e8 7c d7 ff ff       	call   402220 <_ZdlPvm@plt>
  404aa4:	4c 89 ef             	mov    %r13,%rdi
  404aa7:	e8 54 d8 ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
  404aac:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
  404ab3:	e8 48 d8 ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
						temp_clock.restart();
  404ab8:	48 8d bd 80 e0 ff ff 	lea    -0x1f80(%rbp),%rdi
  404abf:	e8 0c d9 ff ff       	call   4023d0 <_ZN2sf5Clock7restartEv@plt>
  404ac4:	e9 a7 fd ff ff       	jmp    404870 <main+0x1840>
  404ac9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
						temp_time = temp_clock.getElapsedTime();
  404ad0:	48 8d bd 80 e0 ff ff 	lea    -0x1f80(%rbp),%rdi
  404ad7:	e8 c4 d8 ff ff       	call   4023a0 <_ZNK2sf5Clock14getElapsedTimeEv@plt>
						if (temp_time >= sf::seconds(5.0f))
  404adc:	f3 0f 10 05 5c 3b 00 	movss  0x3b5c(%rip),%xmm0        # 408640 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x160>
  404ae3:	00 
						temp_time = temp_clock.getElapsedTime();
  404ae4:	48 89 85 88 e0 ff ff 	mov    %rax,-0x1f78(%rbp)
						if (temp_time >= sf::seconds(5.0f))
  404aeb:	e8 60 d6 ff ff       	call   402150 <_ZN2sf7secondsEf@plt>
  404af0:	48 8b bd 88 e0 ff ff 	mov    -0x1f78(%rbp),%rdi
  404af7:	48 89 c6             	mov    %rax,%rsi
  404afa:	e8 a1 d7 ff ff       	call   4022a0 <_ZN2sfgeENS_4TimeES0_@plt>
  404aff:	84 c0                	test   %al,%al
  404b01:	0f 84 69 fd ff ff    	je     404870 <main+0x1840>
	ioctl(fd, WR_R_DISPLAY);
  404b07:	be 64 61 00 00       	mov    $0x6164,%esi
  404b0c:	44 89 ff             	mov    %r15d,%edi
  404b0f:	31 c0                	xor    %eax,%eax
  404b11:	c7 85 50 e0 ff ff ff 	movl   $0xffffffff,-0x1fb0(%rbp)
  404b18:	ff ff ff 
  404b1b:	e8 d0 d7 ff ff       	call   4022f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  404b20:	ba 04 00 00 00       	mov    $0x4,%edx
  404b25:	48 8d b5 50 e0 ff ff 	lea    -0x1fb0(%rbp),%rsi
  404b2c:	44 89 ff             	mov    %r15d,%edi
  404b2f:	e8 ac d5 ff ff       	call   4020e0 <write@plt>
							text.setString("");
  404b34:	4c 8d b5 a0 e1 ff ff 	lea    -0x1e60(%rbp),%r14
  404b3b:	4c 89 f7             	mov    %r14,%rdi
  404b3e:	e8 7d d9 ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  404b43:	4c 89 f2             	mov    %r14,%rdx
  404b46:	be d5 80 40 00       	mov    $0x4080d5,%esi
  404b4b:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  404b52:	e8 99 d5 ff ff       	call   4020f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  404b57:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  404b5e:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  404b65:	e8 f6 d8 ff ff       	call   402460 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  404b6a:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  404b71:	48 8d 85 d0 e1 ff ff 	lea    -0x1e30(%rbp),%rax
  404b78:	48 89 85 20 e0 ff ff 	mov    %rax,-0x1fe0(%rbp)
  404b7f:	48 39 c7             	cmp    %rax,%rdi
  404b82:	74 14                	je     404b98 <main+0x1b68>
  404b84:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  404b8b:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  404b92:	00 
  404b93:	e8 88 d6 ff ff       	call   402220 <_ZdlPvm@plt>
  404b98:	4c 89 f7             	mov    %r14,%rdi
  404b9b:	e8 60 d7 ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
							typedtext.insert(0, "[root@mbois ~] $ Voce deveria saber matematica...");
  404ba0:	4c 89 f7             	mov    %r14,%rdi
  404ba3:	e8 18 d9 ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  404ba8:	4c 89 f2             	mov    %r14,%rdx
  404bab:	be 08 84 40 00       	mov    $0x408408,%esi
  404bb0:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  404bb7:	e8 34 d5 ff ff       	call   4020f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  404bbc:	48 8d 95 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdx
  404bc3:	31 f6                	xor    %esi,%esi
  404bc5:	48 8d bd 00 e1 ff ff 	lea    -0x1f00(%rbp),%rdi
  404bcc:	e8 df d5 ff ff       	call   4021b0 <_ZN2sf6String6insertEmRKS0_@plt>
      { return _M_dataplus._M_p; }
  404bd1:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  404bd8:	48 3b bd 20 e0 ff ff 	cmp    -0x1fe0(%rbp),%rdi
  404bdf:	74 14                	je     404bf5 <main+0x1bc5>
  404be1:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  404be8:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  404bef:	00 
  404bf0:	e8 2b d6 ff ff       	call   402220 <_ZdlPvm@plt>
  404bf5:	4c 89 f7             	mov    %r14,%rdi
  404bf8:	e8 03 d7 ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
							clock_text.restart();
  404bfd:	48 8d bd 70 e0 ff ff 	lea    -0x1f90(%rbp),%rdi
  404c04:	e8 c7 d7 ff ff       	call   4023d0 <_ZN2sf5Clock7restartEv@plt>
							clock_bomb.restart();
  404c09:	48 8d bd 90 e0 ff ff 	lea    -0x1f70(%rbp),%rdi
  404c10:	e8 bb d7 ff ff       	call   4023d0 <_ZN2sf5Clock7restartEv@plt>
							screen = 2;
  404c15:	c7 85 1c e0 ff ff 02 	movl   $0x2,-0x1fe4(%rbp)
  404c1c:	00 00 00 
  404c1f:	e9 4c fc ff ff       	jmp    404870 <main+0x1840>
      }

      static _GLIBCXX20_CONSTEXPR char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
	if (__n == 0)
  404c24:	4d 85 e4             	test   %r12,%r12
  404c27:	0f 85 4b 13 00 00    	jne    405f78 <main+0x2f48>
  404c2d:	48 8b 85 28 e0 ff ff 	mov    -0x1fd8(%rbp),%rax
  404c34:	e9 cf fd ff ff       	jmp    404a08 <main+0x19d8>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
  404c39:	31 d2                	xor    %edx,%edx
  404c3b:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  404c42:	4c 89 f7             	mov    %r14,%rdi
  404c45:	e8 36 d8 ff ff       	call   402480 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
  404c4a:	48 89 85 a0 e1 ff ff 	mov    %rax,-0x1e60(%rbp)
  404c51:	48 89 c7             	mov    %rax,%rdi
      { _M_allocated_capacity = __capacity; }
  404c54:	48 8b 85 c0 e1 ff ff 	mov    -0x1e40(%rbp),%rax
  404c5b:	48 89 85 b0 e1 ff ff 	mov    %rax,-0x1e50(%rbp)
	const _CharT* __start = __str._M_data()
  404c62:	48 8b b5 10 e0 ff ff 	mov    -0x1ff0(%rbp),%rsi
	  return __s1;
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
  404c69:	4c 89 e2             	mov    %r12,%rdx
  404c6c:	48 83 c6 01          	add    $0x1,%rsi
  404c70:	e8 5b d5 ff ff       	call   4021d0 <memcpy@plt>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
  404c75:	4c 8b a5 c0 e1 ff ff 	mov    -0x1e40(%rbp),%r12
      { return _M_dataplus._M_p; }
  404c7c:	48 8b 85 a0 e1 ff ff 	mov    -0x1e60(%rbp),%rax
  404c83:	e9 80 fd ff ff       	jmp    404a08 <main+0x19d8>
						text.setString(text.getString() + typedtext[0]);
  404c88:	31 f6                	xor    %esi,%esi
  404c8a:	48 8d bd 00 e1 ff ff 	lea    -0x1f00(%rbp),%rdi
  404c91:	e8 ea d5 ff ff       	call   402280 <_ZN2sf6StringixEm@plt>
  404c96:	8b 30                	mov    (%rax),%esi
  404c98:	48 8d bd a0 e1 ff ff 	lea    -0x1e60(%rbp),%rdi
  404c9f:	e8 1c d4 ff ff       	call   4020c0 <_ZN2sf6StringC1Ej@plt>
  404ca4:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  404cab:	e8 00 d7 ff ff       	call   4023b0 <_ZNK2sf4Text9getStringEv@plt>
  404cb0:	48 89 c6             	mov    %rax,%rsi
  404cb3:	48 8d 95 a0 e1 ff ff 	lea    -0x1e60(%rbp),%rdx
  404cba:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  404cc1:	e8 0a d4 ff ff       	call   4020d0 <_ZN2sfplERKNS_6StringES2_@plt>
  404cc6:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  404ccd:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  404cd4:	e8 87 d7 ff ff       	call   402460 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
  404cd9:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  404ce0:	48 8d 85 d0 e1 ff ff 	lea    -0x1e30(%rbp),%rax
  404ce7:	48 89 85 20 e0 ff ff 	mov    %rax,-0x1fe0(%rbp)
  404cee:	48 39 c7             	cmp    %rax,%rdi
  404cf1:	74 14                	je     404d07 <main+0x1cd7>
  404cf3:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  404cfa:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  404d01:	00 
  404d02:	e8 19 d5 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  404d07:	48 8b bd a0 e1 ff ff 	mov    -0x1e60(%rbp),%rdi
	if (!_M_is_local())
  404d0e:	48 8d 85 b0 e1 ff ff 	lea    -0x1e50(%rbp),%rax
  404d15:	48 89 85 28 e0 ff ff 	mov    %rax,-0x1fd8(%rbp)
  404d1c:	48 39 c7             	cmp    %rax,%rdi
  404d1f:	74 14                	je     404d35 <main+0x1d05>
  404d21:	48 8b 85 b0 e1 ff ff 	mov    -0x1e50(%rbp),%rax
  404d28:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  404d2f:	00 
  404d30:	e8 eb d4 ff ff       	call   402220 <_ZdlPvm@plt>
						typedtext = typedtext.toAnsiString().substr(1);
  404d35:	48 8d 85 a8 e0 ff ff 	lea    -0x1f58(%rbp),%rax
  404d3c:	4c 8d ad a0 e0 ff ff 	lea    -0x1f60(%rbp),%r13
  404d43:	48 89 c7             	mov    %rax,%rdi
  404d46:	48 89 85 30 e0 ff ff 	mov    %rax,-0x1fd0(%rbp)
  404d4d:	4c 8d a5 80 e1 ff ff 	lea    -0x1e80(%rbp),%r12
  404d54:	e8 67 d7 ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  404d59:	4c 89 ef             	mov    %r13,%rdi
  404d5c:	e8 5f d7 ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  404d61:	4c 89 ea             	mov    %r13,%rdx
  404d64:	48 8d b5 00 e1 ff ff 	lea    -0x1f00(%rbp),%rsi
  404d6b:	4c 89 e7             	mov    %r12,%rdi
  404d6e:	e8 dd d6 ff ff       	call   402450 <_ZNK2sf6String12toAnsiStringB5cxx11ERKSt6locale@plt>
  404d73:	48 8d 85 a0 e1 ff ff 	lea    -0x1e60(%rbp),%rax
  404d7a:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
  404d81:	ba 01 00 00 00       	mov    $0x1,%edx
  404d86:	4c 89 e6             	mov    %r12,%rsi
  404d89:	48 89 c7             	mov    %rax,%rdi
  404d8c:	e8 9f d4 ff ff       	call   402230 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@plt>
  404d91:	48 8b 95 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdx
  404d98:	48 8d b5 a0 e1 ff ff 	lea    -0x1e60(%rbp),%rsi
  404d9f:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  404da6:	e8 f5 d2 ff ff       	call   4020a0 <_ZN2sf6StringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6locale@plt>
  404dab:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  404db2:	48 8d bd 00 e1 ff ff 	lea    -0x1f00(%rbp),%rdi
  404db9:	e8 62 d6 ff ff       	call   402420 <_ZN2sf6StringaSERKS0_@plt>
      { return _M_dataplus._M_p; }
  404dbe:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  404dc5:	48 3b bd 20 e0 ff ff 	cmp    -0x1fe0(%rbp),%rdi
  404dcc:	74 14                	je     404de2 <main+0x1db2>
  404dce:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  404dd5:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  404ddc:	00 
  404ddd:	e8 3e d4 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  404de2:	48 8b bd a0 e1 ff ff 	mov    -0x1e60(%rbp),%rdi
	if (!_M_is_local())
  404de9:	48 3b bd 28 e0 ff ff 	cmp    -0x1fd8(%rbp),%rdi
  404df0:	74 10                	je     404e02 <main+0x1dd2>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  404df2:	48 8b 85 b0 e1 ff ff 	mov    -0x1e50(%rbp),%rax
  404df9:	48 8d 70 01          	lea    0x1(%rax),%rsi
  404dfd:	e8 1e d4 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  404e02:	48 8b bd 80 e1 ff ff 	mov    -0x1e80(%rbp),%rdi
	if (!_M_is_local())
  404e09:	48 8d 85 90 e1 ff ff 	lea    -0x1e70(%rbp),%rax
  404e10:	48 39 c7             	cmp    %rax,%rdi
  404e13:	74 10                	je     404e25 <main+0x1df5>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  404e15:	48 8b 85 90 e1 ff ff 	mov    -0x1e70(%rbp),%rax
  404e1c:	48 8d 70 01          	lea    0x1(%rax),%rsi
  404e20:	e8 fb d3 ff ff       	call   402220 <_ZdlPvm@plt>
  404e25:	4c 89 ef             	mov    %r13,%rdi
  404e28:	e8 d3 d4 ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
  404e2d:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
  404e34:	e8 c7 d4 ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
  404e39:	e9 e0 ee ff ff       	jmp    403d1e <main+0xcee>
				window.draw(text);
  404e3e:	ba 80 b2 40 00       	mov    $0x40b280,%edx
  404e43:	48 8d b5 50 fc ff ff 	lea    -0x3b0(%rbp),%rsi
  404e4a:	48 8d bd f0 fd ff ff 	lea    -0x210(%rbp),%rdi
  404e51:	e8 9a d5 ff ff       	call   4023f0 <_ZN2sf12RenderTarget4drawERKNS_8DrawableERKNS_12RenderStatesE@plt>
  404e56:	e9 02 ef ff ff       	jmp    403d5d <main+0xd2d>
						text.setString(text.getString() + typedtext[0]);
  404e5b:	31 f6                	xor    %esi,%esi
  404e5d:	48 8d bd 00 e1 ff ff 	lea    -0x1f00(%rbp),%rdi
  404e64:	e8 17 d4 ff ff       	call   402280 <_ZN2sf6StringixEm@plt>
  404e69:	8b 30                	mov    (%rax),%esi
  404e6b:	48 8d bd a0 e1 ff ff 	lea    -0x1e60(%rbp),%rdi
  404e72:	e8 49 d2 ff ff       	call   4020c0 <_ZN2sf6StringC1Ej@plt>
  404e77:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  404e7e:	e8 2d d5 ff ff       	call   4023b0 <_ZNK2sf4Text9getStringEv@plt>
  404e83:	48 89 c6             	mov    %rax,%rsi
  404e86:	48 8d 95 a0 e1 ff ff 	lea    -0x1e60(%rbp),%rdx
  404e8d:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  404e94:	e8 37 d2 ff ff       	call   4020d0 <_ZN2sfplERKNS_6StringES2_@plt>
  404e99:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  404ea0:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  404ea7:	e8 b4 d5 ff ff       	call   402460 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  404eac:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  404eb3:	48 8d 85 d0 e1 ff ff 	lea    -0x1e30(%rbp),%rax
  404eba:	48 89 85 20 e0 ff ff 	mov    %rax,-0x1fe0(%rbp)
  404ec1:	48 39 c7             	cmp    %rax,%rdi
  404ec4:	74 14                	je     404eda <main+0x1eaa>
  404ec6:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  404ecd:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  404ed4:	00 
  404ed5:	e8 46 d3 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  404eda:	48 8b bd a0 e1 ff ff 	mov    -0x1e60(%rbp),%rdi
	if (!_M_is_local())
  404ee1:	48 8d 85 b0 e1 ff ff 	lea    -0x1e50(%rbp),%rax
  404ee8:	48 89 85 28 e0 ff ff 	mov    %rax,-0x1fd8(%rbp)
  404eef:	48 39 c7             	cmp    %rax,%rdi
  404ef2:	74 14                	je     404f08 <main+0x1ed8>
  404ef4:	48 8b 85 b0 e1 ff ff 	mov    -0x1e50(%rbp),%rax
  404efb:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  404f02:	00 
  404f03:	e8 18 d3 ff ff       	call   402220 <_ZdlPvm@plt>
						typedtext = typedtext.toAnsiString().substr(1);
  404f08:	48 8d 85 a8 e0 ff ff 	lea    -0x1f58(%rbp),%rax
  404f0f:	4c 8d ad a0 e0 ff ff 	lea    -0x1f60(%rbp),%r13
  404f16:	48 89 c7             	mov    %rax,%rdi
  404f19:	48 89 85 30 e0 ff ff 	mov    %rax,-0x1fd0(%rbp)
  404f20:	4c 8d a5 80 e1 ff ff 	lea    -0x1e80(%rbp),%r12
  404f27:	e8 94 d5 ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  404f2c:	4c 89 ef             	mov    %r13,%rdi
  404f2f:	e8 8c d5 ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  404f34:	4c 89 ea             	mov    %r13,%rdx
  404f37:	48 8d b5 00 e1 ff ff 	lea    -0x1f00(%rbp),%rsi
  404f3e:	4c 89 e7             	mov    %r12,%rdi
  404f41:	e8 0a d5 ff ff       	call   402450 <_ZNK2sf6String12toAnsiStringB5cxx11ERKSt6locale@plt>
  404f46:	48 8d 85 a0 e1 ff ff 	lea    -0x1e60(%rbp),%rax
  404f4d:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
  404f51:	ba 01 00 00 00       	mov    $0x1,%edx
  404f56:	4c 89 e6             	mov    %r12,%rsi
  404f59:	48 89 c7             	mov    %rax,%rdi
  404f5c:	e8 cf d2 ff ff       	call   402230 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@plt>
  404f61:	48 8b 95 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdx
  404f68:	48 8d b5 a0 e1 ff ff 	lea    -0x1e60(%rbp),%rsi
  404f6f:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  404f76:	e8 25 d1 ff ff       	call   4020a0 <_ZN2sf6StringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6locale@plt>
  404f7b:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  404f82:	48 8d bd 00 e1 ff ff 	lea    -0x1f00(%rbp),%rdi
  404f89:	e8 92 d4 ff ff       	call   402420 <_ZN2sf6StringaSERKS0_@plt>
      { return _M_dataplus._M_p; }
  404f8e:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  404f95:	48 3b bd 20 e0 ff ff 	cmp    -0x1fe0(%rbp),%rdi
  404f9c:	74 14                	je     404fb2 <main+0x1f82>
  404f9e:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  404fa5:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  404fac:	00 
  404fad:	e8 6e d2 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  404fb2:	48 8b bd a0 e1 ff ff 	mov    -0x1e60(%rbp),%rdi
	if (!_M_is_local())
  404fb9:	48 3b bd 28 e0 ff ff 	cmp    -0x1fd8(%rbp),%rdi
  404fc0:	74 10                	je     404fd2 <main+0x1fa2>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  404fc2:	48 8b 85 b0 e1 ff ff 	mov    -0x1e50(%rbp),%rax
  404fc9:	48 8d 70 01          	lea    0x1(%rax),%rsi
  404fcd:	e8 4e d2 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  404fd2:	48 8b bd 80 e1 ff ff 	mov    -0x1e80(%rbp),%rdi
	if (!_M_is_local())
  404fd9:	48 8d 85 90 e1 ff ff 	lea    -0x1e70(%rbp),%rax
  404fe0:	48 39 c7             	cmp    %rax,%rdi
  404fe3:	74 10                	je     404ff5 <main+0x1fc5>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  404fe5:	48 8b 85 90 e1 ff ff 	mov    -0x1e70(%rbp),%rax
  404fec:	48 8d 70 01          	lea    0x1(%rax),%rsi
  404ff0:	e8 2b d2 ff ff       	call   402220 <_ZdlPvm@plt>
  404ff5:	4c 89 ef             	mov    %r13,%rdi
  404ff8:	e8 03 d3 ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
  404ffd:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
  405004:	e8 f7 d2 ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
  405009:	e9 80 f5 ff ff       	jmp    40458e <main+0x155e>
						text.setString(text.getString() + typedtext[0]);
  40500e:	31 f6                	xor    %esi,%esi
  405010:	48 8d bd 00 e1 ff ff 	lea    -0x1f00(%rbp),%rdi
  405017:	e8 64 d2 ff ff       	call   402280 <_ZN2sf6StringixEm@plt>
  40501c:	8b 30                	mov    (%rax),%esi
  40501e:	48 8d bd a0 e1 ff ff 	lea    -0x1e60(%rbp),%rdi
  405025:	e8 96 d0 ff ff       	call   4020c0 <_ZN2sf6StringC1Ej@plt>
  40502a:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  405031:	e8 7a d3 ff ff       	call   4023b0 <_ZNK2sf4Text9getStringEv@plt>
  405036:	48 89 c6             	mov    %rax,%rsi
  405039:	48 8d 95 a0 e1 ff ff 	lea    -0x1e60(%rbp),%rdx
  405040:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  405047:	e8 84 d0 ff ff       	call   4020d0 <_ZN2sfplERKNS_6StringES2_@plt>
  40504c:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  405053:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  40505a:	e8 01 d4 ff ff       	call   402460 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  40505f:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  405066:	48 8d 85 d0 e1 ff ff 	lea    -0x1e30(%rbp),%rax
  40506d:	48 89 85 20 e0 ff ff 	mov    %rax,-0x1fe0(%rbp)
  405074:	48 39 c7             	cmp    %rax,%rdi
  405077:	74 14                	je     40508d <main+0x205d>
  405079:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  405080:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405087:	00 
  405088:	e8 93 d1 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  40508d:	48 8b bd a0 e1 ff ff 	mov    -0x1e60(%rbp),%rdi
	if (!_M_is_local())
  405094:	48 8d 85 b0 e1 ff ff 	lea    -0x1e50(%rbp),%rax
  40509b:	48 89 85 28 e0 ff ff 	mov    %rax,-0x1fd8(%rbp)
  4050a2:	48 39 c7             	cmp    %rax,%rdi
  4050a5:	74 14                	je     4050bb <main+0x208b>
  4050a7:	48 8b 85 b0 e1 ff ff 	mov    -0x1e50(%rbp),%rax
  4050ae:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4050b5:	00 
  4050b6:	e8 65 d1 ff ff       	call   402220 <_ZdlPvm@plt>
						typedtext = typedtext.toAnsiString().substr(1);
  4050bb:	48 8d 85 a8 e0 ff ff 	lea    -0x1f58(%rbp),%rax
  4050c2:	4c 8d ad a0 e0 ff ff 	lea    -0x1f60(%rbp),%r13
  4050c9:	48 89 c7             	mov    %rax,%rdi
  4050cc:	48 89 85 30 e0 ff ff 	mov    %rax,-0x1fd0(%rbp)
  4050d3:	4c 8d a5 80 e1 ff ff 	lea    -0x1e80(%rbp),%r12
  4050da:	e8 e1 d3 ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  4050df:	4c 89 ef             	mov    %r13,%rdi
  4050e2:	e8 d9 d3 ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  4050e7:	4c 89 ea             	mov    %r13,%rdx
  4050ea:	48 8d b5 00 e1 ff ff 	lea    -0x1f00(%rbp),%rsi
  4050f1:	4c 89 e7             	mov    %r12,%rdi
  4050f4:	e8 57 d3 ff ff       	call   402450 <_ZNK2sf6String12toAnsiStringB5cxx11ERKSt6locale@plt>
  4050f9:	48 8d 85 a0 e1 ff ff 	lea    -0x1e60(%rbp),%rax
  405100:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
  405104:	ba 01 00 00 00       	mov    $0x1,%edx
  405109:	4c 89 e6             	mov    %r12,%rsi
  40510c:	48 89 c7             	mov    %rax,%rdi
  40510f:	e8 1c d1 ff ff       	call   402230 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@plt>
  405114:	48 8b 95 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdx
  40511b:	48 8d b5 a0 e1 ff ff 	lea    -0x1e60(%rbp),%rsi
  405122:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  405129:	e8 72 cf ff ff       	call   4020a0 <_ZN2sf6StringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6locale@plt>
  40512e:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  405135:	48 8d bd 00 e1 ff ff 	lea    -0x1f00(%rbp),%rdi
  40513c:	e8 df d2 ff ff       	call   402420 <_ZN2sf6StringaSERKS0_@plt>
      { return _M_dataplus._M_p; }
  405141:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  405148:	48 3b bd 20 e0 ff ff 	cmp    -0x1fe0(%rbp),%rdi
  40514f:	74 14                	je     405165 <main+0x2135>
  405151:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  405158:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  40515f:	00 
  405160:	e8 bb d0 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  405165:	48 8b bd a0 e1 ff ff 	mov    -0x1e60(%rbp),%rdi
	if (!_M_is_local())
  40516c:	48 3b bd 28 e0 ff ff 	cmp    -0x1fd8(%rbp),%rdi
  405173:	74 10                	je     405185 <main+0x2155>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  405175:	48 8b 85 b0 e1 ff ff 	mov    -0x1e50(%rbp),%rax
  40517c:	48 8d 70 01          	lea    0x1(%rax),%rsi
  405180:	e8 9b d0 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  405185:	48 8b bd 80 e1 ff ff 	mov    -0x1e80(%rbp),%rdi
	if (!_M_is_local())
  40518c:	48 8d 85 90 e1 ff ff 	lea    -0x1e70(%rbp),%rax
  405193:	48 39 c7             	cmp    %rax,%rdi
  405196:	74 10                	je     4051a8 <main+0x2178>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  405198:	48 8b 85 90 e1 ff ff 	mov    -0x1e70(%rbp),%rax
  40519f:	48 8d 70 01          	lea    0x1(%rax),%rsi
  4051a3:	e8 78 d0 ff ff       	call   402220 <_ZdlPvm@plt>
  4051a8:	4c 89 ef             	mov    %r13,%rdi
  4051ab:	e8 50 d1 ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
  4051b0:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
  4051b7:	e8 44 d1 ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
  4051bc:	e9 d5 f2 ff ff       	jmp    404496 <main+0x1466>
						text.setString(text.getString() + typedtext[0]);
  4051c1:	31 f6                	xor    %esi,%esi
  4051c3:	48 8d bd 00 e1 ff ff 	lea    -0x1f00(%rbp),%rdi
  4051ca:	e8 b1 d0 ff ff       	call   402280 <_ZN2sf6StringixEm@plt>
  4051cf:	8b 30                	mov    (%rax),%esi
  4051d1:	48 8d bd a0 e1 ff ff 	lea    -0x1e60(%rbp),%rdi
  4051d8:	e8 e3 ce ff ff       	call   4020c0 <_ZN2sf6StringC1Ej@plt>
  4051dd:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  4051e4:	e8 c7 d1 ff ff       	call   4023b0 <_ZNK2sf4Text9getStringEv@plt>
  4051e9:	48 89 c6             	mov    %rax,%rsi
  4051ec:	48 8d 95 a0 e1 ff ff 	lea    -0x1e60(%rbp),%rdx
  4051f3:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  4051fa:	e8 d1 ce ff ff       	call   4020d0 <_ZN2sfplERKNS_6StringES2_@plt>
  4051ff:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  405206:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  40520d:	e8 4e d2 ff ff       	call   402460 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  405212:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  405219:	48 8d 85 d0 e1 ff ff 	lea    -0x1e30(%rbp),%rax
  405220:	48 89 85 20 e0 ff ff 	mov    %rax,-0x1fe0(%rbp)
  405227:	48 39 c7             	cmp    %rax,%rdi
  40522a:	74 14                	je     405240 <main+0x2210>
  40522c:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  405233:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  40523a:	00 
  40523b:	e8 e0 cf ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  405240:	48 8b bd a0 e1 ff ff 	mov    -0x1e60(%rbp),%rdi
	if (!_M_is_local())
  405247:	48 8d 85 b0 e1 ff ff 	lea    -0x1e50(%rbp),%rax
  40524e:	48 89 85 28 e0 ff ff 	mov    %rax,-0x1fd8(%rbp)
  405255:	48 39 c7             	cmp    %rax,%rdi
  405258:	74 14                	je     40526e <main+0x223e>
  40525a:	48 8b 85 b0 e1 ff ff 	mov    -0x1e50(%rbp),%rax
  405261:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405268:	00 
  405269:	e8 b2 cf ff ff       	call   402220 <_ZdlPvm@plt>
						typedtext = typedtext.toAnsiString().substr(1);
  40526e:	48 8d 85 a8 e0 ff ff 	lea    -0x1f58(%rbp),%rax
  405275:	4c 8d ad a0 e0 ff ff 	lea    -0x1f60(%rbp),%r13
  40527c:	48 89 c7             	mov    %rax,%rdi
  40527f:	48 89 85 30 e0 ff ff 	mov    %rax,-0x1fd0(%rbp)
  405286:	4c 8d a5 80 e1 ff ff 	lea    -0x1e80(%rbp),%r12
  40528d:	e8 2e d2 ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  405292:	4c 89 ef             	mov    %r13,%rdi
  405295:	e8 26 d2 ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  40529a:	4c 89 ea             	mov    %r13,%rdx
  40529d:	48 8d b5 00 e1 ff ff 	lea    -0x1f00(%rbp),%rsi
  4052a4:	4c 89 e7             	mov    %r12,%rdi
  4052a7:	e8 a4 d1 ff ff       	call   402450 <_ZNK2sf6String12toAnsiStringB5cxx11ERKSt6locale@plt>
  4052ac:	48 8d 85 a0 e1 ff ff 	lea    -0x1e60(%rbp),%rax
  4052b3:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
  4052b7:	ba 01 00 00 00       	mov    $0x1,%edx
  4052bc:	4c 89 e6             	mov    %r12,%rsi
  4052bf:	48 89 c7             	mov    %rax,%rdi
  4052c2:	e8 69 cf ff ff       	call   402230 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@plt>
  4052c7:	48 8b 95 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdx
  4052ce:	48 8d b5 a0 e1 ff ff 	lea    -0x1e60(%rbp),%rsi
  4052d5:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  4052dc:	e8 bf cd ff ff       	call   4020a0 <_ZN2sf6StringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6locale@plt>
  4052e1:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  4052e8:	48 8d bd 00 e1 ff ff 	lea    -0x1f00(%rbp),%rdi
  4052ef:	e8 2c d1 ff ff       	call   402420 <_ZN2sf6StringaSERKS0_@plt>
      { return _M_dataplus._M_p; }
  4052f4:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  4052fb:	48 3b bd 20 e0 ff ff 	cmp    -0x1fe0(%rbp),%rdi
  405302:	74 14                	je     405318 <main+0x22e8>
  405304:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  40530b:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405312:	00 
  405313:	e8 08 cf ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  405318:	48 8b bd a0 e1 ff ff 	mov    -0x1e60(%rbp),%rdi
	if (!_M_is_local())
  40531f:	48 3b bd 28 e0 ff ff 	cmp    -0x1fd8(%rbp),%rdi
  405326:	74 10                	je     405338 <main+0x2308>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  405328:	48 8b 85 b0 e1 ff ff 	mov    -0x1e50(%rbp),%rax
  40532f:	48 8d 70 01          	lea    0x1(%rax),%rsi
  405333:	e8 e8 ce ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  405338:	48 8b bd 80 e1 ff ff 	mov    -0x1e80(%rbp),%rdi
	if (!_M_is_local())
  40533f:	48 8d 85 90 e1 ff ff 	lea    -0x1e70(%rbp),%rax
  405346:	48 39 c7             	cmp    %rax,%rdi
  405349:	74 10                	je     40535b <main+0x232b>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  40534b:	48 8b 85 90 e1 ff ff 	mov    -0x1e70(%rbp),%rax
  405352:	48 8d 70 01          	lea    0x1(%rax),%rsi
  405356:	e8 c5 ce ff ff       	call   402220 <_ZdlPvm@plt>
  40535b:	4c 89 ef             	mov    %r13,%rdi
  40535e:	e8 9d cf ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
  405363:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
  40536a:	e8 91 cf ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
  40536f:	e9 42 ed ff ff       	jmp    4040b6 <main+0x1086>
						text.setString(text.getString() + typedtext[0]);
  405374:	31 f6                	xor    %esi,%esi
  405376:	48 8d bd 00 e1 ff ff 	lea    -0x1f00(%rbp),%rdi
  40537d:	e8 fe ce ff ff       	call   402280 <_ZN2sf6StringixEm@plt>
  405382:	8b 30                	mov    (%rax),%esi
  405384:	48 8d bd a0 e1 ff ff 	lea    -0x1e60(%rbp),%rdi
  40538b:	e8 30 cd ff ff       	call   4020c0 <_ZN2sf6StringC1Ej@plt>
  405390:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  405397:	e8 14 d0 ff ff       	call   4023b0 <_ZNK2sf4Text9getStringEv@plt>
  40539c:	48 89 c6             	mov    %rax,%rsi
  40539f:	48 8d 95 a0 e1 ff ff 	lea    -0x1e60(%rbp),%rdx
  4053a6:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  4053ad:	e8 1e cd ff ff       	call   4020d0 <_ZN2sfplERKNS_6StringES2_@plt>
  4053b2:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  4053b9:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  4053c0:	e8 9b d0 ff ff       	call   402460 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  4053c5:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  4053cc:	48 8d 85 d0 e1 ff ff 	lea    -0x1e30(%rbp),%rax
  4053d3:	48 89 85 20 e0 ff ff 	mov    %rax,-0x1fe0(%rbp)
  4053da:	48 39 c7             	cmp    %rax,%rdi
  4053dd:	74 14                	je     4053f3 <main+0x23c3>
  4053df:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  4053e6:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4053ed:	00 
  4053ee:	e8 2d ce ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  4053f3:	48 8b bd a0 e1 ff ff 	mov    -0x1e60(%rbp),%rdi
	if (!_M_is_local())
  4053fa:	48 8d 85 b0 e1 ff ff 	lea    -0x1e50(%rbp),%rax
  405401:	48 89 85 28 e0 ff ff 	mov    %rax,-0x1fd8(%rbp)
  405408:	48 39 c7             	cmp    %rax,%rdi
  40540b:	74 14                	je     405421 <main+0x23f1>
  40540d:	48 8b 85 b0 e1 ff ff 	mov    -0x1e50(%rbp),%rax
  405414:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  40541b:	00 
  40541c:	e8 ff cd ff ff       	call   402220 <_ZdlPvm@plt>
						typedtext = typedtext.toAnsiString().substr(1);
  405421:	48 8d 85 a8 e0 ff ff 	lea    -0x1f58(%rbp),%rax
  405428:	4c 8d ad a0 e0 ff ff 	lea    -0x1f60(%rbp),%r13
  40542f:	48 89 c7             	mov    %rax,%rdi
  405432:	48 89 85 30 e0 ff ff 	mov    %rax,-0x1fd0(%rbp)
  405439:	4c 8d a5 80 e1 ff ff 	lea    -0x1e80(%rbp),%r12
  405440:	e8 7b d0 ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  405445:	4c 89 ef             	mov    %r13,%rdi
  405448:	e8 73 d0 ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  40544d:	4c 89 ea             	mov    %r13,%rdx
  405450:	48 8d b5 00 e1 ff ff 	lea    -0x1f00(%rbp),%rsi
  405457:	4c 89 e7             	mov    %r12,%rdi
  40545a:	e8 f1 cf ff ff       	call   402450 <_ZNK2sf6String12toAnsiStringB5cxx11ERKSt6locale@plt>
  40545f:	48 8d 85 a0 e1 ff ff 	lea    -0x1e60(%rbp),%rax
  405466:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
  40546a:	ba 01 00 00 00       	mov    $0x1,%edx
  40546f:	4c 89 e6             	mov    %r12,%rsi
  405472:	48 89 c7             	mov    %rax,%rdi
  405475:	e8 b6 cd ff ff       	call   402230 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@plt>
  40547a:	48 8b 95 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdx
  405481:	48 8d b5 a0 e1 ff ff 	lea    -0x1e60(%rbp),%rsi
  405488:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  40548f:	e8 0c cc ff ff       	call   4020a0 <_ZN2sf6StringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6locale@plt>
  405494:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  40549b:	48 8d bd 00 e1 ff ff 	lea    -0x1f00(%rbp),%rdi
  4054a2:	e8 79 cf ff ff       	call   402420 <_ZN2sf6StringaSERKS0_@plt>
      { return _M_dataplus._M_p; }
  4054a7:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  4054ae:	48 3b bd 20 e0 ff ff 	cmp    -0x1fe0(%rbp),%rdi
  4054b5:	74 14                	je     4054cb <main+0x249b>
  4054b7:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  4054be:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4054c5:	00 
  4054c6:	e8 55 cd ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  4054cb:	48 8b bd a0 e1 ff ff 	mov    -0x1e60(%rbp),%rdi
	if (!_M_is_local())
  4054d2:	48 3b bd 28 e0 ff ff 	cmp    -0x1fd8(%rbp),%rdi
  4054d9:	74 10                	je     4054eb <main+0x24bb>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4054db:	48 8b 85 b0 e1 ff ff 	mov    -0x1e50(%rbp),%rax
  4054e2:	48 8d 70 01          	lea    0x1(%rax),%rsi
  4054e6:	e8 35 cd ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  4054eb:	48 8b bd 80 e1 ff ff 	mov    -0x1e80(%rbp),%rdi
	if (!_M_is_local())
  4054f2:	48 8d 85 90 e1 ff ff 	lea    -0x1e70(%rbp),%rax
  4054f9:	48 39 c7             	cmp    %rax,%rdi
  4054fc:	74 10                	je     40550e <main+0x24de>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4054fe:	48 8b 85 90 e1 ff ff 	mov    -0x1e70(%rbp),%rax
  405505:	48 8d 70 01          	lea    0x1(%rax),%rsi
  405509:	e8 12 cd ff ff       	call   402220 <_ZdlPvm@plt>
  40550e:	4c 89 ef             	mov    %r13,%rdi
  405511:	e8 ea cd ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
  405516:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
  40551d:	e8 de cd ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
  405522:	e9 9f e8 ff ff       	jmp    403dc6 <main+0xd96>
  405527:	b8 f0 ac 40 00       	mov    $0x40acf0,%eax
      { return _M_dataplus._M_p; }
  40552c:	48 8b bd 60 e1 ff ff 	mov    -0x1ea0(%rbp),%rdi
  405533:	66 48 0f 6e d8       	movq   %rax,%xmm3
	if (!_M_is_local())
  405538:	48 8d 85 70 e1 ff ff 	lea    -0x1e90(%rbp),%rax
  40553f:	0f 16 1d 92 30 00 00 	movhps 0x3092(%rip),%xmm3        # 4085d8 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xf8>
  405546:	0f 29 9d 30 e0 ff ff 	movaps %xmm3,-0x1fd0(%rbp)
  40554d:	48 39 c7             	cmp    %rax,%rdi
  405550:	74 10                	je     405562 <main+0x2532>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  405552:	48 8b 85 70 e1 ff ff 	mov    -0x1e90(%rbp),%rax
  405559:	48 8d 70 01          	lea    0x1(%rax),%rsi
  40555d:	e8 be cc ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  405562:	48 8b bd 40 e1 ff ff 	mov    -0x1ec0(%rbp),%rdi
	if (!_M_is_local())
  405569:	48 8d 85 50 e1 ff ff 	lea    -0x1eb0(%rbp),%rax
  405570:	48 39 c7             	cmp    %rax,%rdi
  405573:	74 10                	je     405585 <main+0x2555>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  405575:	48 8b 85 50 e1 ff ff 	mov    -0x1eb0(%rbp),%rax
  40557c:	48 8d 70 01          	lea    0x1(%rax),%rsi
  405580:	e8 9b cc ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  405585:	48 8b bd 20 e1 ff ff 	mov    -0x1ee0(%rbp),%rdi
	if (!_M_is_local())
  40558c:	48 8d 85 30 e1 ff ff 	lea    -0x1ed0(%rbp),%rax
  405593:	48 39 c7             	cmp    %rax,%rdi
  405596:	74 14                	je     4055ac <main+0x257c>
  405598:	48 8b 85 30 e1 ff ff 	mov    -0x1ed0(%rbp),%rax
  40559f:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4055a6:	00 
  4055a7:	e8 74 cc ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  4055ac:	48 8b bd 00 e1 ff ff 	mov    -0x1f00(%rbp),%rdi
	if (!_M_is_local())
  4055b3:	48 8d 85 10 e1 ff ff 	lea    -0x1ef0(%rbp),%rax
  4055ba:	48 39 c7             	cmp    %rax,%rdi
  4055bd:	74 14                	je     4055d3 <main+0x25a3>
  4055bf:	48 8b 85 10 e1 ff ff 	mov    -0x1ef0(%rbp),%rax
  4055c6:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4055cd:	00 
  4055ce:	e8 4d cc ff ff       	call   402220 <_ZdlPvm@plt>
}
  4055d3:	48 8d bd c0 e2 ff ff 	lea    -0x1d40(%rbp),%rdi
  4055da:	e8 51 cd ff ff       	call   402330 <_ZN2sf5MusicD1Ev@plt>
  4055df:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  4055e6:	e8 d5 1c 00 00       	call   4072c0 <_ZN2sf4TextD1Ev>
  4055eb:	48 8d bd 30 e2 ff ff 	lea    -0x1dd0(%rbp),%rdi
  4055f2:	e8 59 cc ff ff       	call   402250 <_ZN2sf4FontD1Ev@plt>
  4055f7:	66 0f 6f 95 30 e0 ff 	movdqa -0x1fd0(%rbp),%xmm2
  4055fe:	ff 
  4055ff:	48 8d bd f0 fa ff ff 	lea    -0x510(%rbp),%rdi
  405606:	0f 29 95 f0 fa ff ff 	movaps %xmm2,-0x510(%rbp)
  40560d:	e8 4e ca ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  405612:	66 0f 6f 95 30 e0 ff 	movdqa -0x1fd0(%rbp),%xmm2
  405619:	ff 
  40561a:	48 8d bd 90 f9 ff ff 	lea    -0x670(%rbp),%rdi
  405621:	0f 29 95 90 f9 ff ff 	movaps %xmm2,-0x670(%rbp)
  405628:	e8 33 ca ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  40562d:	66 0f 6f 95 30 e0 ff 	movdqa -0x1fd0(%rbp),%xmm2
  405634:	ff 
  405635:	48 8d bd 30 f8 ff ff 	lea    -0x7d0(%rbp),%rdi
  40563c:	0f 29 95 30 f8 ff ff 	movaps %xmm2,-0x7d0(%rbp)
  405643:	e8 18 ca ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  405648:	66 0f 6f 95 30 e0 ff 	movdqa -0x1fd0(%rbp),%xmm2
  40564f:	ff 
  405650:	48 8d bd d0 f6 ff ff 	lea    -0x930(%rbp),%rdi
  405657:	0f 29 95 d0 f6 ff ff 	movaps %xmm2,-0x930(%rbp)
  40565e:	e8 fd c9 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  405663:	66 0f 6f 95 30 e0 ff 	movdqa -0x1fd0(%rbp),%xmm2
  40566a:	ff 
  40566b:	48 8d bd 70 f5 ff ff 	lea    -0xa90(%rbp),%rdi
  405672:	0f 29 95 70 f5 ff ff 	movaps %xmm2,-0xa90(%rbp)
  405679:	e8 e2 c9 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  40567e:	66 0f 6f 95 30 e0 ff 	movdqa -0x1fd0(%rbp),%xmm2
  405685:	ff 
  405686:	48 8d bd 10 f4 ff ff 	lea    -0xbf0(%rbp),%rdi
  40568d:	0f 29 95 10 f4 ff ff 	movaps %xmm2,-0xbf0(%rbp)
  405694:	e8 c7 c9 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  405699:	66 0f 6f 95 30 e0 ff 	movdqa -0x1fd0(%rbp),%xmm2
  4056a0:	ff 
  4056a1:	48 8d bd b0 f2 ff ff 	lea    -0xd50(%rbp),%rdi
  4056a8:	0f 29 95 b0 f2 ff ff 	movaps %xmm2,-0xd50(%rbp)
  4056af:	e8 ac c9 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  4056b4:	66 0f 6f 95 30 e0 ff 	movdqa -0x1fd0(%rbp),%xmm2
  4056bb:	ff 
  4056bc:	48 8d bd 50 f1 ff ff 	lea    -0xeb0(%rbp),%rdi
  4056c3:	0f 29 95 50 f1 ff ff 	movaps %xmm2,-0xeb0(%rbp)
  4056ca:	e8 91 c9 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  4056cf:	66 0f 6f 95 30 e0 ff 	movdqa -0x1fd0(%rbp),%xmm2
  4056d6:	ff 
  4056d7:	48 8d bd f0 ef ff ff 	lea    -0x1010(%rbp),%rdi
  4056de:	0f 29 95 f0 ef ff ff 	movaps %xmm2,-0x1010(%rbp)
  4056e5:	e8 76 c9 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  4056ea:	66 0f 6f 95 30 e0 ff 	movdqa -0x1fd0(%rbp),%xmm2
  4056f1:	ff 
  4056f2:	48 8d bd 90 ee ff ff 	lea    -0x1170(%rbp),%rdi
  4056f9:	0f 29 95 90 ee ff ff 	movaps %xmm2,-0x1170(%rbp)
  405700:	e8 5b c9 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  405705:	66 0f 6f 95 30 e0 ff 	movdqa -0x1fd0(%rbp),%xmm2
  40570c:	ff 
  40570d:	48 8d bd 30 ed ff ff 	lea    -0x12d0(%rbp),%rdi
  405714:	0f 29 95 30 ed ff ff 	movaps %xmm2,-0x12d0(%rbp)
  40571b:	e8 40 c9 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  405720:	66 0f 6f 95 30 e0 ff 	movdqa -0x1fd0(%rbp),%xmm2
  405727:	ff 
  405728:	48 8d bd d0 eb ff ff 	lea    -0x1430(%rbp),%rdi
  40572f:	0f 29 95 d0 eb ff ff 	movaps %xmm2,-0x1430(%rbp)
  405736:	e8 25 c9 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  40573b:	66 0f 6f 95 30 e0 ff 	movdqa -0x1fd0(%rbp),%xmm2
  405742:	ff 
  405743:	48 8d bd 70 ea ff ff 	lea    -0x1590(%rbp),%rdi
  40574a:	0f 29 95 70 ea ff ff 	movaps %xmm2,-0x1590(%rbp)
  405751:	e8 0a c9 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  405756:	66 0f 6f 95 30 e0 ff 	movdqa -0x1fd0(%rbp),%xmm2
  40575d:	ff 
  40575e:	48 8d bd 10 e9 ff ff 	lea    -0x16f0(%rbp),%rdi
  405765:	0f 29 95 10 e9 ff ff 	movaps %xmm2,-0x16f0(%rbp)
  40576c:	e8 ef c8 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  405771:	66 0f 6f 95 30 e0 ff 	movdqa -0x1fd0(%rbp),%xmm2
  405778:	ff 
  405779:	48 8d bd b0 e7 ff ff 	lea    -0x1850(%rbp),%rdi
  405780:	0f 29 95 b0 e7 ff ff 	movaps %xmm2,-0x1850(%rbp)
  405787:	e8 d4 c8 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  40578c:	66 0f 6f 95 30 e0 ff 	movdqa -0x1fd0(%rbp),%xmm2
  405793:	ff 
  405794:	48 8d bd 50 e6 ff ff 	lea    -0x19b0(%rbp),%rdi
  40579b:	0f 29 95 50 e6 ff ff 	movaps %xmm2,-0x19b0(%rbp)
  4057a2:	e8 b9 c8 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  4057a7:	66 0f 6f 95 30 e0 ff 	movdqa -0x1fd0(%rbp),%xmm2
  4057ae:	ff 
  4057af:	48 8d bd f0 e4 ff ff 	lea    -0x1b10(%rbp),%rdi
  4057b6:	0f 29 95 f0 e4 ff ff 	movaps %xmm2,-0x1b10(%rbp)
  4057bd:	e8 9e c8 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  4057c2:	66 0f 6f 95 30 e0 ff 	movdqa -0x1fd0(%rbp),%xmm2
  4057c9:	ff 
  4057ca:	48 8d bd 90 e3 ff ff 	lea    -0x1c70(%rbp),%rdi
  4057d1:	0f 29 95 90 e3 ff ff 	movaps %xmm2,-0x1c70(%rbp)
  4057d8:	e8 83 c8 ff ff       	call   402060 <_ZN2sf5ShapeD2Ev@plt>
  4057dd:	48 8d bd c0 fd ff ff 	lea    -0x240(%rbp),%rdi
  4057e4:	e8 57 cc ff ff       	call   402440 <_ZN2sf12RenderWindowD1Ev@plt>
  4057e9:	31 c0                	xor    %eax,%eax
  4057eb:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
  4057ef:	5b                   	pop    %rbx
  4057f0:	41 5c                	pop    %r12
  4057f2:	41 5d                	pop    %r13
  4057f4:	41 5e                	pop    %r14
  4057f6:	41 5f                	pop    %r15
  4057f8:	5d                   	pop    %rbp
  4057f9:	c3                   	ret    
				if(temp_time >= sf::seconds(3.0f) && i < BUTTON_AMOUNT && flag){
  4057fa:	83 bd 08 e0 ff ff 05 	cmpl   $0x5,-0x1ff8(%rbp)
  405801:	0f 8f 58 e6 ff ff    	jg     403e5f <main+0xe2f>
  405807:	84 d2                	test   %dl,%dl
  405809:	0f 84 47 e6 ff ff    	je     403e56 <main+0xe26>
					temp_clock.restart();
  40580f:	48 8d bd 80 e0 ff ff 	lea    -0x1f80(%rbp),%rdi
  405816:	e8 b5 cb ff ff       	call   4023d0 <_ZN2sf5Clock7restartEv@plt>
					writeGreenLed(fd, seqGreenLeds[i]);
  40581b:	48 63 85 08 e0 ff ff 	movslq -0x1ff8(%rbp),%rax
	ioctl(fd, WR_GREEN_LEDS);
  405822:	be 66 61 00 00       	mov    $0x6166,%esi
  405827:	44 89 ff             	mov    %r15d,%edi
					writeGreenLed(fd, seqGreenLeds[i]);
  40582a:	49 89 c6             	mov    %rax,%r14
  40582d:	8b 84 85 80 e1 ff ff 	mov    -0x1e80(%rbp,%rax,4),%eax
  405834:	89 85 a0 e0 ff ff    	mov    %eax,-0x1f60(%rbp)
	ioctl(fd, WR_GREEN_LEDS);
  40583a:	31 c0                	xor    %eax,%eax
  40583c:	e8 af ca ff ff       	call   4022f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  405841:	ba 04 00 00 00       	mov    $0x4,%edx
  405846:	48 8d b5 a0 e0 ff ff 	lea    -0x1f60(%rbp),%rsi
  40584d:	44 89 ff             	mov    %r15d,%edi
  405850:	e8 8b c8 ff ff       	call   4020e0 <write@plt>
					i++;
  405855:	41 83 c6 01          	add    $0x1,%r14d
  405859:	44 89 b5 08 e0 ff ff 	mov    %r14d,-0x1ff8(%rbp)
  405860:	e9 02 e6 ff ff       	jmp    403e67 <main+0xe37>
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
	__out.setstate(ios_base::badbit);
      else
	__ostream_insert(__out, __s,
  405865:	ba 1e 00 00 00       	mov    $0x1e,%edx
  40586a:	be 80 82 40 00       	mov    $0x408280,%esi
  40586f:	bf 00 b3 40 00       	mov    $0x40b300,%edi
  405874:	e8 e7 c9 ff ff       	call   402260 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   *  for more on this subject.
  */
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }
  405879:	48 8b 05 80 5a 00 00 	mov    0x5a80(%rip),%rax        # 40b300 <_ZSt4cout@@GLIBCXX_3.4>
  405880:	48 8b 40 e8          	mov    -0x18(%rax),%rax
  405884:	48 8b 80 f0 b3 40 00 	mov    0x40b3f0(%rax),%rax

  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
  40588b:	48 85 c0             	test   %rax,%rax
  40588e:	0f 84 df 06 00 00    	je     405f73 <main+0x2f43>
       *  @return  The converted character.
      */
      char_type
      widen(char __c) const
      {
	if (_M_widen_ok)
  405894:	80 78 38 00          	cmpb   $0x0,0x38(%rax)
  405898:	0f 84 3d 05 00 00    	je     405ddb <main+0x2dab>
	  return _M_widen[static_cast<unsigned char>(__c)];
  40589e:	0f be 70 43          	movsbl 0x43(%rax),%esi
  4058a2:	e9 50 05 00 00       	jmp    405df7 <main+0x2dc7>
				unsigned int mask = switches ^ oldSwitches;
  4058a7:	31 c3                	xor    %eax,%ebx
							if (temp == 1)
  4058a9:	f6 c3 01             	test   $0x1,%bl
  4058ac:	74 23                	je     4058d1 <main+0x28a1>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4058ae:	f3 0f 7e 85 20 e2 ff 	movq   -0x1de0(%rbp),%xmm0
  4058b5:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  4058b6:	83 b5 18 e2 ff ff 01 	xorl   $0x1,-0x1de8(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4058bd:	f3 0f 7e 0d fb 2c 00 	movq   0x2cfb(%rip),%xmm1        # 4085c0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  4058c4:	00 
  4058c5:	66 0f ef c1          	pxor   %xmm1,%xmm0
  4058c9:	66 0f d6 85 20 e2 ff 	movq   %xmm0,-0x1de0(%rbp)
  4058d0:	ff 
							if (temp == 1)
  4058d1:	f6 c3 02             	test   $0x2,%bl
  4058d4:	74 2a                	je     405900 <main+0x28d0>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4058d6:	f3 0f 7e 85 1c e2 ff 	movq   -0x1de4(%rbp),%xmm0
  4058dd:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  4058de:	83 b5 14 e2 ff ff 01 	xorl   $0x1,-0x1dec(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4058e5:	f3 0f 7e 0d d3 2c 00 	movq   0x2cd3(%rip),%xmm1        # 4085c0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  4058ec:	00 
									currMatrix[i * 3 + (j + 1)] ^= 1;
  4058ed:	83 b5 24 e2 ff ff 01 	xorl   $0x1,-0x1ddc(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4058f4:	66 0f ef c1          	pxor   %xmm1,%xmm0
  4058f8:	66 0f d6 85 1c e2 ff 	movq   %xmm0,-0x1de4(%rbp)
  4058ff:	ff 
							mask = mask >> 1;
  405900:	89 da                	mov    %ebx,%edx
  405902:	c1 ea 03             	shr    $0x3,%edx
							if (temp == 1)
  405905:	f6 c3 04             	test   $0x4,%bl
  405908:	74 23                	je     40592d <main+0x28fd>
								currMatrix[i*3 + j] ^= 1;
  40590a:	f3 0f 7e 85 1c e2 ff 	movq   -0x1de4(%rbp),%xmm0
  405911:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  405912:	83 b5 10 e2 ff ff 01 	xorl   $0x1,-0x1df0(%rbp)
								currMatrix[i*3 + j] ^= 1;
  405919:	f3 0f 7e 0d 9f 2c 00 	movq   0x2c9f(%rip),%xmm1        # 4085c0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  405920:	00 
  405921:	66 0f ef c1          	pxor   %xmm1,%xmm0
  405925:	66 0f d6 85 1c e2 ff 	movq   %xmm0,-0x1de4(%rbp)
  40592c:	ff 
							if (temp == 1)
  40592d:	f6 c2 01             	test   $0x1,%dl
  405930:	74 2a                	je     40595c <main+0x292c>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  405932:	f3 0f 7e 85 14 e2 ff 	movq   -0x1dec(%rbp),%xmm0
  405939:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  40593a:	83 b5 0c e2 ff ff 01 	xorl   $0x1,-0x1df4(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  405941:	f3 0f 7e 0d 77 2c 00 	movq   0x2c77(%rip),%xmm1        # 4085c0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  405948:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  405949:	83 b5 24 e2 ff ff 01 	xorl   $0x1,-0x1ddc(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  405950:	66 0f ef c1          	pxor   %xmm1,%xmm0
  405954:	66 0f d6 85 14 e2 ff 	movq   %xmm0,-0x1dec(%rbp)
  40595b:	ff 
							if (temp == 1)
  40595c:	f6 c2 02             	test   $0x2,%dl
  40595f:	74 31                	je     405992 <main+0x2962>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  405961:	f3 0f 7e 85 10 e2 ff 	movq   -0x1df0(%rbp),%xmm0
  405968:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  405969:	83 b5 08 e2 ff ff 01 	xorl   $0x1,-0x1df8(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  405970:	f3 0f 7e 0d 48 2c 00 	movq   0x2c48(%rip),%xmm1        # 4085c0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  405977:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  405978:	83 b5 20 e2 ff ff 01 	xorl   $0x1,-0x1de0(%rbp)
									currMatrix[i * 3 + (j + 1)] ^= 1;
  40597f:	83 b5 18 e2 ff ff 01 	xorl   $0x1,-0x1de8(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  405986:	66 0f ef c1          	pxor   %xmm1,%xmm0
  40598a:	66 0f d6 85 10 e2 ff 	movq   %xmm0,-0x1df0(%rbp)
  405991:	ff 
							mask = mask >> 1;
  405992:	89 d8                	mov    %ebx,%eax
  405994:	c1 e8 06             	shr    $0x6,%eax
							if (temp == 1)
  405997:	80 e2 04             	and    $0x4,%dl
  40599a:	74 2a                	je     4059c6 <main+0x2996>
								currMatrix[i*3 + j] ^= 1;
  40599c:	f3 0f 7e 85 10 e2 ff 	movq   -0x1df0(%rbp),%xmm0
  4059a3:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  4059a4:	83 b5 04 e2 ff ff 01 	xorl   $0x1,-0x1dfc(%rbp)
								currMatrix[i*3 + j] ^= 1;
  4059ab:	f3 0f 7e 0d 0d 2c 00 	movq   0x2c0d(%rip),%xmm1        # 4085c0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  4059b2:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  4059b3:	83 b5 1c e2 ff ff 01 	xorl   $0x1,-0x1de4(%rbp)
								currMatrix[i*3 + j] ^= 1;
  4059ba:	66 0f ef c1          	pxor   %xmm1,%xmm0
  4059be:	66 0f d6 85 10 e2 ff 	movq   %xmm0,-0x1df0(%rbp)
  4059c5:	ff 
							if (temp == 1)
  4059c6:	a8 01                	test   $0x1,%al
  4059c8:	74 2a                	je     4059f4 <main+0x29c4>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4059ca:	f3 0f 7e 85 08 e2 ff 	movq   -0x1df8(%rbp),%xmm0
  4059d1:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  4059d2:	83 b5 00 e2 ff ff 01 	xorl   $0x1,-0x1e00(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4059d9:	f3 0f 7e 0d df 2b 00 	movq   0x2bdf(%rip),%xmm1        # 4085c0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  4059e0:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  4059e1:	83 b5 18 e2 ff ff 01 	xorl   $0x1,-0x1de8(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4059e8:	66 0f ef c1          	pxor   %xmm1,%xmm0
  4059ec:	66 0f d6 85 08 e2 ff 	movq   %xmm0,-0x1df8(%rbp)
  4059f3:	ff 
							if (temp == 1)
  4059f4:	a8 02                	test   $0x2,%al
  4059f6:	74 31                	je     405a29 <main+0x29f9>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  4059f8:	f3 0f 7e 85 04 e2 ff 	movq   -0x1dfc(%rbp),%xmm0
  4059ff:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  405a00:	83 b5 fc e1 ff ff 01 	xorl   $0x1,-0x1e04(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  405a07:	f3 0f 7e 0d b1 2b 00 	movq   0x2bb1(%rip),%xmm1        # 4085c0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  405a0e:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  405a0f:	83 b5 14 e2 ff ff 01 	xorl   $0x1,-0x1dec(%rbp)
									currMatrix[i * 3 + (j + 1)] ^= 1;
  405a16:	83 b5 0c e2 ff ff 01 	xorl   $0x1,-0x1df4(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  405a1d:	66 0f ef c1          	pxor   %xmm1,%xmm0
  405a21:	66 0f d6 85 04 e2 ff 	movq   %xmm0,-0x1dfc(%rbp)
  405a28:	ff 
							mask = mask >> 1;
  405a29:	89 da                	mov    %ebx,%edx
  405a2b:	c1 ea 09             	shr    $0x9,%edx
							if (temp == 1)
  405a2e:	a8 04                	test   $0x4,%al
  405a30:	74 2a                	je     405a5c <main+0x2a2c>
								currMatrix[i*3 + j] ^= 1;
  405a32:	f3 0f 7e 85 04 e2 ff 	movq   -0x1dfc(%rbp),%xmm0
  405a39:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  405a3a:	83 b5 f8 e1 ff ff 01 	xorl   $0x1,-0x1e08(%rbp)
								currMatrix[i*3 + j] ^= 1;
  405a41:	f3 0f 7e 0d 77 2b 00 	movq   0x2b77(%rip),%xmm1        # 4085c0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  405a48:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  405a49:	83 b5 10 e2 ff ff 01 	xorl   $0x1,-0x1df0(%rbp)
								currMatrix[i*3 + j] ^= 1;
  405a50:	66 0f ef c1          	pxor   %xmm1,%xmm0
  405a54:	66 0f d6 85 04 e2 ff 	movq   %xmm0,-0x1dfc(%rbp)
  405a5b:	ff 
							if (temp == 1)
  405a5c:	f6 c2 01             	test   $0x1,%dl
  405a5f:	74 2a                	je     405a8b <main+0x2a5b>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  405a61:	f3 0f 7e 85 fc e1 ff 	movq   -0x1e04(%rbp),%xmm0
  405a68:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  405a69:	83 b5 f4 e1 ff ff 01 	xorl   $0x1,-0x1e0c(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  405a70:	f3 0f 7e 0d 48 2b 00 	movq   0x2b48(%rip),%xmm1        # 4085c0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  405a77:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  405a78:	83 b5 0c e2 ff ff 01 	xorl   $0x1,-0x1df4(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  405a7f:	66 0f ef c1          	pxor   %xmm1,%xmm0
  405a83:	66 0f d6 85 fc e1 ff 	movq   %xmm0,-0x1e04(%rbp)
  405a8a:	ff 
							if (temp == 1)
  405a8b:	f6 c2 02             	test   $0x2,%dl
  405a8e:	74 31                	je     405ac1 <main+0x2a91>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  405a90:	f3 0f 7e 85 f8 e1 ff 	movq   -0x1e08(%rbp),%xmm0
  405a97:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  405a98:	83 b5 f0 e1 ff ff 01 	xorl   $0x1,-0x1e10(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  405a9f:	f3 0f 7e 0d 19 2b 00 	movq   0x2b19(%rip),%xmm1        # 4085c0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  405aa6:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  405aa7:	83 b5 08 e2 ff ff 01 	xorl   $0x1,-0x1df8(%rbp)
									currMatrix[i * 3 + (j + 1)] ^= 1;
  405aae:	83 b5 00 e2 ff ff 01 	xorl   $0x1,-0x1e00(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  405ab5:	66 0f ef c1          	pxor   %xmm1,%xmm0
  405ab9:	66 0f d6 85 f8 e1 ff 	movq   %xmm0,-0x1e08(%rbp)
  405ac0:	ff 
							mask = mask >> 1;
  405ac1:	89 d8                	mov    %ebx,%eax
  405ac3:	c1 e8 0c             	shr    $0xc,%eax
							if (temp == 1)
  405ac6:	80 e2 04             	and    $0x4,%dl
  405ac9:	74 2a                	je     405af5 <main+0x2ac5>
								currMatrix[i*3 + j] ^= 1;
  405acb:	f3 0f 7e 85 f8 e1 ff 	movq   -0x1e08(%rbp),%xmm0
  405ad2:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  405ad3:	83 b5 ec e1 ff ff 01 	xorl   $0x1,-0x1e14(%rbp)
								currMatrix[i*3 + j] ^= 1;
  405ada:	f3 0f 7e 0d de 2a 00 	movq   0x2ade(%rip),%xmm1        # 4085c0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  405ae1:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  405ae2:	83 b5 04 e2 ff ff 01 	xorl   $0x1,-0x1dfc(%rbp)
								currMatrix[i*3 + j] ^= 1;
  405ae9:	66 0f ef c1          	pxor   %xmm1,%xmm0
  405aed:	66 0f d6 85 f8 e1 ff 	movq   %xmm0,-0x1e08(%rbp)
  405af4:	ff 
							if (temp == 1)
  405af5:	a8 01                	test   $0x1,%al
  405af7:	74 2a                	je     405b23 <main+0x2af3>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  405af9:	f3 0f 7e 85 f0 e1 ff 	movq   -0x1e10(%rbp),%xmm0
  405b00:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  405b01:	83 b5 e8 e1 ff ff 01 	xorl   $0x1,-0x1e18(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  405b08:	f3 0f 7e 0d b0 2a 00 	movq   0x2ab0(%rip),%xmm1        # 4085c0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  405b0f:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  405b10:	83 b5 00 e2 ff ff 01 	xorl   $0x1,-0x1e00(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  405b17:	66 0f ef c1          	pxor   %xmm1,%xmm0
  405b1b:	66 0f d6 85 f0 e1 ff 	movq   %xmm0,-0x1e10(%rbp)
  405b22:	ff 
							if (temp == 1)
  405b23:	a8 02                	test   $0x2,%al
  405b25:	74 31                	je     405b58 <main+0x2b28>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  405b27:	f3 0f 7e 85 ec e1 ff 	movq   -0x1e14(%rbp),%xmm0
  405b2e:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  405b2f:	83 b5 e4 e1 ff ff 01 	xorl   $0x1,-0x1e1c(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  405b36:	f3 0f 7e 0d 82 2a 00 	movq   0x2a82(%rip),%xmm1        # 4085c0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  405b3d:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  405b3e:	83 b5 fc e1 ff ff 01 	xorl   $0x1,-0x1e04(%rbp)
									currMatrix[i * 3 + (j + 1)] ^= 1;
  405b45:	83 b5 f4 e1 ff ff 01 	xorl   $0x1,-0x1e0c(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  405b4c:	66 0f ef c1          	pxor   %xmm1,%xmm0
  405b50:	66 0f d6 85 ec e1 ff 	movq   %xmm0,-0x1e14(%rbp)
  405b57:	ff 
							mask = mask >> 1;
  405b58:	c1 eb 0f             	shr    $0xf,%ebx
							if (temp == 1)
  405b5b:	a8 04                	test   $0x4,%al
  405b5d:	74 2a                	je     405b89 <main+0x2b59>
								currMatrix[i*3 + j] ^= 1;
  405b5f:	f3 0f 7e 85 ec e1 ff 	movq   -0x1e14(%rbp),%xmm0
  405b66:	ff 
									currMatrix[(i - 1) * 3 + j] ^= 1;
  405b67:	83 b5 e0 e1 ff ff 01 	xorl   $0x1,-0x1e20(%rbp)
								currMatrix[i*3 + j] ^= 1;
  405b6e:	f3 0f 7e 0d 4a 2a 00 	movq   0x2a4a(%rip),%xmm1        # 4085c0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  405b75:	00 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  405b76:	83 b5 f8 e1 ff ff 01 	xorl   $0x1,-0x1e08(%rbp)
								currMatrix[i*3 + j] ^= 1;
  405b7d:	66 0f ef c1          	pxor   %xmm1,%xmm0
  405b81:	66 0f d6 85 ec e1 ff 	movq   %xmm0,-0x1e14(%rbp)
  405b88:	ff 
							if (temp == 1)
  405b89:	f6 c3 01             	test   $0x1,%bl
  405b8c:	74 23                	je     405bb1 <main+0x2b81>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  405b8e:	f3 0f 7e 85 e4 e1 ff 	movq   -0x1e1c(%rbp),%xmm0
  405b95:	ff 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  405b96:	83 b5 f4 e1 ff ff 01 	xorl   $0x1,-0x1e0c(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  405b9d:	f3 0f 7e 0d 1b 2a 00 	movq   0x2a1b(%rip),%xmm1        # 4085c0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  405ba4:	00 
  405ba5:	66 0f ef c1          	pxor   %xmm1,%xmm0
  405ba9:	66 0f d6 85 e4 e1 ff 	movq   %xmm0,-0x1e1c(%rbp)
  405bb0:	ff 
							if (temp == 1)
  405bb1:	f6 c3 02             	test   $0x2,%bl
  405bb4:	74 2a                	je     405be0 <main+0x2bb0>
									currMatrix[i * 3 + (j - 1)] ^= 1;
  405bb6:	f3 0f 7e 85 e0 e1 ff 	movq   -0x1e20(%rbp),%xmm0
  405bbd:	ff 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  405bbe:	83 b5 f0 e1 ff ff 01 	xorl   $0x1,-0x1e10(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  405bc5:	f3 0f 7e 0d f3 29 00 	movq   0x29f3(%rip),%xmm1        # 4085c0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  405bcc:	00 
									currMatrix[i * 3 + (j + 1)] ^= 1;
  405bcd:	83 b5 e8 e1 ff ff 01 	xorl   $0x1,-0x1e18(%rbp)
									currMatrix[i * 3 + (j - 1)] ^= 1;
  405bd4:	66 0f ef c1          	pxor   %xmm1,%xmm0
  405bd8:	66 0f d6 85 e0 e1 ff 	movq   %xmm0,-0x1e20(%rbp)
  405bdf:	ff 
							if (temp == 1)
  405be0:	80 e3 04             	and    $0x4,%bl
  405be3:	0f 85 25 02 00 00    	jne    405e0e <main+0x2dde>
					for (int i = 5; i >= 0; i--)
  405be9:	4c 8d 8d 1c e2 ff ff 	lea    -0x1de4(%rbp),%r9
				elapsedtime_text += clock_text.restart();
  405bf0:	41 b8 03 00 00 00    	mov    $0x3,%r8d
					redLeds = 0x00000;
  405bf6:	31 db                	xor    %ebx,%ebx
  405bf8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  405bff:	00 
						for (int j = 2; j >= 0; j--)
  405c00:	41 8d 40 fd          	lea    -0x3(%r8),%eax
				elapsedtime_text += clock_text.restart();
  405c04:	4c 89 ce             	mov    %r9,%rsi
							for(int m = 1; m <= pot; ++m)
  405c07:	85 c0                	test   %eax,%eax
  405c09:	0f 8e c1 00 00 00    	jle    405cd0 <main+0x2ca0>
								redLeds += currMatrix[i * 3 + j] * m;
  405c0f:	8b 56 08             	mov    0x8(%rsi),%edx
  405c12:	01 d3                	add    %edx,%ebx
							for(int m = 1; m <= pot; ++m)
  405c14:	83 f8 01             	cmp    $0x1,%eax
  405c17:	0f 84 b3 00 00 00    	je     405cd0 <main+0x2ca0>
								redLeds += currMatrix[i * 3 + j] * m;
  405c1d:	8d 0c 12             	lea    (%rdx,%rdx,1),%ecx
  405c20:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  405c22:	83 f8 02             	cmp    $0x2,%eax
  405c25:	0f 84 a5 00 00 00    	je     405cd0 <main+0x2ca0>
								redLeds += currMatrix[i * 3 + j] * m;
  405c2b:	01 d1                	add    %edx,%ecx
  405c2d:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  405c2f:	83 f8 03             	cmp    $0x3,%eax
  405c32:	0f 84 98 00 00 00    	je     405cd0 <main+0x2ca0>
								redLeds += currMatrix[i * 3 + j] * m;
  405c38:	8d 3c 95 00 00 00 00 	lea    0x0(,%rdx,4),%edi
  405c3f:	01 fb                	add    %edi,%ebx
							for(int m = 1; m <= pot; ++m)
  405c41:	83 f8 04             	cmp    $0x4,%eax
  405c44:	0f 84 86 00 00 00    	je     405cd0 <main+0x2ca0>
								redLeds += currMatrix[i * 3 + j] * m;
  405c4a:	01 d7                	add    %edx,%edi
  405c4c:	01 fb                	add    %edi,%ebx
							for(int m = 1; m <= pot; ++m)
  405c4e:	83 f8 05             	cmp    $0x5,%eax
  405c51:	74 7d                	je     405cd0 <main+0x2ca0>
								redLeds += currMatrix[i * 3 + j] * m;
  405c53:	8d 1c 4b             	lea    (%rbx,%rcx,2),%ebx
							for(int m = 1; m <= pot; ++m)
  405c56:	83 f8 06             	cmp    $0x6,%eax
  405c59:	74 75                	je     405cd0 <main+0x2ca0>
								redLeds += currMatrix[i * 3 + j] * m;
  405c5b:	8d 0c d5 00 00 00 00 	lea    0x0(,%rdx,8),%ecx
  405c62:	89 cf                	mov    %ecx,%edi
  405c64:	29 d7                	sub    %edx,%edi
  405c66:	01 fb                	add    %edi,%ebx
							for(int m = 1; m <= pot; ++m)
  405c68:	83 f8 07             	cmp    $0x7,%eax
  405c6b:	74 63                	je     405cd0 <main+0x2ca0>
								redLeds += currMatrix[i * 3 + j] * m;
  405c6d:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  405c6f:	83 f8 08             	cmp    $0x8,%eax
  405c72:	74 5c                	je     405cd0 <main+0x2ca0>
								redLeds += currMatrix[i * 3 + j] * m;
  405c74:	01 d1                	add    %edx,%ecx
  405c76:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  405c78:	83 f8 09             	cmp    $0x9,%eax
  405c7b:	74 53                	je     405cd0 <main+0x2ca0>
								redLeds += currMatrix[i * 3 + j] * m;
  405c7d:	8d 0c 92             	lea    (%rdx,%rdx,4),%ecx
  405c80:	01 c9                	add    %ecx,%ecx
  405c82:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  405c84:	83 f8 0a             	cmp    $0xa,%eax
  405c87:	74 47                	je     405cd0 <main+0x2ca0>
								redLeds += currMatrix[i * 3 + j] * m;
  405c89:	01 d1                	add    %edx,%ecx
  405c8b:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  405c8d:	83 f8 0b             	cmp    $0xb,%eax
  405c90:	74 3e                	je     405cd0 <main+0x2ca0>
								redLeds += currMatrix[i * 3 + j] * m;
  405c92:	8d 0c 52             	lea    (%rdx,%rdx,2),%ecx
  405c95:	c1 e1 02             	shl    $0x2,%ecx
  405c98:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  405c9a:	83 f8 0c             	cmp    $0xc,%eax
  405c9d:	74 31                	je     405cd0 <main+0x2ca0>
								redLeds += currMatrix[i * 3 + j] * m;
  405c9f:	01 d1                	add    %edx,%ecx
  405ca1:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  405ca3:	83 f8 0d             	cmp    $0xd,%eax
  405ca6:	74 28                	je     405cd0 <main+0x2ca0>
								redLeds += currMatrix[i * 3 + j] * m;
  405ca8:	6b ca 0e             	imul   $0xe,%edx,%ecx
  405cab:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  405cad:	83 f8 0e             	cmp    $0xe,%eax
  405cb0:	74 1e                	je     405cd0 <main+0x2ca0>
								redLeds += currMatrix[i * 3 + j] * m;
  405cb2:	89 d1                	mov    %edx,%ecx
  405cb4:	c1 e1 04             	shl    $0x4,%ecx
  405cb7:	89 cf                	mov    %ecx,%edi
  405cb9:	29 d7                	sub    %edx,%edi
  405cbb:	01 fb                	add    %edi,%ebx
							for(int m = 1; m <= pot; ++m)
  405cbd:	83 f8 0f             	cmp    $0xf,%eax
  405cc0:	74 0e                	je     405cd0 <main+0x2ca0>
								redLeds += currMatrix[i * 3 + j] * m;
  405cc2:	01 cb                	add    %ecx,%ebx
							for(int m = 1; m <= pot; ++m)
  405cc4:	83 f8 10             	cmp    $0x10,%eax
  405cc7:	74 07                	je     405cd0 <main+0x2ca0>
								redLeds += currMatrix[i * 3 + j] * m;
  405cc9:	6b d2 11             	imul   $0x11,%edx,%edx
  405ccc:	01 d3                	add    %edx,%ebx
							for(int m = 1; m <= pot; ++m)
  405cce:	66 90                	xchg   %ax,%ax
						for (int j = 2; j >= 0; j--)
  405cd0:	83 c0 01             	add    $0x1,%eax
  405cd3:	48 83 ee 04          	sub    $0x4,%rsi
  405cd7:	41 39 c0             	cmp    %eax,%r8d
  405cda:	0f 85 27 ff ff ff    	jne    405c07 <main+0x2bd7>
					for (int i = 5; i >= 0; i--)
  405ce0:	41 83 c0 03          	add    $0x3,%r8d
  405ce4:	49 83 e9 0c          	sub    $0xc,%r9
  405ce8:	41 83 f8 15          	cmp    $0x15,%r8d
  405cec:	0f 85 0e ff ff ff    	jne    405c00 <main+0x2bd0>
	ioctl(fd, WR_RED_LEDS);
  405cf2:	be 65 61 00 00       	mov    $0x6165,%esi
  405cf7:	44 89 ff             	mov    %r15d,%edi
  405cfa:	31 c0                	xor    %eax,%eax
  405cfc:	89 9d 80 e1 ff ff    	mov    %ebx,-0x1e80(%rbp)
  405d02:	e8 e9 c5 ff ff       	call   4022f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  405d07:	ba 04 00 00 00       	mov    $0x4,%edx
  405d0c:	48 8d b5 80 e1 ff ff 	lea    -0x1e80(%rbp),%rsi
  405d13:	44 89 ff             	mov    %r15d,%edi
  405d16:	e8 c5 c3 ff ff       	call   4020e0 <write@plt>
}
  405d1b:	e9 ee e7 ff ff       	jmp    40450e <main+0x14de>
					input[j] = button;
  405d20:	48 63 c2             	movslq %edx,%rax
					j++;
  405d23:	83 c2 01             	add    $0x1,%edx
  405d26:	89 8d fc df ff ff    	mov    %ecx,-0x2004(%rbp)
					input[j] = button;
  405d2c:	89 8c 85 e0 e0 ff ff 	mov    %ecx,-0x1f20(%rbp,%rax,4)
					j++;
  405d33:	89 95 00 e0 ff ff    	mov    %edx,-0x2000(%rbp)
				if (j >= BUTTON_AMOUNT){
  405d39:	83 bd 00 e0 ff ff 06 	cmpl   $0x6,-0x2000(%rbp)
  405d40:	0f 85 17 e0 ff ff    	jne    403d5d <main+0xd2d>
  405d46:	e9 a2 e1 ff ff       	jmp    403eed <main+0xebd>
		printf("Syntax: %s <device file path>\n", argv[0]);
  405d4b:	48 8b 36             	mov    (%rsi),%rsi
  405d4e:	bf a8 81 40 00       	mov    $0x4081a8,%edi
  405d53:	31 c0                	xor    %eax,%eax
  405d55:	e8 e6 c2 ff ff       	call   402040 <printf@plt>
		return -EINVAL;
  405d5a:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
  405d5f:	e9 87 fa ff ff       	jmp    4057eb <main+0x27bb>
				else if (i >= BUTTON_AMOUNT && flag && temp_time >= sf::seconds(3.0f)){
  405d64:	f3 0f 10 05 dc 28 00 	movss  0x28dc(%rip),%xmm0        # 408648 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0x168>
  405d6b:	00 
  405d6c:	e8 df c3 ff ff       	call   402150 <_ZN2sf7secondsEf@plt>
  405d71:	48 8b bd 88 e0 ff ff 	mov    -0x1f78(%rbp),%rdi
  405d78:	48 89 c6             	mov    %rax,%rsi
  405d7b:	e8 20 c5 ff ff       	call   4022a0 <_ZN2sfgeENS_4TimeES0_@plt>
  405d80:	c7 85 08 e0 ff ff 06 	movl   $0x6,-0x1ff8(%rbp)
  405d87:	00 00 00 
  405d8a:	84 c0                	test   %al,%al
  405d8c:	0f 84 d5 e0 ff ff    	je     403e67 <main+0xe37>
	ioctl(fd, WR_GREEN_LEDS);
  405d92:	be 66 61 00 00       	mov    $0x6166,%esi
  405d97:	44 89 ff             	mov    %r15d,%edi
  405d9a:	31 c0                	xor    %eax,%eax
  405d9c:	c7 85 a0 e1 ff ff 00 	movl   $0x0,-0x1e60(%rbp)
  405da3:	00 00 00 
  405da6:	e8 45 c5 ff ff       	call   4022f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  405dab:	4c 8d b5 a0 e1 ff ff 	lea    -0x1e60(%rbp),%r14
  405db2:	ba 04 00 00 00       	mov    $0x4,%edx
  405db7:	44 89 ff             	mov    %r15d,%edi
  405dba:	4c 89 f6             	mov    %r14,%rsi
  405dbd:	e8 1e c3 ff ff       	call   4020e0 <write@plt>
					flag = 0;
  405dc2:	c7 85 0c e0 ff ff 00 	movl   $0x0,-0x1ff4(%rbp)
  405dc9:	00 00 00 
					i = 0;
  405dcc:	c7 85 08 e0 ff ff 00 	movl   $0x0,-0x1ff8(%rbp)
  405dd3:	00 00 00 
  405dd6:	e9 8c e0 ff ff       	jmp    403e67 <main+0xe37>
	this->_M_widen_init();
  405ddb:	48 89 c7             	mov    %rax,%rdi
  405dde:	48 89 c3             	mov    %rax,%rbx
  405de1:	e8 8a c4 ff ff       	call   402270 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
  405de6:	48 8b 03             	mov    (%rbx),%rax
  405de9:	48 89 df             	mov    %rbx,%rdi
  405dec:	be 0a 00 00 00       	mov    $0xa,%esi
  405df1:	ff 50 30             	call   *0x30(%rax)
  405df4:	0f be f0             	movsbl %al,%esi
  405df7:	bf 00 b3 40 00       	mov    $0x40b300,%edi
  405dfc:	e8 2f c2 ff ff       	call   402030 <_ZNSo3putEc@plt>
  405e01:	48 89 c7             	mov    %rax,%rdi
   *  This manipulator simply calls the stream's @c flush() member function.
  */
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
  405e04:	e8 57 c3 ff ff       	call   402160 <_ZNSo5flushEv@plt>
    { return flush(__os.put(__os.widen('\n'))); }
  405e09:	e9 d1 db ff ff       	jmp    4039df <main+0x9af>
								currMatrix[i*3 + j] ^= 1;
  405e0e:	f3 0f 7e 85 e0 e1 ff 	movq   -0x1e20(%rbp),%xmm0
  405e15:	ff 
									currMatrix[(i + 1) * 3 + j] ^= 1;
  405e16:	83 b5 ec e1 ff ff 01 	xorl   $0x1,-0x1e14(%rbp)
								currMatrix[i*3 + j] ^= 1;
  405e1d:	f3 0f 7e 0d 9b 27 00 	movq   0x279b(%rip),%xmm1        # 4085c0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xe0>
  405e24:	00 
  405e25:	66 0f ef c1          	pxor   %xmm1,%xmm0
  405e29:	66 0f d6 85 e0 e1 ff 	movq   %xmm0,-0x1e20(%rbp)
  405e30:	ff 
  405e31:	e9 b3 fd ff ff       	jmp    405be9 <main+0x2bb9>
		fprintf(stderr, "Error opening file %s\n", argv[1]);
  405e36:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  405e3a:	48 8b 3d df 55 00 00 	mov    0x55df(%rip),%rdi        # 40b420 <stderr@@GLIBC_2.2.5>
  405e41:	be 83 80 40 00       	mov    $0x408083,%esi
  405e46:	31 c0                	xor    %eax,%eax
  405e48:	e8 c3 c4 ff ff       	call   402310 <fprintf@plt>
		return -EBUSY;
  405e4d:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
  405e52:	e9 94 f9 ff ff       	jmp    4057eb <main+0x27bb>
							printf("\n%d %d", answer[k], input[k]);
  405e57:	48 89 bd 30 e0 ff ff 	mov    %rdi,-0x1fd0(%rbp)
  405e5e:	49 89 fe             	mov    %rdi,%r14
  405e61:	31 c0                	xor    %eax,%eax
  405e63:	bf d6 80 40 00       	mov    $0x4080d6,%edi
  405e68:	e8 d3 c1 ff ff       	call   402040 <printf@plt>
							printf("errou\n");
  405e6d:	bf dd 80 40 00       	mov    $0x4080dd,%edi
  405e72:	e8 09 c5 ff ff       	call   402380 <puts@plt>
							text.setString("");
  405e77:	4c 89 f7             	mov    %r14,%rdi
  405e7a:	e8 41 c6 ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  405e7f:	4c 89 f2             	mov    %r14,%rdx
  405e82:	be d5 80 40 00       	mov    $0x4080d5,%esi
  405e87:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  405e8e:	e8 5d c2 ff ff       	call   4020f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  405e93:	48 8d b5 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rsi
  405e9a:	48 8d bd 50 fc ff ff 	lea    -0x3b0(%rbp),%rdi
  405ea1:	e8 ba c5 ff ff       	call   402460 <_ZN2sf4Text9setStringERKNS_6StringE@plt>
      { return _M_dataplus._M_p; }
  405ea6:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  405ead:	48 8d 85 d0 e1 ff ff 	lea    -0x1e30(%rbp),%rax
  405eb4:	48 89 85 20 e0 ff ff 	mov    %rax,-0x1fe0(%rbp)
  405ebb:	48 39 c7             	cmp    %rax,%rdi
  405ebe:	74 14                	je     405ed4 <main+0x2ea4>
  405ec0:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  405ec7:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405ece:	00 
  405ecf:	e8 4c c3 ff ff       	call   402220 <_ZdlPvm@plt>
  405ed4:	4c 8b b5 30 e0 ff ff 	mov    -0x1fd0(%rbp),%r14
  405edb:	4c 89 f7             	mov    %r14,%rdi
  405ede:	e8 1d c4 ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
							typedtext.insert(0, "BOOM!!!");
  405ee3:	4c 89 f7             	mov    %r14,%rdi
  405ee6:	e8 d5 c5 ff ff       	call   4024c0 <_ZNSt6localeC1Ev@plt>
  405eeb:	4c 89 f2             	mov    %r14,%rdx
  405eee:	be a6 80 40 00       	mov    $0x4080a6,%esi
  405ef3:	48 8d bd c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdi
  405efa:	e8 f1 c1 ff ff       	call   4020f0 <_ZN2sf6StringC1EPKcRKSt6locale@plt>
  405eff:	48 8d 95 c0 e1 ff ff 	lea    -0x1e40(%rbp),%rdx
  405f06:	31 f6                	xor    %esi,%esi
  405f08:	48 8d bd 00 e1 ff ff 	lea    -0x1f00(%rbp),%rdi
  405f0f:	e8 9c c2 ff ff       	call   4021b0 <_ZN2sf6String6insertEmRKS0_@plt>
      { return _M_dataplus._M_p; }
  405f14:	48 8b bd c0 e1 ff ff 	mov    -0x1e40(%rbp),%rdi
	if (!_M_is_local())
  405f1b:	48 3b bd 20 e0 ff ff 	cmp    -0x1fe0(%rbp),%rdi
  405f22:	74 14                	je     405f38 <main+0x2f08>
  405f24:	48 8b 85 d0 e1 ff ff 	mov    -0x1e30(%rbp),%rax
  405f2b:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  405f32:	00 
  405f33:	e8 e8 c2 ff ff       	call   402220 <_ZdlPvm@plt>
  405f38:	48 8b bd 30 e0 ff ff 	mov    -0x1fd0(%rbp),%rdi
  405f3f:	e8 bc c3 ff ff       	call   402300 <_ZNSt6localeD1Ev@plt>
							clock_text.restart();
  405f44:	48 8d bd 70 e0 ff ff 	lea    -0x1f90(%rbp),%rdi
  405f4b:	e8 80 c4 ff ff       	call   4023d0 <_ZN2sf5Clock7restartEv@plt>
  405f50:	c7 85 00 e0 ff ff 06 	movl   $0x6,-0x2000(%rbp)
  405f57:	00 00 00 
							flag_correct = 0;
  405f5a:	c7 85 f8 df ff ff 00 	movl   $0x0,-0x2008(%rbp)
  405f61:	00 00 00 
							screen = 6;
  405f64:	c7 85 1c e0 ff ff 06 	movl   $0x6,-0x1fe4(%rbp)
  405f6b:	00 00 00 
  405f6e:	e9 ea dd ff ff       	jmp    403d5d <main+0xd2d>
	__throw_bad_cast();
  405f73:	e8 48 c3 ff ff       	call   4022c0 <_ZSt16__throw_bad_castv@plt>
      { return _M_dataplus._M_p; }
  405f78:	48 8b bd 28 e0 ff ff 	mov    -0x1fd8(%rbp),%rdi
  405f7f:	e9 de ec ff ff       	jmp    404c62 <main+0x1c32>
	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
  405f84:	31 c9                	xor    %ecx,%ecx
  405f86:	ba 01 00 00 00       	mov    $0x1,%edx
  405f8b:	be ae 80 40 00       	mov    $0x4080ae,%esi
  405f90:	31 c0                	xor    %eax,%eax
  405f92:	bf d0 83 40 00       	mov    $0x4083d0,%edi
  405f97:	e8 b4 c3 ff ff       	call   402350 <_ZSt24__throw_out_of_range_fmtPKcz@plt>
							text.setString("");
  405f9c:	48 89 c3             	mov    %rax,%rbx
  405f9f:	e9 ac c6 ff ff       	jmp    402650 <main.cold+0x6f>
							typedtext.insert(0, "[root@mbois ~] $ Voce deveria saber matematica...");
  405fa4:	48 89 c3             	mov    %rax,%rbx
  405fa7:	e9 cf c9 ff ff       	jmp    40297b <main.cold+0x39a>
							text.setString("");
  405fac:	48 89 c3             	mov    %rax,%rbx
  405faf:	e9 c7 c9 ff ff       	jmp    40297b <main.cold+0x39a>
      { return _M_dataplus._M_p; }
  405fb4:	48 89 c3             	mov    %rax,%rbx
  405fb7:	e9 34 ca ff ff       	jmp    4029f0 <main.cold+0x40f>
  405fbc:	48 89 c3             	mov    %rax,%rbx
  405fbf:	e9 dd c9 ff ff       	jmp    4029a1 <main.cold+0x3c0>
  405fc4:	48 89 c3             	mov    %rax,%rbx
  405fc7:	e9 8b c9 ff ff       	jmp    402957 <main.cold+0x376>
  405fcc:	48 89 c3             	mov    %rax,%rbx
  405fcf:	e9 f3 c9 ff ff       	jmp    4029c7 <main.cold+0x3e6>
  405fd4:	48 89 c3             	mov    %rax,%rbx
  405fd7:	e9 84 ca ff ff       	jmp    402a60 <main.cold+0x47f>
					typedtext.insert(0, "[root@mbois ~] $ Isso faz algum sentido?");
  405fdc:	48 89 c3             	mov    %rax,%rbx
  405fdf:	e9 97 c9 ff ff       	jmp    40297b <main.cold+0x39a>
					typedtext.insert(0, "[root@mbois ~] $ Tem alguma coisa piscando\n\n [root@mbois ~] $ voce deveria prestar atencao");
  405fe4:	48 89 c3             	mov    %rax,%rbx
  405fe7:	e9 8f c9 ff ff       	jmp    40297b <main.cold+0x39a>
					text.setString("");
  405fec:	48 89 c3             	mov    %rax,%rbx
  405fef:	e9 87 c9 ff ff       	jmp    40297b <main.cold+0x39a>
					text.setString("");
  405ff4:	48 89 c3             	mov    %rax,%rbx
  405ff7:	e9 7f c9 ff ff       	jmp    40297b <main.cold+0x39a>
  405ffc:	48 89 c3             	mov    %rax,%rbx
  405fff:	e9 8c ca ff ff       	jmp    402a90 <main.cold+0x4af>
						typedtext.insert(0, "Quarta fase");
  406004:	48 89 c3             	mov    %rax,%rbx
  406007:	e9 44 c6 ff ff       	jmp    402650 <main.cold+0x6f>
  40600c:	48 89 c3             	mov    %rax,%rbx
  40600f:	e9 a9 ca ff ff       	jmp    402abd <main.cold+0x4dc>
						text.setString("");
  406014:	48 89 c3             	mov    %rax,%rbx
  406017:	e9 34 c6 ff ff       	jmp    402650 <main.cold+0x6f>
  40601c:	48 89 c3             	mov    %rax,%rbx
  40601f:	e9 20 cb ff ff       	jmp    402b44 <main.cold+0x563>
  406024:	48 89 c3             	mov    %rax,%rbx
  406027:	e9 c1 ca ff ff       	jmp    402aed <main.cold+0x50c>
  40602c:	48 89 c3             	mov    %rax,%rbx
  40602f:	e9 e0 ca ff ff       	jmp    402b14 <main.cold+0x533>
  406034:	48 89 c3             	mov    %rax,%rbx
  406037:	e9 d8 ca ff ff       	jmp    402b14 <main.cold+0x533>
  40603c:	48 89 c3             	mov    %rax,%rbx
  40603f:	e9 30 cb ff ff       	jmp    402b74 <main.cold+0x593>
  406044:	48 89 c3             	mov    %rax,%rbx
  406047:	e9 4c cb ff ff       	jmp    402b98 <main.cold+0x5b7>
  40604c:	48 89 c3             	mov    %rax,%rbx
  40604f:	e9 64 cb ff ff       	jmp    402bb8 <main.cold+0x5d7>
						typedtext = typedtext.toAnsiString().substr(1);
  406054:	48 89 c3             	mov    %rax,%rbx
  406057:	e9 ec c5 ff ff       	jmp    402648 <main.cold+0x67>
  40605c:	48 89 c3             	mov    %rax,%rbx
  40605f:	e9 b0 ca ff ff       	jmp    402b14 <main.cold+0x533>
  406064:	48 89 c3             	mov    %rax,%rbx
  406067:	e9 9f cb ff ff       	jmp    402c0b <main.cold+0x62a>
  40606c:	48 89 c3             	mov    %rax,%rbx
  40606f:	e9 ab cb ff ff       	jmp    402c1f <main.cold+0x63e>
}
  406074:	48 89 c3             	mov    %rax,%rbx
  406077:	e9 64 c6 ff ff       	jmp    4026e0 <main.cold+0xff>
							typedtext.insert(0, "BOOM!!!");
  40607c:	48 89 c3             	mov    %rax,%rbx
  40607f:	e9 cc c5 ff ff       	jmp    402650 <main.cold+0x6f>
  406084:	48 89 c3             	mov    %rax,%rbx
  406087:	e9 d0 c5 ff ff       	jmp    40265c <main.cold+0x7b>
  40608c:	48 89 c3             	mov    %rax,%rbx
  40608f:	e9 0e c6 ff ff       	jmp    4026a2 <main.cold+0xc1>
  406094:	48 89 c3             	mov    %rax,%rbx
  406097:	e9 af cb ff ff       	jmp    402c4b <main.cold+0x66a>
  40609c:	48 89 c3             	mov    %rax,%rbx
  40609f:	e9 b8 cb ff ff       	jmp    402c5c <main.cold+0x67b>
}
  4060a4:	48 89 c3             	mov    %rax,%rbx
  4060a7:	e9 40 c6 ff ff       	jmp    4026ec <main.cold+0x10b>
  4060ac:	48 89 c3             	mov    %rax,%rbx
  4060af:	e9 b9 cb ff ff       	jmp    402c6d <main.cold+0x68c>
  4060b4:	48 89 c3             	mov    %rax,%rbx
  4060b7:	e9 3c c6 ff ff       	jmp    4026f8 <main.cold+0x117>
  4060bc:	48 89 c3             	mov    %rax,%rbx
  4060bf:	e9 40 c6 ff ff       	jmp    402704 <main.cold+0x123>
  4060c4:	48 c7 85 30 e0 ff ff 	movq   $0x40ad28,-0x1fd0(%rbp)
  4060cb:	28 ad 40 00 
  4060cf:	48 89 c3             	mov    %rax,%rbx
  4060d2:	41 bc f0 ac 40 00    	mov    $0x40acf0,%r12d
  4060d8:	e9 57 c6 ff ff       	jmp    402734 <main.cold+0x153>
  4060dd:	48 89 c3             	mov    %rax,%rbx
  4060e0:	e9 b4 cb ff ff       	jmp    402c99 <main.cold+0x6b8>
  4060e5:	48 89 c3             	mov    %rax,%rbx
  4060e8:	e9 27 ca ff ff       	jmp    402b14 <main.cold+0x533>
  4060ed:	48 89 c3             	mov    %rax,%rbx
  4060f0:	e9 f8 cb ff ff       	jmp    402ced <main.cold+0x70c>
  4060f5:	48 89 c3             	mov    %rax,%rbx
  4060f8:	e9 10 cc ff ff       	jmp    402d0d <main.cold+0x72c>
  4060fd:	48 c7 85 30 e0 ff ff 	movq   $0x40ad28,-0x1fd0(%rbp)
  406104:	28 ad 40 00 
  406108:	48 89 c3             	mov    %rax,%rbx
  40610b:	41 bc f0 ac 40 00    	mov    $0x40acf0,%r12d
  406111:	e9 5c c6 ff ff       	jmp    402772 <main.cold+0x191>
  406116:	48 c7 85 30 e0 ff ff 	movq   $0x40ad28,-0x1fd0(%rbp)
  40611d:	28 ad 40 00 
  406121:	48 89 c3             	mov    %rax,%rbx
  406124:	41 bc f0 ac 40 00    	mov    $0x40acf0,%r12d
  40612a:	e9 62 c6 ff ff       	jmp    402791 <main.cold+0x1b0>
  40612f:	48 c7 85 30 e0 ff ff 	movq   $0x40ad28,-0x1fd0(%rbp)
  406136:	28 ad 40 00 
  40613a:	48 89 c3             	mov    %rax,%rbx
  40613d:	41 bc f0 ac 40 00    	mov    $0x40acf0,%r12d
  406143:	e9 0b c6 ff ff       	jmp    402753 <main.cold+0x172>
  406148:	48 89 c3             	mov    %rax,%rbx
  40614b:	e9 e9 cb ff ff       	jmp    402d39 <main.cold+0x758>
  406150:	48 89 c3             	mov    %rax,%rbx
  406153:	e9 ad c4 ff ff       	jmp    402605 <main.cold+0x24>
  406158:	48 c7 85 30 e0 ff ff 	movq   $0x40ad28,-0x1fd0(%rbp)
  40615f:	28 ad 40 00 
  406163:	48 89 c3             	mov    %rax,%rbx
  406166:	41 bc f0 ac 40 00    	mov    $0x40acf0,%r12d
  40616c:	e9 b3 c7 ff ff       	jmp    402924 <main.cold+0x343>
  406171:	48 89 c3             	mov    %rax,%rbx
  406174:	e9 ca c7 ff ff       	jmp    402943 <main.cold+0x362>
  406179:	48 89 c3             	mov    %rax,%rbx
  40617c:	e9 63 ca ff ff       	jmp    402be4 <main.cold+0x603>
						typedtext = typedtext.toAnsiString().substr(1);
  406181:	48 89 c3             	mov    %rax,%rbx
  406184:	e9 bf c4 ff ff       	jmp    402648 <main.cold+0x67>
  406189:	48 89 c3             	mov    %rax,%rbx
  40618c:	e9 18 cc ff ff       	jmp    402da9 <main.cold+0x7c8>
  406191:	48 89 c3             	mov    %rax,%rbx
  406194:	e9 64 cc ff ff       	jmp    402dfd <main.cold+0x81c>
  406199:	48 89 c3             	mov    %rax,%rbx
  40619c:	e9 38 cc ff ff       	jmp    402dd9 <main.cold+0x7f8>
  4061a1:	48 89 c3             	mov    %rax,%rbx
  4061a4:	e9 74 cc ff ff       	jmp    402e1d <main.cold+0x83c>
  4061a9:	48 c7 85 30 e0 ff ff 	movq   $0x40ad28,-0x1fd0(%rbp)
  4061b0:	28 ad 40 00 
  4061b4:	48 89 c3             	mov    %rax,%rbx
  4061b7:	41 bc f0 ac 40 00    	mov    $0x40acf0,%r12d
  4061bd:	e9 e6 c6 ff ff       	jmp    4028a8 <main.cold+0x2c7>
  4061c2:	48 c7 85 30 e0 ff ff 	movq   $0x40ad28,-0x1fd0(%rbp)
  4061c9:	28 ad 40 00 
  4061cd:	48 89 c3             	mov    %rax,%rbx
  4061d0:	41 bc f0 ac 40 00    	mov    $0x40acf0,%r12d
  4061d6:	e9 ec c6 ff ff       	jmp    4028c7 <main.cold+0x2e6>
  4061db:	48 c7 85 30 e0 ff ff 	movq   $0x40ad28,-0x1fd0(%rbp)
  4061e2:	28 ad 40 00 
  4061e6:	48 89 c3             	mov    %rax,%rbx
  4061e9:	41 bc f0 ac 40 00    	mov    $0x40acf0,%r12d
  4061ef:	e9 f2 c6 ff ff       	jmp    4028e6 <main.cold+0x305>
  4061f4:	48 c7 85 30 e0 ff ff 	movq   $0x40ad28,-0x1fd0(%rbp)
  4061fb:	28 ad 40 00 
  4061ff:	48 89 c3             	mov    %rax,%rbx
  406202:	41 bc f0 ac 40 00    	mov    $0x40acf0,%r12d
  406208:	e9 f8 c6 ff ff       	jmp    402905 <main.cold+0x324>
  40620d:	48 89 c3             	mov    %rax,%rbx
  406210:	e9 10 c4 ff ff       	jmp    402625 <main.cold+0x44>
						typedtext = typedtext.toAnsiString().substr(1);
  406215:	48 89 c3             	mov    %rax,%rbx
  406218:	e9 2b c4 ff ff       	jmp    402648 <main.cold+0x67>
  40621d:	48 89 c3             	mov    %rax,%rbx
  406220:	e9 24 cc ff ff       	jmp    402e49 <main.cold+0x868>
  406225:	48 89 c3             	mov    %rax,%rbx
  406228:	e9 30 cb ff ff       	jmp    402d5d <main.cold+0x77c>
  40622d:	48 89 c3             	mov    %rax,%rbx
  406230:	e9 48 cb ff ff       	jmp    402d7d <main.cold+0x79c>
						typedtext = typedtext.toAnsiString().substr(1);
  406235:	48 89 c3             	mov    %rax,%rbx
  406238:	e9 0b c4 ff ff       	jmp    402648 <main.cold+0x67>
  40623d:	48 c7 85 30 e0 ff ff 	movq   $0x40ad28,-0x1fd0(%rbp)
  406244:	28 ad 40 00 
  406248:	48 89 c3             	mov    %rax,%rbx
  40624b:	41 bc f0 ac 40 00    	mov    $0x40acf0,%r12d
  406251:	e9 5a c5 ff ff       	jmp    4027b0 <main.cold+0x1cf>
  406256:	48 c7 85 30 e0 ff ff 	movq   $0x40ad28,-0x1fd0(%rbp)
  40625d:	28 ad 40 00 
  406261:	48 89 c3             	mov    %rax,%rbx
  406264:	41 bc f0 ac 40 00    	mov    $0x40acf0,%r12d
  40626a:	e9 60 c5 ff ff       	jmp    4027cf <main.cold+0x1ee>
  40626f:	48 c7 85 30 e0 ff ff 	movq   $0x40ad28,-0x1fd0(%rbp)
  406276:	28 ad 40 00 
  40627a:	48 89 c3             	mov    %rax,%rbx
  40627d:	41 bc f0 ac 40 00    	mov    $0x40acf0,%r12d
  406283:	e9 66 c5 ff ff       	jmp    4027ee <main.cold+0x20d>
  406288:	48 c7 85 30 e0 ff ff 	movq   $0x40ad28,-0x1fd0(%rbp)
  40628f:	28 ad 40 00 
  406293:	48 89 c3             	mov    %rax,%rbx
  406296:	41 bc f0 ac 40 00    	mov    $0x40acf0,%r12d
  40629c:	e9 6c c5 ff ff       	jmp    40280d <main.cold+0x22c>
  4062a1:	48 c7 85 30 e0 ff ff 	movq   $0x40ad28,-0x1fd0(%rbp)
  4062a8:	28 ad 40 00 
  4062ac:	48 89 c3             	mov    %rax,%rbx
  4062af:	41 bc f0 ac 40 00    	mov    $0x40acf0,%r12d
  4062b5:	e9 72 c5 ff ff       	jmp    40282c <main.cold+0x24b>
				text.setString("");
  4062ba:	48 89 c3             	mov    %rax,%rbx
  4062bd:	e9 b9 c6 ff ff       	jmp    40297b <main.cold+0x39a>
  4062c2:	48 89 c3             	mov    %rax,%rbx
  4062c5:	e9 ac cb ff ff       	jmp    402e76 <main.cold+0x895>
  4062ca:	48 89 c3             	mov    %rax,%rbx
  4062cd:	e9 d4 cb ff ff       	jmp    402ea6 <main.cold+0x8c5>
				typedtext.insert(0, "BOOM!!!");
  4062d2:	48 89 c3             	mov    %rax,%rbx
  4062d5:	e9 a1 c6 ff ff       	jmp    40297b <main.cold+0x39a>
  4062da:	48 c7 85 30 e0 ff ff 	movq   $0x40ad28,-0x1fd0(%rbp)
  4062e1:	28 ad 40 00 
  4062e5:	48 89 c3             	mov    %rax,%rbx
  4062e8:	41 bc f0 ac 40 00    	mov    $0x40acf0,%r12d
  4062ee:	e9 58 c5 ff ff       	jmp    40284b <main.cold+0x26a>
  4062f3:	48 c7 85 30 e0 ff ff 	movq   $0x40ad28,-0x1fd0(%rbp)
  4062fa:	28 ad 40 00 
  4062fe:	48 89 c3             	mov    %rax,%rbx
  406301:	41 bc f0 ac 40 00    	mov    $0x40acf0,%r12d
  406307:	e9 5e c5 ff ff       	jmp    40286a <main.cold+0x289>
  40630c:	48 c7 85 30 e0 ff ff 	movq   $0x40ad28,-0x1fd0(%rbp)
  406313:	28 ad 40 00 
  406317:	48 89 c3             	mov    %rax,%rbx
  40631a:	41 bc f0 ac 40 00    	mov    $0x40acf0,%r12d
  406320:	e9 64 c5 ff ff       	jmp    402889 <main.cold+0x2a8>
  406325:	48 89 c3             	mov    %rax,%rbx
  406328:	e9 a6 cb ff ff       	jmp    402ed3 <main.cold+0x8f2>
						typedtext = typedtext.toAnsiString().substr(1);
  40632d:	48 89 c3             	mov    %rax,%rbx
  406330:	e9 13 c3 ff ff       	jmp    402648 <main.cold+0x67>
  406335:	48 89 c3             	mov    %rax,%rbx
  406338:	e9 ce cb ff ff       	jmp    402f0b <main.cold+0x92a>
  40633d:	48 89 c3             	mov    %rax,%rbx
  406340:	e9 cf c7 ff ff       	jmp    402b14 <main.cold+0x533>
  406345:	48 89 c3             	mov    %rax,%rbx
  406348:	e9 c7 c6 ff ff       	jmp    402a14 <main.cold+0x433>
  40634d:	48 89 c3             	mov    %rax,%rbx
  406350:	e9 df c6 ff ff       	jmp    402a34 <main.cold+0x453>
  406355:	48 89 c3             	mov    %rax,%rbx
  406358:	e9 de cb ff ff       	jmp    402f3b <main.cold+0x95a>
  40635d:	48 89 c3             	mov    %rax,%rbx
  406360:	e9 af c7 ff ff       	jmp    402b14 <main.cold+0x533>
  406365:	48 89 c3             	mov    %rax,%rbx
  406368:	e9 74 c2 ff ff       	jmp    4025e1 <main.cold>
  40636d:	48 89 c3             	mov    %rax,%rbx
  406370:	e9 26 cc ff ff       	jmp    402f9b <main.cold+0x9ba>
						typedtext = typedtext.toAnsiString().substr(1);
  406375:	48 89 c3             	mov    %rax,%rbx
  406378:	e9 cb c2 ff ff       	jmp    402648 <main.cold+0x67>
  40637d:	48 89 c3             	mov    %rax,%rbx
  406380:	e9 e6 cb ff ff       	jmp    402f6b <main.cold+0x98a>
  406385:	48 89 c3             	mov    %rax,%rbx
  406388:	e9 3c c9 ff ff       	jmp    402cc9 <main.cold+0x6e8>
  40638d:	48 89 c3             	mov    %rax,%rbx
  406390:	e9 65 cb ff ff       	jmp    402efa <main.cold+0x919>
  406395:	48 89 c3             	mov    %rax,%rbx
  406398:	e9 2b cc ff ff       	jmp    402fc8 <main.cold+0x9e7>

000000000040639d <.annobin_abi_note.c.hot>:
  40639d:	0f 1f 00             	nopl   (%rax)

00000000004063a0 <_start>:
  4063a0:	f3 0f 1e fa          	endbr64 
  4063a4:	31 ed                	xor    %ebp,%ebp
  4063a6:	49 89 d1             	mov    %rdx,%r9
  4063a9:	5e                   	pop    %rsi
  4063aa:	48 89 e2             	mov    %rsp,%rdx
  4063ad:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  4063b1:	50                   	push   %rax
  4063b2:	54                   	push   %rsp
  4063b3:	45 31 c0             	xor    %r8d,%r8d
  4063b6:	31 c9                	xor    %ecx,%ecx
  4063b8:	48 c7 c7 30 30 40 00 	mov    $0x403030,%rdi
  4063bf:	ff 15 2b 4c 00 00    	call   *0x4c2b(%rip)        # 40aff0 <__libc_start_main@GLIBC_2.34>
  4063c5:	f4                   	hlt    

00000000004063c6 <.annobin_abi_note.c>:
  4063c6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  4063cd:	00 00 00 

00000000004063d0 <_dl_relocate_static_pie>:
  4063d0:	f3 0f 1e fa          	endbr64 
  4063d4:	c3                   	ret    

00000000004063d5 <.annobin__dl_relocate_static_pie.end>:
  4063d5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  4063dc:	00 00 00 
  4063df:	90                   	nop

00000000004063e0 <deregister_tm_clones>:
  4063e0:	b8 78 b2 40 00       	mov    $0x40b278,%eax
  4063e5:	48 3d 78 b2 40 00    	cmp    $0x40b278,%rax
  4063eb:	74 13                	je     406400 <deregister_tm_clones+0x20>
  4063ed:	b8 00 00 00 00       	mov    $0x0,%eax
  4063f2:	48 85 c0             	test   %rax,%rax
  4063f5:	74 09                	je     406400 <deregister_tm_clones+0x20>
  4063f7:	bf 78 b2 40 00       	mov    $0x40b278,%edi
  4063fc:	ff e0                	jmp    *%rax
  4063fe:	66 90                	xchg   %ax,%ax
  406400:	c3                   	ret    
  406401:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  406408:	00 00 00 00 
  40640c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000406410 <register_tm_clones>:
  406410:	be 78 b2 40 00       	mov    $0x40b278,%esi
  406415:	48 81 ee 78 b2 40 00 	sub    $0x40b278,%rsi
  40641c:	48 89 f0             	mov    %rsi,%rax
  40641f:	48 c1 ee 3f          	shr    $0x3f,%rsi
  406423:	48 c1 f8 03          	sar    $0x3,%rax
  406427:	48 01 c6             	add    %rax,%rsi
  40642a:	48 d1 fe             	sar    %rsi
  40642d:	74 11                	je     406440 <register_tm_clones+0x30>
  40642f:	b8 00 00 00 00       	mov    $0x0,%eax
  406434:	48 85 c0             	test   %rax,%rax
  406437:	74 07                	je     406440 <register_tm_clones+0x30>
  406439:	bf 78 b2 40 00       	mov    $0x40b278,%edi
  40643e:	ff e0                	jmp    *%rax
  406440:	c3                   	ret    
  406441:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  406448:	00 00 00 00 
  40644c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000406450 <__do_global_dtors_aux>:
  406450:	f3 0f 1e fa          	endbr64 
  406454:	80 3d cd 4f 00 00 00 	cmpb   $0x0,0x4fcd(%rip)        # 40b428 <completed.0>
  40645b:	75 13                	jne    406470 <__do_global_dtors_aux+0x20>
  40645d:	55                   	push   %rbp
  40645e:	48 89 e5             	mov    %rsp,%rbp
  406461:	e8 7a ff ff ff       	call   4063e0 <deregister_tm_clones>
  406466:	c6 05 bb 4f 00 00 01 	movb   $0x1,0x4fbb(%rip)        # 40b428 <completed.0>
  40646d:	5d                   	pop    %rbp
  40646e:	c3                   	ret    
  40646f:	90                   	nop
  406470:	c3                   	ret    
  406471:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  406478:	00 00 00 00 
  40647c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000406480 <frame_dummy>:
  406480:	f3 0f 1e fa          	endbr64 
  406484:	eb 8a                	jmp    406410 <register_tm_clones>
  406486:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  40648d:	00 00 00 

0000000000406490 <_Z17char_to_stringbitB5cxx11c>:
{
  406490:	41 54                	push   %r12
	switch (n)
  406492:	83 ee 30             	sub    $0x30,%esi
{
  406495:	49 89 fc             	mov    %rdi,%r12
  406498:	55                   	push   %rbp
  406499:	53                   	push   %rbx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  40649a:	48 8d 5f 10          	lea    0x10(%rdi),%rbx
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  40649e:	48 89 1f             	mov    %rbx,(%rdi)
      { _M_string_length = __length; }
  4064a1:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi)
  4064a8:	00 
      { __c1 = __c2; }
  4064a9:	c6 47 10 00          	movb   $0x0,0x10(%rdi)
	switch (n)
  4064ad:	40 80 fe 09          	cmp    $0x9,%sil
  4064b1:	0f 87 dc 00 00 00    	ja     406593 <_Z17char_to_stringbitB5cxx11c+0x103>
  4064b7:	40 0f b6 f6          	movzbl %sil,%esi
       */
      basic_string&
      assign(const _CharT* __s)
      {
	__glibcxx_requires_string(__s);
	return _M_replace(size_type(0), this->size(), __s,
  4064bb:	41 b8 08 00 00 00    	mov    $0x8,%r8d
  4064c1:	ff 24 f5 f0 80 40 00 	jmp    *0x4080f0(,%rsi,8)
  4064c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4064cf:	00 
  4064d0:	b9 58 80 40 00       	mov    $0x408058,%ecx
  4064d5:	31 d2                	xor    %edx,%edx
  4064d7:	31 f6                	xor    %esi,%esi
  4064d9:	e8 b2 be ff ff       	call   402390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
}
  4064de:	4c 89 e0             	mov    %r12,%rax
  4064e1:	5b                   	pop    %rbx
  4064e2:	5d                   	pop    %rbp
  4064e3:	41 5c                	pop    %r12
  4064e5:	c3                   	ret    
  4064e6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  4064ed:	00 00 00 
  4064f0:	b9 61 80 40 00       	mov    $0x408061,%ecx
  4064f5:	31 d2                	xor    %edx,%edx
  4064f7:	31 f6                	xor    %esi,%esi
  4064f9:	e8 92 be ff ff       	call   402390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  4064fe:	eb de                	jmp    4064de <_Z17char_to_stringbitB5cxx11c+0x4e>
  406500:	b9 10 80 40 00       	mov    $0x408010,%ecx
  406505:	31 d2                	xor    %edx,%edx
  406507:	31 f6                	xor    %esi,%esi
  406509:	e8 82 be ff ff       	call   402390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  40650e:	eb ce                	jmp    4064de <_Z17char_to_stringbitB5cxx11c+0x4e>
  406510:	b9 19 80 40 00       	mov    $0x408019,%ecx
  406515:	31 d2                	xor    %edx,%edx
  406517:	31 f6                	xor    %esi,%esi
  406519:	e8 72 be ff ff       	call   402390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  40651e:	eb be                	jmp    4064de <_Z17char_to_stringbitB5cxx11c+0x4e>
  406520:	b9 22 80 40 00       	mov    $0x408022,%ecx
  406525:	31 d2                	xor    %edx,%edx
  406527:	31 f6                	xor    %esi,%esi
  406529:	e8 62 be ff ff       	call   402390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  40652e:	eb ae                	jmp    4064de <_Z17char_to_stringbitB5cxx11c+0x4e>
  406530:	b9 2b 80 40 00       	mov    $0x40802b,%ecx
  406535:	31 d2                	xor    %edx,%edx
  406537:	31 f6                	xor    %esi,%esi
  406539:	e8 52 be ff ff       	call   402390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  40653e:	eb 9e                	jmp    4064de <_Z17char_to_stringbitB5cxx11c+0x4e>
  406540:	b9 34 80 40 00       	mov    $0x408034,%ecx
  406545:	31 d2                	xor    %edx,%edx
  406547:	31 f6                	xor    %esi,%esi
  406549:	e8 42 be ff ff       	call   402390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  40654e:	eb 8e                	jmp    4064de <_Z17char_to_stringbitB5cxx11c+0x4e>
  406550:	b9 3d 80 40 00       	mov    $0x40803d,%ecx
  406555:	31 d2                	xor    %edx,%edx
  406557:	31 f6                	xor    %esi,%esi
  406559:	e8 32 be ff ff       	call   402390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  40655e:	e9 7b ff ff ff       	jmp    4064de <_Z17char_to_stringbitB5cxx11c+0x4e>
  406563:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  406568:	b9 46 80 40 00       	mov    $0x408046,%ecx
  40656d:	31 d2                	xor    %edx,%edx
  40656f:	31 f6                	xor    %esi,%esi
  406571:	e8 1a be ff ff       	call   402390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  406576:	e9 63 ff ff ff       	jmp    4064de <_Z17char_to_stringbitB5cxx11c+0x4e>
  40657b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  406580:	b9 4f 80 40 00       	mov    $0x40804f,%ecx
  406585:	31 d2                	xor    %edx,%edx
  406587:	31 f6                	xor    %esi,%esi
  406589:	e8 02 be ff ff       	call   402390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  40658e:	e9 4b ff ff ff       	jmp    4064de <_Z17char_to_stringbitB5cxx11c+0x4e>
  406593:	45 31 c0             	xor    %r8d,%r8d
  406596:	b9 d5 80 40 00       	mov    $0x4080d5,%ecx
  40659b:	31 d2                	xor    %edx,%edx
  40659d:	31 f6                	xor    %esi,%esi
  40659f:	e8 ec bd ff ff       	call   402390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
  4065a4:	e9 35 ff ff ff       	jmp    4064de <_Z17char_to_stringbitB5cxx11c+0x4e>
      { return _M_dataplus._M_p; }
  4065a9:	48 89 c5             	mov    %rax,%rbp
  4065ac:	e9 2f bf ff ff       	jmp    4024e0 <_Z17char_to_stringbitB5cxx11c.cold>
  4065b1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  4065b8:	00 00 00 00 
  4065bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004065c0 <_Z13writeLDisplayij>:
{
  4065c0:	55                   	push   %rbp
	ioctl(fd, WR_L_DISPLAY);
  4065c1:	31 c0                	xor    %eax,%eax
{
  4065c3:	89 fd                	mov    %edi,%ebp
  4065c5:	48 83 ec 10          	sub    $0x10,%rsp
  4065c9:	89 74 24 0c          	mov    %esi,0xc(%rsp)
	ioctl(fd, WR_L_DISPLAY);
  4065cd:	be 63 61 00 00       	mov    $0x6163,%esi
  4065d2:	e8 19 bd ff ff       	call   4022f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  4065d7:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  4065dc:	89 ef                	mov    %ebp,%edi
  4065de:	ba 04 00 00 00       	mov    $0x4,%edx
  4065e3:	e8 f8 ba ff ff       	call   4020e0 <write@plt>
}
  4065e8:	48 83 c4 10          	add    $0x10,%rsp
  4065ec:	5d                   	pop    %rbp
  4065ed:	c3                   	ret    
  4065ee:	66 90                	xchg   %ax,%ax

00000000004065f0 <_Z13writeRDisplayij>:
{
  4065f0:	55                   	push   %rbp
	ioctl(fd, WR_R_DISPLAY);
  4065f1:	31 c0                	xor    %eax,%eax
{
  4065f3:	89 fd                	mov    %edi,%ebp
  4065f5:	48 83 ec 10          	sub    $0x10,%rsp
  4065f9:	89 74 24 0c          	mov    %esi,0xc(%rsp)
	ioctl(fd, WR_R_DISPLAY);
  4065fd:	be 64 61 00 00       	mov    $0x6164,%esi
  406602:	e8 e9 bc ff ff       	call   4022f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  406607:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  40660c:	89 ef                	mov    %ebp,%edi
  40660e:	ba 04 00 00 00       	mov    $0x4,%edx
  406613:	e8 c8 ba ff ff       	call   4020e0 <write@plt>
}
  406618:	48 83 c4 10          	add    $0x10,%rsp
  40661c:	5d                   	pop    %rbp
  40661d:	c3                   	ret    
  40661e:	66 90                	xchg   %ax,%ax

0000000000406620 <_Z13writeGreenLedij>:
{
  406620:	55                   	push   %rbp
	ioctl(fd, WR_GREEN_LEDS);
  406621:	31 c0                	xor    %eax,%eax
{
  406623:	89 fd                	mov    %edi,%ebp
  406625:	48 83 ec 10          	sub    $0x10,%rsp
  406629:	89 74 24 0c          	mov    %esi,0xc(%rsp)
	ioctl(fd, WR_GREEN_LEDS);
  40662d:	be 66 61 00 00       	mov    $0x6166,%esi
  406632:	e8 b9 bc ff ff       	call   4022f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  406637:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  40663c:	89 ef                	mov    %ebp,%edi
  40663e:	ba 04 00 00 00       	mov    $0x4,%edx
  406643:	e8 98 ba ff ff       	call   4020e0 <write@plt>
}
  406648:	48 83 c4 10          	add    $0x10,%rsp
  40664c:	5d                   	pop    %rbp
  40664d:	c3                   	ret    
  40664e:	66 90                	xchg   %ax,%ax

0000000000406650 <_Z11writeRedLedij>:
{
  406650:	55                   	push   %rbp
	ioctl(fd, WR_RED_LEDS);
  406651:	31 c0                	xor    %eax,%eax
{
  406653:	89 fd                	mov    %edi,%ebp
  406655:	48 83 ec 10          	sub    $0x10,%rsp
  406659:	89 74 24 0c          	mov    %esi,0xc(%rsp)
	ioctl(fd, WR_RED_LEDS);
  40665d:	be 65 61 00 00       	mov    $0x6165,%esi
  406662:	e8 89 bc ff ff       	call   4022f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  406667:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  40666c:	89 ef                	mov    %ebp,%edi
  40666e:	ba 04 00 00 00       	mov    $0x4,%edx
  406673:	e8 68 ba ff ff       	call   4020e0 <write@plt>
}
  406678:	48 83 c4 10          	add    $0x10,%rsp
  40667c:	5d                   	pop    %rbp
  40667d:	c3                   	ret    
  40667e:	66 90                	xchg   %ax,%ax

0000000000406680 <_Z10readButtonij>:
{
  406680:	55                   	push   %rbp
	ioctl(fd, RD_PBUTTONS);
  406681:	31 c0                	xor    %eax,%eax
{
  406683:	89 fd                	mov    %edi,%ebp
  406685:	48 83 ec 10          	sub    $0x10,%rsp
  406689:	89 74 24 0c          	mov    %esi,0xc(%rsp)
	ioctl(fd, RD_PBUTTONS);
  40668d:	be 62 61 00 00       	mov    $0x6162,%esi
  406692:	e8 59 bc ff ff       	call   4022f0 <ioctl@plt>
	read(fd, &data, 1);
  406697:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  40669c:	89 ef                	mov    %ebp,%edi
  40669e:	ba 01 00 00 00       	mov    $0x1,%edx
  4066a3:	e8 78 bc ff ff       	call   402320 <read@plt>
}
  4066a8:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  4066ac:	48 83 c4 10          	add    $0x10,%rsp
  4066b0:	5d                   	pop    %rbp
  4066b1:	c3                   	ret    
  4066b2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  4066b9:	00 00 00 00 
  4066bd:	0f 1f 00             	nopl   (%rax)

00000000004066c0 <_Z10readSwitchij>:
{
  4066c0:	55                   	push   %rbp
	ioctl(fd, RD_SWITCHES);
  4066c1:	31 c0                	xor    %eax,%eax
{
  4066c3:	89 fd                	mov    %edi,%ebp
  4066c5:	48 83 ec 10          	sub    $0x10,%rsp
  4066c9:	89 74 24 0c          	mov    %esi,0xc(%rsp)
	ioctl(fd, RD_SWITCHES);
  4066cd:	be 61 61 00 00       	mov    $0x6161,%esi
  4066d2:	e8 19 bc ff ff       	call   4022f0 <ioctl@plt>
	read(fd, &data, 3);
  4066d7:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  4066dc:	89 ef                	mov    %ebp,%edi
  4066de:	ba 03 00 00 00       	mov    $0x3,%edx
  4066e3:	e8 38 bc ff ff       	call   402320 <read@plt>
}
  4066e8:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  4066ec:	48 83 c4 10          	add    $0x10,%rsp
  4066f0:	5d                   	pop    %rbp
  4066f1:	c3                   	ret    
  4066f2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  4066f9:	00 00 00 00 
  4066fd:	0f 1f 00             	nopl   (%rax)

0000000000406700 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_>:
{
  406700:	41 56                	push   %r14
  406702:	49 89 d6             	mov    %rdx,%r14
  406705:	41 55                	push   %r13
  406707:	49 89 f5             	mov    %rsi,%r13
  40670a:	41 54                	push   %r12
  40670c:	55                   	push   %rbp
  40670d:	89 fd                	mov    %edi,%ebp
  40670f:	53                   	push   %rbx
  406710:	48 83 ec 40          	sub    $0x40,%rsp
	bit_string += char_to_stringbit(sec_string[0]);
  406714:	48 8b 02             	mov    (%rdx),%rax
	: allocator_type(__a), _M_p(__dat) { }
  406717:	48 8d 5c 24 10       	lea    0x10(%rsp),%rbx
  40671c:	c6 44 24 10 00       	movb   $0x0,0x10(%rsp)
  406721:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  406726:	48 89 1c 24          	mov    %rbx,(%rsp)
      { _M_string_length = __length; }
  40672a:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  406731:	00 00 
  406733:	0f be 30             	movsbl (%rax),%esi
  406736:	e8 55 fd ff ff       	call   406490 <_Z17char_to_stringbitB5cxx11c>
      { return _M_append(__str._M_data(), __str.size()); }
  40673b:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  406740:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  406745:	48 89 e7             	mov    %rsp,%rdi
  406748:	e8 43 b9 ff ff       	call   402090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
      { return _M_dataplus._M_p; }
  40674d:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  406752:	4c 8d 64 24 30       	lea    0x30(%rsp),%r12
  406757:	4c 39 e7             	cmp    %r12,%rdi
  40675a:	74 0e                	je     40676a <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x6a>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  40675c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  406761:	48 8d 70 01          	lea    0x1(%rax),%rsi
  406765:	e8 b6 ba ff ff       	call   402220 <_ZdlPvm@plt>
	bit_string += char_to_stringbit(sec_string[1]);
  40676a:	49 8b 06             	mov    (%r14),%rax
  40676d:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  406772:	0f be 70 01          	movsbl 0x1(%rax),%esi
  406776:	e8 15 fd ff ff       	call   406490 <_Z17char_to_stringbitB5cxx11c>
      { return _M_append(__str._M_data(), __str.size()); }
  40677b:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  406780:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  406785:	48 89 e7             	mov    %rsp,%rdi
  406788:	e8 03 b9 ff ff       	call   402090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
      { return _M_dataplus._M_p; }
  40678d:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  406792:	4c 39 e7             	cmp    %r12,%rdi
  406795:	74 0e                	je     4067a5 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0xa5>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  406797:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  40679c:	48 8d 70 01          	lea    0x1(%rax),%rsi
  4067a0:	e8 7b ba ff ff       	call   402220 <_ZdlPvm@plt>
	bit_string += char_to_stringbit(min_string[0]);
  4067a5:	49 8b 45 00          	mov    0x0(%r13),%rax
  4067a9:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  4067ae:	0f be 30             	movsbl (%rax),%esi
  4067b1:	e8 da fc ff ff       	call   406490 <_Z17char_to_stringbitB5cxx11c>
      { return _M_append(__str._M_data(), __str.size()); }
  4067b6:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  4067bb:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  4067c0:	48 89 e7             	mov    %rsp,%rdi
  4067c3:	e8 c8 b8 ff ff       	call   402090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
      { return _M_dataplus._M_p; }
  4067c8:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  4067cd:	4c 39 e7             	cmp    %r12,%rdi
  4067d0:	74 0e                	je     4067e0 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0xe0>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  4067d2:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  4067d7:	48 8d 70 01          	lea    0x1(%rax),%rsi
  4067db:	e8 40 ba ff ff       	call   402220 <_ZdlPvm@plt>
	bit_string += char_to_stringbit(min_string[1]);
  4067e0:	49 8b 45 00          	mov    0x0(%r13),%rax
  4067e4:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  4067e9:	0f be 70 01          	movsbl 0x1(%rax),%esi
  4067ed:	e8 9e fc ff ff       	call   406490 <_Z17char_to_stringbitB5cxx11c>
      { return _M_append(__str._M_data(), __str.size()); }
  4067f2:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  4067f7:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  4067fc:	48 89 e7             	mov    %rsp,%rdi
  4067ff:	e8 8c b8 ff ff       	call   402090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>
      { return _M_dataplus._M_p; }
  406804:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  406809:	4c 39 e7             	cmp    %r12,%rdi
  40680c:	74 0e                	je     40681c <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x11c>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  40680e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  406813:	48 8d 70 01          	lea    0x1(%rax),%rsi
  406817:	e8 04 ba ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_string_length; }
  40681c:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
      { return _M_dataplus._M_p; }
  406821:	48 8b 04 24          	mov    (%rsp),%rax
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
  406825:	48 83 f9 ff          	cmp    $0xffffffffffffffff,%rcx
  406829:	0f 85 89 00 00 00    	jne    4068b8 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x1b8>
  40682f:	b9 20 00 00 00       	mov    $0x20,%ecx
  406834:	48 83 e9 01          	sub    $0x1,%rcx
    {
      typedef unsigned long _WordT;
      _WordT _M_w;

      _GLIBCXX_CONSTEXPR _Base_bitset() _GLIBCXX_NOEXCEPT
      : _M_w(0)
  406838:	31 f6                	xor    %esi,%esi
      _S_whichbit(size_t __pos) _GLIBCXX_NOEXCEPT
      {  return __pos % _GLIBCXX_BITSET_BITS_PER_WORD; }

      static _GLIBCXX_CONSTEXPR _WordT
      _S_maskbit(size_t __pos) _GLIBCXX_NOEXCEPT
      { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }
  40683a:	bf 01 00 00 00       	mov    $0x1,%edi
  40683f:	eb 0a                	jmp    40684b <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x14b>
  406841:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  406848:	48 89 d1             	mov    %rdx,%rcx
      {
	reset();
	const size_t __nbits = std::min(_Nb, std::min(__n, size_t(__len - __pos)));
	for (size_t __i = __nbits; __i > 0; --__i)
	  {
	    const _CharT __c = __s[__pos + __nbits - __i];
  40684b:	0f b6 10             	movzbl (%rax),%edx
	    if (_Traits::eq(__c, __zero))
  40684e:	80 fa 30             	cmp    $0x30,%dl
  406851:	74 0e                	je     406861 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x161>
	      ;
	    else if (_Traits::eq(__c, __one))
  406853:	80 fa 31             	cmp    $0x31,%dl
  406856:	75 77                	jne    4068cf <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x1cf>
      { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }
  406858:	48 89 fa             	mov    %rdi,%rdx
  40685b:	48 d3 e2             	shl    %cl,%rdx
	this->_M_getword(__pos) |= _Base::_S_maskbit(__pos);
  40685e:	48 09 d6             	or     %rdx,%rsi
	for (size_t __i = __nbits; __i > 0; --__i)
  406861:	48 83 c0 01          	add    $0x1,%rax
  406865:	48 8d 51 ff          	lea    -0x1(%rcx),%rdx
  406869:	48 85 c9             	test   %rcx,%rcx
  40686c:	75 da                	jne    406848 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x148>
	writeLDisplay(fd, data);
  40686e:	89 74 24 20          	mov    %esi,0x20(%rsp)
	ioctl(fd, WR_L_DISPLAY);
  406872:	89 ef                	mov    %ebp,%edi
  406874:	be 63 61 00 00       	mov    $0x6163,%esi
  406879:	31 c0                	xor    %eax,%eax
  40687b:	e8 70 ba ff ff       	call   4022f0 <ioctl@plt>
	write(fd, &data, sizeof(data));
  406880:	ba 04 00 00 00       	mov    $0x4,%edx
  406885:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  40688a:	89 ef                	mov    %ebp,%edi
  40688c:	e8 4f b8 ff ff       	call   4020e0 <write@plt>
  406891:	48 8b 3c 24          	mov    (%rsp),%rdi
	if (!_M_is_local())
  406895:	48 39 df             	cmp    %rbx,%rdi
  406898:	74 0e                	je     4068a8 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x1a8>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  40689a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  40689f:	48 8d 70 01          	lea    0x1(%rax),%rsi
  4068a3:	e8 78 b9 ff ff       	call   402220 <_ZdlPvm@plt>
}
  4068a8:	48 83 c4 40          	add    $0x40,%rsp
  4068ac:	5b                   	pop    %rbx
  4068ad:	5d                   	pop    %rbp
  4068ae:	41 5c                	pop    %r12
  4068b0:	41 5d                	pop    %r13
  4068b2:	41 5e                	pop    %r14
  4068b4:	c3                   	ret    
  4068b5:	0f 1f 00             	nopl   (%rax)
  4068b8:	48 83 f9 1f          	cmp    $0x1f,%rcx
  4068bc:	0f 87 6d ff ff ff    	ja     40682f <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x12f>
  4068c2:	48 85 c9             	test   %rcx,%rcx
  4068c5:	0f 85 69 ff ff ff    	jne    406834 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x134>
  4068cb:	31 f6                	xor    %esi,%esi
  4068cd:	eb 9f                	jmp    40686e <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_+0x16e>
	      _Unchecked_set(__i - 1);
	    else
	      __throw_invalid_argument(__N("bitset::_M_copy_from_ptr"));
  4068cf:	bf 6a 80 40 00       	mov    $0x40806a,%edi
  4068d4:	e8 67 b8 ff ff       	call   402140 <_ZSt24__throw_invalid_argumentPKc@plt>
      { return _M_dataplus._M_p; }
  4068d9:	48 89 c5             	mov    %rax,%rbp
  4068dc:	e9 1e bc ff ff       	jmp    4024ff <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold>
  4068e1:	48 89 c5             	mov    %rax,%rbp
  4068e4:	e9 4d bc ff ff       	jmp    402536 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x37>
  4068e9:	48 89 c5             	mov    %rax,%rbp
  4068ec:	e9 5f bc ff ff       	jmp    402550 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x51>
  4068f1:	48 89 c5             	mov    %rax,%rbp
  4068f4:	e9 76 bc ff ff       	jmp    40256f <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x70>
  4068f9:	48 89 c5             	mov    %rax,%rbp
  4068fc:	e9 16 bc ff ff       	jmp    402517 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_.cold+0x18>
  406901:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  406908:	00 00 00 00 
  40690c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000406910 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>:
{
  406910:	41 57                	push   %r15
  406912:	41 56                	push   %r14
  406914:	41 55                	push   %r13
  406916:	49 89 cd             	mov    %rcx,%r13
  406919:	41 54                	push   %r12
  40691b:	49 89 d4             	mov    %rdx,%r12
  40691e:	55                   	push   %rbp
  40691f:	53                   	push   %rbx
  406920:	48 63 de             	movslq %esi,%rbx
  406923:	49 89 d8             	mov    %rbx,%r8
	unsigned int minutes = number / 60;
  406926:	48 69 db 89 88 88 88 	imul   $0xffffffff88888889,%rbx,%rbx
  40692d:	44 89 c0             	mov    %r8d,%eax
  406930:	c1 f8 1f             	sar    $0x1f,%eax
{
  406933:	48 83 ec 68          	sub    $0x68,%rsp
	unsigned int minutes = number / 60;
  406937:	48 c1 eb 20          	shr    $0x20,%rbx
{
  40693b:	89 7c 24 04          	mov    %edi,0x4(%rsp)
	unsigned int minutes = number / 60;
  40693f:	44 01 c3             	add    %r8d,%ebx
  406942:	c1 fb 05             	sar    $0x5,%ebx
  406945:	29 c3                	sub    %eax,%ebx
	unsigned int seconds = number % 60;
  406947:	6b c3 3c             	imul   $0x3c,%ebx,%eax
  40694a:	41 29 c0             	sub    %eax,%r8d
	if (seconds < 10)
  40694d:	41 83 f8 09          	cmp    $0x9,%r8d
  406951:	0f 87 09 02 00 00    	ja     406b60 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x250>
	: allocator_type(__a), _M_p(__dat) { }
  406957:	4c 8d 7c 24 20       	lea    0x20(%rsp),%r15
      { _M_construct(__n, __c); }
  40695c:	31 d2                	xor    %edx,%edx
  40695e:	be 01 00 00 00       	mov    $0x1,%esi
  406963:	44 89 44 24 08       	mov    %r8d,0x8(%rsp)
  406968:	4c 89 ff             	mov    %r15,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  40696b:	4c 8d 74 24 30       	lea    0x30(%rsp),%r14
  406970:	4c 89 74 24 20       	mov    %r14,0x20(%rsp)
      { _M_construct(__n, __c); }
  406975:	e8 16 b9 ff ff       	call   402290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@plt>
	  auto const __num = __val * 2;
	  __first[1] = __digits[__num + 1];
	  __first[0] = __digits[__num];
	}
      else
	__first[0] = '0' + __val;
  40697a:	44 8b 44 24 08       	mov    0x8(%rsp),%r8d
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
	      size_type __n2)
      {
	__glibcxx_requires_string_len(__s, __n2);
	return _M_replace(_M_check(__pos, "basic_string::replace"),
  40697f:	31 d2                	xor    %edx,%edx
  406981:	31 f6                	xor    %esi,%esi
  406983:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  406988:	b9 5f 80 40 00       	mov    $0x40805f,%ecx
  40698d:	4c 89 ff             	mov    %r15,%rdi
  406990:	41 83 c0 30          	add    $0x30,%r8d
  406994:	44 88 00             	mov    %r8b,(%rax)
  406997:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  40699d:	e8 ee b9 ff ff       	call   402390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  4069a2:	48 8d 6c 24 50       	lea    0x50(%rsp),%rbp
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4069a7:	48 8d 50 10          	lea    0x10(%rax),%rdx
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  4069ab:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
      { return _M_dataplus._M_p; }
  4069b0:	48 8b 08             	mov    (%rax),%rcx
	if (__str._M_is_local())
  4069b3:	48 39 d1             	cmp    %rdx,%rcx
  4069b6:	0f 84 d4 06 00 00    	je     407090 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x780>
      { _M_dataplus._M_p = __p; }
  4069bc:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
	    _M_capacity(__str._M_allocated_capacity);
  4069c1:	48 8b 48 10          	mov    0x10(%rax),%rcx
      { _M_allocated_capacity = __capacity; }
  4069c5:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
      { return _M_string_length; }
  4069ca:	48 8b 48 08          	mov    0x8(%rax),%rcx
      { _M_string_length = __length; }
  4069ce:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
      { _M_dataplus._M_p = __p; }
  4069d3:	48 89 10             	mov    %rdx,(%rax)
  4069d6:	c6 40 10 00          	movb   $0x0,0x10(%rax)
      { return _M_dataplus._M_p; }
  4069da:	49 8b 7d 00          	mov    0x0(%r13),%rdi
      { _M_string_length = __length; }
  4069de:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  4069e5:	00 
      { return _M_dataplus._M_p; }
  4069e6:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
	if (__str._M_is_local())
  4069eb:	48 39 e8             	cmp    %rbp,%rax
  4069ee:	0f 84 ac 06 00 00    	je     4070a0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x790>
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4069f4:	49 8d 55 10          	lea    0x10(%r13),%rdx
      { return _M_string_length; }
  4069f8:	f3 0f 6f 44 24 48    	movdqu 0x48(%rsp),%xmm0
	    if (!_M_is_local())
  4069fe:	48 39 d7             	cmp    %rdx,%rdi
  406a01:	0f 84 09 07 00 00    	je     407110 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x800>
		    __capacity = _M_allocated_capacity;
  406a07:	49 8b 55 10          	mov    0x10(%r13),%rdx
      { _M_dataplus._M_p = __p; }
  406a0b:	49 89 45 00          	mov    %rax,0x0(%r13)
      { _M_string_length = __length; }
  406a0f:	41 0f 11 45 08       	movups %xmm0,0x8(%r13)
	    if (__data)
  406a14:	48 85 ff             	test   %rdi,%rdi
  406a17:	0f 84 fc 06 00 00    	je     407119 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x809>
      { _M_dataplus._M_p = __p; }
  406a1d:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
      { _M_allocated_capacity = __capacity; }
  406a22:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
      { _M_string_length = __length; }
  406a27:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  406a2e:	00 00 
  406a30:	c6 07 00             	movb   $0x0,(%rdi)
      { return _M_dataplus._M_p; }
  406a33:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
	if (!_M_is_local())
  406a38:	48 39 ef             	cmp    %rbp,%rdi
  406a3b:	74 0e                	je     406a4b <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x13b>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  406a3d:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  406a42:	48 8d 70 01          	lea    0x1(%rax),%rsi
  406a46:	e8 d5 b7 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  406a4b:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  406a50:	4c 39 f7             	cmp    %r14,%rdi
  406a53:	74 0e                	je     406a63 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x153>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  406a55:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  406a5a:	48 8d 70 01          	lea    0x1(%rax),%rsi
  406a5e:	e8 bd b7 ff ff       	call   402220 <_ZdlPvm@plt>
	  if (__value < (unsigned)__base) return __n;
  406a63:	83 fb 09             	cmp    $0x9,%ebx
  406a66:	0f 86 1e 07 00 00    	jbe    40718a <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x87a>
	  if (__value < __b2) return __n + 1;
  406a6c:	83 fb 63             	cmp    $0x63,%ebx
  406a6f:	0f 86 33 07 00 00    	jbe    4071a8 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x898>
	  if (__value < __b3) return __n + 2;
  406a75:	81 fb e7 03 00 00    	cmp    $0x3e7,%ebx
  406a7b:	0f 86 3b 07 00 00    	jbe    4071bc <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x8ac>
	  if (__value < __b4) return __n + 3;
  406a81:	89 d9                	mov    %ebx,%ecx
  406a83:	48 89 ca             	mov    %rcx,%rdx
  406a86:	81 fb 0f 27 00 00    	cmp    $0x270f,%ebx
  406a8c:	0f 86 20 07 00 00    	jbe    4071b2 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x8a2>
	  __value /= __b4;
  406a92:	49 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%r8
  406a99:	c5 6d 34 
      unsigned __n = 1;
  406a9c:	be 01 00 00 00       	mov    $0x1,%esi
  406aa1:	eb 26                	jmp    406ac9 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x1b9>
  406aa3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	  if (__value < __b2) return __n + 1;
  406aa8:	83 fa 63             	cmp    $0x63,%edx
  406aab:	0f 86 ef 03 00 00    	jbe    406ea0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x590>
	  if (__value < __b3) return __n + 2;
  406ab1:	81 fa e7 03 00 00    	cmp    $0x3e7,%edx
  406ab7:	0f 86 8b 05 00 00    	jbe    407048 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x738>
	  if (__value < __b4) return __n + 3;
  406abd:	81 fa 0f 27 00 00    	cmp    $0x270f,%edx
  406ac3:	0f 86 87 05 00 00    	jbe    407050 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x740>
	  __value /= __b4;
  406ac9:	48 89 d0             	mov    %rdx,%rax
  406acc:	48 89 d7             	mov    %rdx,%rdi
  406acf:	49 f7 e0             	mul    %r8
  406ad2:	89 f0                	mov    %esi,%eax
	  __n += 4;
  406ad4:	83 c6 04             	add    $0x4,%esi
	  __value /= __b4;
  406ad7:	48 c1 ea 0b          	shr    $0xb,%rdx
	  if (__value < (unsigned)__base) return __n;
  406adb:	48 81 ff 9f 86 01 00 	cmp    $0x1869f,%rdi
  406ae2:	77 c4                	ja     406aa8 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x198>
      { _M_construct(__n, __c); }
  406ae4:	4c 89 ff             	mov    %r15,%rdi
  406ae7:	31 d2                	xor    %edx,%edx
  406ae9:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
	: allocator_type(__a), _M_p(__dat) { }
  406aee:	4c 89 74 24 20       	mov    %r14,0x20(%rsp)
      { _M_construct(__n, __c); }
  406af3:	e8 98 b7 ff ff       	call   402290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@plt>
      unsigned __pos = __len - 1;
  406af8:	8b 44 24 28          	mov    0x28(%rsp),%eax
      { return _M_dataplus._M_p; }
  406afc:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
  406b01:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
      unsigned __pos = __len - 1;
  406b06:	8d 70 ff             	lea    -0x1(%rax),%esi
      while (__val >= 100)
  406b09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	  auto const __num = (__val % 100) * 2;
  406b10:	48 69 d1 1f 85 eb 51 	imul   $0x51eb851f,%rcx,%rdx
  406b17:	89 d8                	mov    %ebx,%eax
  406b19:	48 c1 ea 25          	shr    $0x25,%rdx
  406b1d:	6b ca 64             	imul   $0x64,%edx,%ecx
  406b20:	29 c8                	sub    %ecx,%eax
  406b22:	89 d9                	mov    %ebx,%ecx
	  __val /= 100;
  406b24:	89 d3                	mov    %edx,%ebx
	  __first[__pos] = __digits[__num + 1];
  406b26:	89 f2                	mov    %esi,%edx
	  auto const __num = (__val % 100) * 2;
  406b28:	01 c0                	add    %eax,%eax
	  __first[__pos] = __digits[__num + 1];
  406b2a:	44 8d 40 01          	lea    0x1(%rax),%r8d
	  __first[__pos - 1] = __digits[__num];
  406b2e:	0f b6 80 e0 84 40 00 	movzbl 0x4084e0(%rax),%eax
	  __first[__pos] = __digits[__num + 1];
  406b35:	45 0f b6 80 e0 84 40 	movzbl 0x4084e0(%r8),%r8d
  406b3c:	00 
  406b3d:	44 88 04 17          	mov    %r8b,(%rdi,%rdx,1)
	  __first[__pos - 1] = __digits[__num];
  406b41:	8d 56 ff             	lea    -0x1(%rsi),%edx
	  __pos -= 2;
  406b44:	83 ee 02             	sub    $0x2,%esi
	  __first[__pos - 1] = __digits[__num];
  406b47:	88 04 17             	mov    %al,(%rdi,%rdx,1)
      while (__val >= 100)
  406b4a:	81 f9 0f 27 00 00    	cmp    $0x270f,%ecx
  406b50:	0f 86 72 01 00 00    	jbe    406cc8 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3b8>
  406b56:	89 d9                	mov    %ebx,%ecx
  406b58:	eb b6                	jmp    406b10 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x200>
  406b5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  406b60:	45 89 c6             	mov    %r8d,%r14d
  406b63:	44 89 c1             	mov    %r8d,%ecx
      unsigned __n = 1;
  406b66:	be 01 00 00 00       	mov    $0x1,%esi
	  __value /= __b4;
  406b6b:	48 bf 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%rdi
  406b72:	c5 6d 34 
  406b75:	eb 0b                	jmp    406b82 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x272>
  406b77:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  406b7e:	00 00 
  406b80:	89 d1                	mov    %edx,%ecx
	  if (__value < __b2) return __n + 1;
  406b82:	83 f9 63             	cmp    $0x63,%ecx
  406b85:	0f 86 55 05 00 00    	jbe    4070e0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7d0>
	  if (__value < __b3) return __n + 2;
  406b8b:	81 f9 e7 03 00 00    	cmp    $0x3e7,%ecx
  406b91:	0f 86 59 05 00 00    	jbe    4070f0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7e0>
	  if (__value < __b4) return __n + 3;
  406b97:	89 ca                	mov    %ecx,%edx
  406b99:	81 f9 0f 27 00 00    	cmp    $0x270f,%ecx
  406b9f:	0f 86 5b 05 00 00    	jbe    407100 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7f0>
	  __value /= __b4;
  406ba5:	48 89 d0             	mov    %rdx,%rax
	  __n += 4;
  406ba8:	83 c6 04             	add    $0x4,%esi
	  __value /= __b4;
  406bab:	48 f7 e7             	mul    %rdi
  406bae:	48 c1 ea 0b          	shr    $0xb,%rdx
	  if (__value < (unsigned)__base) return __n;
  406bb2:	81 f9 9f 86 01 00    	cmp    $0x1869f,%ecx
  406bb8:	77 c6                	ja     406b80 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x270>
	: allocator_type(__a), _M_p(__dat) { }
  406bba:	48 8d 6c 24 50       	lea    0x50(%rsp),%rbp
      { _M_construct(__n, __c); }
  406bbf:	31 d2                	xor    %edx,%edx
  406bc1:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  406bc6:	44 89 44 24 08       	mov    %r8d,0x8(%rsp)
	: allocator_type(__a), _M_p(__dat) { }
  406bcb:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
      { _M_construct(__n, __c); }
  406bd0:	e8 bb b6 ff ff       	call   402290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@plt>
      unsigned __pos = __len - 1;
  406bd5:	8b 44 24 48          	mov    0x48(%rsp),%eax
      while (__val >= 100)
  406bd9:	44 8b 44 24 08       	mov    0x8(%rsp),%r8d
      { return _M_dataplus._M_p; }
  406bde:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
      unsigned __pos = __len - 1;
  406be3:	8d 70 ff             	lea    -0x1(%rax),%esi
      while (__val >= 100)
  406be6:	41 83 f8 63          	cmp    $0x63,%r8d
  406bea:	0f 86 f0 03 00 00    	jbe    406fe0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x6d0>
	  auto const __num = (__val % 100) * 2;
  406bf0:	44 89 f2             	mov    %r14d,%edx
  406bf3:	44 89 f0             	mov    %r14d,%eax
  406bf6:	48 69 d2 1f 85 eb 51 	imul   $0x51eb851f,%rdx,%rdx
  406bfd:	48 c1 ea 25          	shr    $0x25,%rdx
  406c01:	6b fa 64             	imul   $0x64,%edx,%edi
  406c04:	29 f8                	sub    %edi,%eax
  406c06:	44 89 f7             	mov    %r14d,%edi
	  __val /= 100;
  406c09:	41 89 d6             	mov    %edx,%r14d
	  __first[__pos] = __digits[__num + 1];
  406c0c:	89 f2                	mov    %esi,%edx
	  auto const __num = (__val % 100) * 2;
  406c0e:	01 c0                	add    %eax,%eax
	  __first[__pos] = __digits[__num + 1];
  406c10:	44 8d 40 01          	lea    0x1(%rax),%r8d
	  __first[__pos - 1] = __digits[__num];
  406c14:	0f b6 80 e0 84 40 00 	movzbl 0x4084e0(%rax),%eax
	  __first[__pos] = __digits[__num + 1];
  406c1b:	45 0f b6 80 e0 84 40 	movzbl 0x4084e0(%r8),%r8d
  406c22:	00 
  406c23:	44 88 04 11          	mov    %r8b,(%rcx,%rdx,1)
	  __first[__pos - 1] = __digits[__num];
  406c27:	8d 56 ff             	lea    -0x1(%rsi),%edx
	  __pos -= 2;
  406c2a:	83 ee 02             	sub    $0x2,%esi
	  __first[__pos - 1] = __digits[__num];
  406c2d:	88 04 11             	mov    %al,(%rcx,%rdx,1)
      while (__val >= 100)
  406c30:	81 ff 0f 27 00 00    	cmp    $0x270f,%edi
  406c36:	77 b8                	ja     406bf0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x2e0>
	__first[0] = '0' + __val;
  406c38:	41 8d 46 30          	lea    0x30(%r14),%eax
      if (__val >= 10)
  406c3c:	81 ff e7 03 00 00    	cmp    $0x3e7,%edi
  406c42:	0f 87 98 03 00 00    	ja     406fe0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x6d0>
  406c48:	88 01                	mov    %al,(%rcx)
  406c4a:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  406c4f:	49 8b 7d 00          	mov    0x0(%r13),%rdi
	if (__str._M_is_local())
  406c53:	48 39 e8             	cmp    %rbp,%rax
  406c56:	0f 84 b1 03 00 00    	je     40700d <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x6fd>
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  406c5c:	49 8d 55 10          	lea    0x10(%r13),%rdx
      { return _M_string_length; }
  406c60:	f3 0f 6f 44 24 48    	movdqu 0x48(%rsp),%xmm0
	    if (!_M_is_local())
  406c66:	48 39 d7             	cmp    %rdx,%rdi
  406c69:	0f 84 c1 04 00 00    	je     407130 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x820>
		    __capacity = _M_allocated_capacity;
  406c6f:	49 8b 55 10          	mov    0x10(%r13),%rdx
      { _M_dataplus._M_p = __p; }
  406c73:	49 89 45 00          	mov    %rax,0x0(%r13)
      { _M_string_length = __length; }
  406c77:	41 0f 11 45 08       	movups %xmm0,0x8(%r13)
	    if (__data)
  406c7c:	48 85 ff             	test   %rdi,%rdi
  406c7f:	0f 84 b4 04 00 00    	je     407139 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x829>
      { _M_dataplus._M_p = __p; }
  406c85:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
      { _M_allocated_capacity = __capacity; }
  406c8a:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
      { _M_string_length = __length; }
  406c8f:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  406c96:	00 00 
  406c98:	c6 07 00             	movb   $0x0,(%rdi)
      { return _M_dataplus._M_p; }
  406c9b:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
	if (!_M_is_local())
  406ca0:	48 39 ef             	cmp    %rbp,%rdi
  406ca3:	74 0e                	je     406cb3 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3a3>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  406ca5:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  406caa:	48 8d 70 01          	lea    0x1(%rax),%rsi
  406cae:	e8 6d b5 ff ff       	call   402220 <_ZdlPvm@plt>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  406cb3:	4c 8d 7c 24 20       	lea    0x20(%rsp),%r15
  406cb8:	4c 8d 74 24 30       	lea    0x30(%rsp),%r14
  406cbd:	e9 a1 fd ff ff       	jmp    406a63 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x153>
  406cc2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  406cc8:	81 f9 e7 03 00 00    	cmp    $0x3e7,%ecx
  406cce:	0f 87 ec 01 00 00    	ja     406ec0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x5b0>
	__first[0] = '0' + __val;
  406cd4:	83 c3 30             	add    $0x30,%ebx
  406cd7:	88 1f                	mov    %bl,(%rdi)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
  406cd9:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  406cdf:	b9 5f 80 40 00       	mov    $0x40805f,%ecx
  406ce4:	31 d2                	xor    %edx,%edx
  406ce6:	31 f6                	xor    %esi,%esi
  406ce8:	4c 89 ff             	mov    %r15,%rdi
  406ceb:	e8 a0 b6 ff ff       	call   402390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  406cf0:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
      { return _M_dataplus._M_p; }
  406cf5:	48 8b 08             	mov    (%rax),%rcx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  406cf8:	48 8d 50 10          	lea    0x10(%rax),%rdx
	if (__str._M_is_local())
  406cfc:	48 39 d1             	cmp    %rdx,%rcx
  406cff:	0f 84 8b 02 00 00    	je     406f90 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x680>
      { _M_dataplus._M_p = __p; }
  406d05:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
	    _M_capacity(__str._M_allocated_capacity);
  406d0a:	48 8b 48 10          	mov    0x10(%rax),%rcx
      { _M_allocated_capacity = __capacity; }
  406d0e:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
      { return _M_string_length; }
  406d13:	48 8b 48 08          	mov    0x8(%rax),%rcx
      { _M_string_length = __length; }
  406d17:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
      { _M_dataplus._M_p = __p; }
  406d1c:	48 89 10             	mov    %rdx,(%rax)
  406d1f:	c6 40 10 00          	movb   $0x0,0x10(%rax)
      { return _M_dataplus._M_p; }
  406d23:	49 8b 3c 24          	mov    (%r12),%rdi
      { _M_string_length = __length; }
  406d27:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  406d2e:	00 
      { return _M_dataplus._M_p; }
  406d2f:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
	if (__str._M_is_local())
  406d34:	48 39 e8             	cmp    %rbp,%rax
  406d37:	0f 84 63 02 00 00    	je     406fa0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x690>
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  406d3d:	49 8d 54 24 10       	lea    0x10(%r12),%rdx
      { return _M_string_length; }
  406d42:	f3 0f 6f 44 24 48    	movdqu 0x48(%rsp),%xmm0
	    if (!_M_is_local())
  406d48:	48 39 d7             	cmp    %rdx,%rdi
  406d4b:	0f 84 0f 03 00 00    	je     407060 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x750>
		    __capacity = _M_allocated_capacity;
  406d51:	49 8b 54 24 10       	mov    0x10(%r12),%rdx
      { _M_dataplus._M_p = __p; }
  406d56:	49 89 04 24          	mov    %rax,(%r12)
      { _M_string_length = __length; }
  406d5a:	41 0f 11 44 24 08    	movups %xmm0,0x8(%r12)
	    if (__data)
  406d60:	48 85 ff             	test   %rdi,%rdi
  406d63:	0f 84 01 03 00 00    	je     40706a <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x75a>
      { _M_dataplus._M_p = __p; }
  406d69:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
      { _M_allocated_capacity = __capacity; }
  406d6e:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
      { _M_string_length = __length; }
  406d73:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  406d7a:	00 00 
  406d7c:	c6 07 00             	movb   $0x0,(%rdi)
      { return _M_dataplus._M_p; }
  406d7f:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
	if (!_M_is_local())
  406d84:	48 39 ef             	cmp    %rbp,%rdi
  406d87:	74 0e                	je     406d97 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x487>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  406d89:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  406d8e:	48 8d 70 01          	lea    0x1(%rax),%rsi
	::operator delete(__p
  406d92:	e8 89 b4 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  406d97:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  406d9c:	4c 39 f7             	cmp    %r14,%rdi
  406d9f:	74 0e                	je     406daf <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x49f>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  406da1:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  406da6:	48 8d 70 01          	lea    0x1(%rax),%rsi
  406daa:	e8 71 b4 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  406daf:	49 8b 1c 24          	mov    (%r12),%rbx
      { return _M_string_length; }
  406db3:	4d 8b 64 24 08       	mov    0x8(%r12),%r12
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  406db8:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
  406dbd:	48 89 d8             	mov    %rbx,%rax
  406dc0:	4c 01 e0             	add    %r12,%rax
  406dc3:	74 09                	je     406dce <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x4be>
  406dc5:	48 85 db             	test   %rbx,%rbx
  406dc8:	0f 84 fa 03 00 00    	je     4071c8 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x8b8>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
  406dce:	4c 89 64 24 20       	mov    %r12,0x20(%rsp)
	if (__dnew > size_type(_S_local_capacity))
  406dd3:	49 83 fc 0f          	cmp    $0xf,%r12
  406dd7:	0f 87 33 01 00 00    	ja     406f10 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x600>
	if (__n == 1)
  406ddd:	49 83 fc 01          	cmp    $0x1,%r12
  406de1:	0f 85 f9 00 00 00    	jne    406ee0 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x5d0>
  406de7:	0f b6 03             	movzbl (%rbx),%eax
  406dea:	88 44 24 50          	mov    %al,0x50(%rsp)
  406dee:	48 89 e8             	mov    %rbp,%rax
      { _M_string_length = __length; }
  406df1:	4c 89 64 24 48       	mov    %r12,0x48(%rsp)
  406df6:	42 c6 04 20 00       	movb   $0x0,(%rax,%r12,1)
      { return _M_dataplus._M_p; }
  406dfb:	4d 8b 65 00          	mov    0x0(%r13),%r12
      { return _M_string_length; }
  406dff:	4d 8b 6d 08          	mov    0x8(%r13),%r13
	: allocator_type(std::move(__a)), _M_p(__dat) { }
  406e03:	4c 89 74 24 20       	mov    %r14,0x20(%rsp)
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
  406e08:	4c 89 e0             	mov    %r12,%rax
  406e0b:	4c 01 e8             	add    %r13,%rax
  406e0e:	74 09                	je     406e19 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x509>
  406e10:	4d 85 e4             	test   %r12,%r12
  406e13:	0f 84 b9 03 00 00    	je     4071d2 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x8c2>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
  406e19:	4c 89 6c 24 18       	mov    %r13,0x18(%rsp)
	if (__dnew > size_type(_S_local_capacity))
  406e1e:	49 83 fd 0f          	cmp    $0xf,%r13
  406e22:	0f 87 28 01 00 00    	ja     406f50 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x640>
	if (__n == 1)
  406e28:	49 83 fd 01          	cmp    $0x1,%r13
  406e2c:	0f 85 c6 00 00 00    	jne    406ef8 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x5e8>
  406e32:	41 0f b6 04 24       	movzbl (%r12),%eax
  406e37:	88 44 24 30          	mov    %al,0x30(%rsp)
  406e3b:	4c 89 f0             	mov    %r14,%rax
      { _M_string_length = __length; }
  406e3e:	4c 89 6c 24 28       	mov    %r13,0x28(%rsp)
	string_to_display(fd, sec_string, min_string);
  406e43:	8b 7c 24 04          	mov    0x4(%rsp),%edi
  406e47:	48 8d 54 24 40       	lea    0x40(%rsp),%rdx
  406e4c:	4c 89 fe             	mov    %r15,%rsi
  406e4f:	42 c6 04 28 00       	movb   $0x0,(%rax,%r13,1)
  406e54:	e8 a7 f8 ff ff       	call   406700 <_Z17string_to_displayiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_>
      { return _M_dataplus._M_p; }
  406e59:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
	if (!_M_is_local())
  406e5e:	4c 39 f7             	cmp    %r14,%rdi
  406e61:	74 0e                	je     406e71 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x561>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  406e63:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  406e68:	48 8d 70 01          	lea    0x1(%rax),%rsi
  406e6c:	e8 af b3 ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  406e71:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
	if (!_M_is_local())
  406e76:	48 39 ef             	cmp    %rbp,%rdi
  406e79:	74 0e                	je     406e89 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x579>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  406e7b:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  406e80:	48 8d 70 01          	lea    0x1(%rax),%rsi
  406e84:	e8 97 b3 ff ff       	call   402220 <_ZdlPvm@plt>
}
  406e89:	48 83 c4 68          	add    $0x68,%rsp
  406e8d:	5b                   	pop    %rbx
  406e8e:	5d                   	pop    %rbp
  406e8f:	41 5c                	pop    %r12
  406e91:	41 5d                	pop    %r13
  406e93:	41 5e                	pop    %r14
  406e95:	41 5f                	pop    %r15
  406e97:	c3                   	ret    
  406e98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  406e9f:	00 
  }

  inline string
  to_string(unsigned __val)
  {
    string __str(__detail::__to_chars_len(__val), '\0');
  406ea0:	8d 70 05             	lea    0x5(%rax),%esi
      { _M_construct(__n, __c); }
  406ea3:	4c 89 ff             	mov    %r15,%rdi
  406ea6:	31 d2                	xor    %edx,%edx
	: allocator_type(__a), _M_p(__dat) { }
  406ea8:	4c 89 74 24 20       	mov    %r14,0x20(%rsp)
      { _M_construct(__n, __c); }
  406ead:	e8 de b3 ff ff       	call   402290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@plt>
      { return _M_dataplus._M_p; }
  406eb2:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
      while (__val >= 100)
  406eb7:	83 fb 63             	cmp    $0x63,%ebx
  406eba:	0f 87 c0 01 00 00    	ja     407080 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x770>
	  auto const __num = __val * 2;
  406ec0:	01 db                	add    %ebx,%ebx
	  __first[1] = __digits[__num + 1];
  406ec2:	8d 43 01             	lea    0x1(%rbx),%eax
	  __first[0] = __digits[__num];
  406ec5:	0f b6 9b e0 84 40 00 	movzbl 0x4084e0(%rbx),%ebx
	  __first[1] = __digits[__num + 1];
  406ecc:	0f b6 80 e0 84 40 00 	movzbl 0x4084e0(%rax),%eax
  406ed3:	88 47 01             	mov    %al,0x1(%rdi)
  406ed6:	e9 fc fd ff ff       	jmp    406cd7 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3c7>
  406edb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	if (__n == 0)
  406ee0:	4d 85 e4             	test   %r12,%r12
  406ee3:	0f 85 fb 02 00 00    	jne    4071e4 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x8d4>
  406ee9:	48 89 e8             	mov    %rbp,%rax
  406eec:	e9 00 ff ff ff       	jmp    406df1 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x4e1>
  406ef1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  406ef8:	4d 85 ed             	test   %r13,%r13
  406efb:	0f 85 db 02 00 00    	jne    4071dc <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x8cc>
  406f01:	4c 89 f0             	mov    %r14,%rax
  406f04:	e9 35 ff ff ff       	jmp    406e3e <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x52e>
  406f09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	    _M_data(_M_create(__dnew, size_type(0)));
  406f10:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  406f15:	31 d2                	xor    %edx,%edx
  406f17:	4c 89 fe             	mov    %r15,%rsi
  406f1a:	e8 61 b5 ff ff       	call   402480 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
  406f1f:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  406f24:	48 89 c7             	mov    %rax,%rdi
      { _M_allocated_capacity = __capacity; }
  406f27:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  406f2c:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
  406f31:	4c 89 e2             	mov    %r12,%rdx
  406f34:	48 89 de             	mov    %rbx,%rsi
  406f37:	e8 94 b2 ff ff       	call   4021d0 <memcpy@plt>
	_M_set_length(__dnew);
  406f3c:	4c 8b 64 24 20       	mov    0x20(%rsp),%r12
      { return _M_dataplus._M_p; }
  406f41:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  406f46:	e9 a6 fe ff ff       	jmp    406df1 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x4e1>
  406f4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	    _M_data(_M_create(__dnew, size_type(0)));
  406f50:	31 d2                	xor    %edx,%edx
  406f52:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  406f57:	4c 89 ff             	mov    %r15,%rdi
  406f5a:	e8 21 b5 ff ff       	call   402480 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
  406f5f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  406f64:	48 89 c7             	mov    %rax,%rdi
      { _M_allocated_capacity = __capacity; }
  406f67:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  406f6c:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  406f71:	4c 89 ea             	mov    %r13,%rdx
  406f74:	4c 89 e6             	mov    %r12,%rsi
  406f77:	e8 54 b2 ff ff       	call   4021d0 <memcpy@plt>
	_M_set_length(__dnew);
  406f7c:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
      { return _M_dataplus._M_p; }
  406f81:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  406f86:	e9 b3 fe ff ff       	jmp    406e3e <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x52e>
  406f8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  406f90:	f3 0f 6f 48 10       	movdqu 0x10(%rax),%xmm1
  406f95:	0f 29 4c 24 50       	movaps %xmm1,0x50(%rsp)
  406f9a:	e9 74 fd ff ff       	jmp    406d13 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x403>
  406f9f:	90                   	nop
      { return _M_string_length; }
  406fa0:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
		if (__str.size())
  406fa5:	48 85 d2             	test   %rdx,%rdx
  406fa8:	74 1b                	je     406fc5 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x6b5>
	if (__n == 1)
  406faa:	48 83 fa 01          	cmp    $0x1,%rdx
  406fae:	0f 84 c1 01 00 00    	je     407175 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x865>
  406fb4:	48 89 ee             	mov    %rbp,%rsi
  406fb7:	e8 14 b2 ff ff       	call   4021d0 <memcpy@plt>
      { return _M_string_length; }
  406fbc:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
      { return _M_dataplus._M_p; }
  406fc1:	49 8b 3c 24          	mov    (%r12),%rdi
      { _M_string_length = __length; }
  406fc5:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
      { __c1 = __c2; }
  406fca:	c6 04 17 00          	movb   $0x0,(%rdi,%rdx,1)
      { return _M_dataplus._M_p; }
  406fce:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
      }
  406fd3:	e9 9b fd ff ff       	jmp    406d73 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x463>
  406fd8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  406fdf:	00 
	  auto const __num = __val * 2;
  406fe0:	45 01 f6             	add    %r14d,%r14d
	  __first[1] = __digits[__num + 1];
  406fe3:	41 8d 46 01          	lea    0x1(%r14),%eax
  406fe7:	0f b6 80 e0 84 40 00 	movzbl 0x4084e0(%rax),%eax
  406fee:	88 41 01             	mov    %al,0x1(%rcx)
	  __first[0] = __digits[__num];
  406ff1:	41 0f b6 86 e0 84 40 	movzbl 0x4084e0(%r14),%eax
  406ff8:	00 
  406ff9:	88 01                	mov    %al,(%rcx)
      { return _M_dataplus._M_p; }
  406ffb:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  407000:	49 8b 7d 00          	mov    0x0(%r13),%rdi
	if (__str._M_is_local())
  407004:	48 39 e8             	cmp    %rbp,%rax
  407007:	0f 85 4f fc ff ff    	jne    406c5c <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x34c>
      { return _M_string_length; }
  40700d:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
		if (__str.size())
  407012:	48 85 d2             	test   %rdx,%rdx
  407015:	74 1b                	je     407032 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x722>
	if (__n == 1)
  407017:	48 83 fa 01          	cmp    $0x1,%rdx
  40701b:	0f 84 3f 01 00 00    	je     407160 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x850>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
  407021:	48 89 ee             	mov    %rbp,%rsi
  407024:	e8 a7 b1 ff ff       	call   4021d0 <memcpy@plt>
      { return _M_string_length; }
  407029:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
      { return _M_dataplus._M_p; }
  40702e:	49 8b 7d 00          	mov    0x0(%r13),%rdi
      { _M_string_length = __length; }
  407032:	49 89 55 08          	mov    %rdx,0x8(%r13)
      { __c1 = __c2; }
  407036:	c6 04 17 00          	movb   $0x0,(%rdi,%rdx,1)
      { return _M_dataplus._M_p; }
  40703a:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
      }
  40703f:	e9 4b fc ff ff       	jmp    406c8f <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x37f>
  407044:	0f 1f 40 00          	nopl   0x0(%rax)
    string __str(__detail::__to_chars_len(__val), '\0');
  407048:	8d 70 06             	lea    0x6(%rax),%esi
  40704b:	e9 94 fa ff ff       	jmp    406ae4 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x1d4>
  407050:	8d 70 07             	lea    0x7(%rax),%esi
  407053:	e9 8c fa ff ff       	jmp    406ae4 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x1d4>
  407058:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40705f:	00 
      { _M_dataplus._M_p = __p; }
  407060:	49 89 04 24          	mov    %rax,(%r12)
      { _M_string_length = __length; }
  407064:	41 0f 11 44 24 08    	movups %xmm0,0x8(%r12)
      { _M_dataplus._M_p = __p; }
  40706a:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
  40706f:	48 8d 6c 24 50       	lea    0x50(%rsp),%rbp
  407074:	48 89 ef             	mov    %rbp,%rdi
  407077:	e9 f7 fc ff ff       	jmp    406d73 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x463>
  40707c:	0f 1f 40 00          	nopl   0x0(%rax)
      unsigned __pos = __len - 1;
  407080:	8b 44 24 28          	mov    0x28(%rsp),%eax
  407084:	89 d9                	mov    %ebx,%ecx
  407086:	8d 70 ff             	lea    -0x1(%rax),%esi
  407089:	e9 82 fa ff ff       	jmp    406b10 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x200>
  40708e:	66 90                	xchg   %ax,%ax
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
  407090:	f3 0f 6f 50 10       	movdqu 0x10(%rax),%xmm2
  407095:	0f 29 54 24 50       	movaps %xmm2,0x50(%rsp)
  40709a:	e9 2b f9 ff ff       	jmp    4069ca <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0xba>
  40709f:	90                   	nop
      { return _M_string_length; }
  4070a0:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
		if (__str.size())
  4070a5:	48 85 d2             	test   %rdx,%rdx
  4070a8:	74 1b                	je     4070c5 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7b5>
	if (__n == 1)
  4070aa:	48 83 fa 01          	cmp    $0x1,%rdx
  4070ae:	0f 84 97 00 00 00    	je     40714b <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x83b>
  4070b4:	48 89 ee             	mov    %rbp,%rsi
  4070b7:	e8 14 b1 ff ff       	call   4021d0 <memcpy@plt>
      { return _M_string_length; }
  4070bc:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
      { return _M_dataplus._M_p; }
  4070c1:	49 8b 7d 00          	mov    0x0(%r13),%rdi
      { _M_string_length = __length; }
  4070c5:	49 89 55 08          	mov    %rdx,0x8(%r13)
      { __c1 = __c2; }
  4070c9:	c6 04 17 00          	movb   $0x0,(%rdi,%rdx,1)
      { return _M_dataplus._M_p; }
  4070cd:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
      }
  4070d2:	e9 50 f9 ff ff       	jmp    406a27 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x117>
  4070d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4070de:	00 00 
	  if (__value < __b2) return __n + 1;
  4070e0:	83 c6 01             	add    $0x1,%esi
  4070e3:	e9 d2 fa ff ff       	jmp    406bba <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x2aa>
  4070e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4070ef:	00 
	  if (__value < __b3) return __n + 2;
  4070f0:	83 c6 02             	add    $0x2,%esi
  4070f3:	e9 c2 fa ff ff       	jmp    406bba <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x2aa>
  4070f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4070ff:	00 
	  if (__value < __b4) return __n + 3;
  407100:	83 c6 03             	add    $0x3,%esi
  407103:	e9 b2 fa ff ff       	jmp    406bba <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x2aa>
  407108:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40710f:	00 
      { _M_dataplus._M_p = __p; }
  407110:	49 89 45 00          	mov    %rax,0x0(%r13)
      { _M_string_length = __length; }
  407114:	41 0f 11 45 08       	movups %xmm0,0x8(%r13)
      { _M_dataplus._M_p = __p; }
  407119:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
  40711e:	48 8d 6c 24 50       	lea    0x50(%rsp),%rbp
  407123:	48 89 ef             	mov    %rbp,%rdi
  407126:	e9 fc f8 ff ff       	jmp    406a27 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x117>
  40712b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  407130:	49 89 45 00          	mov    %rax,0x0(%r13)
      { _M_string_length = __length; }
  407134:	41 0f 11 45 08       	movups %xmm0,0x8(%r13)
      { _M_dataplus._M_p = __p; }
  407139:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
  40713e:	48 8d 6c 24 50       	lea    0x50(%rsp),%rbp
  407143:	48 89 ef             	mov    %rbp,%rdi
  407146:	e9 44 fb ff ff       	jmp    406c8f <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x37f>
  40714b:	0f b6 44 24 50       	movzbl 0x50(%rsp),%eax
  407150:	88 07                	mov    %al,(%rdi)
      { return _M_string_length; }
  407152:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
      { return _M_dataplus._M_p; }
  407157:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  40715b:	e9 65 ff ff ff       	jmp    4070c5 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x7b5>
  407160:	0f b6 44 24 50       	movzbl 0x50(%rsp),%eax
  407165:	88 07                	mov    %al,(%rdi)
      { return _M_string_length; }
  407167:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
      { return _M_dataplus._M_p; }
  40716c:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  407170:	e9 bd fe ff ff       	jmp    407032 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x722>
  407175:	0f b6 44 24 50       	movzbl 0x50(%rsp),%eax
  40717a:	88 07                	mov    %al,(%rdi)
      { return _M_string_length; }
  40717c:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
      { return _M_dataplus._M_p; }
  407181:	49 8b 3c 24          	mov    (%r12),%rdi
  407185:	e9 3b fe ff ff       	jmp    406fc5 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x6b5>
      { _M_construct(__n, __c); }
  40718a:	4c 89 ff             	mov    %r15,%rdi
  40718d:	31 d2                	xor    %edx,%edx
  40718f:	be 01 00 00 00       	mov    $0x1,%esi
	: allocator_type(__a), _M_p(__dat) { }
  407194:	4c 89 74 24 20       	mov    %r14,0x20(%rsp)
      { _M_construct(__n, __c); }
  407199:	e8 f2 b0 ff ff       	call   402290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@plt>
      { return _M_dataplus._M_p; }
  40719e:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
      while (__val >= 100)
  4071a3:	e9 2c fb ff ff       	jmp    406cd4 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3c4>
	  if (__value < __b2) return __n + 1;
  4071a8:	be 02 00 00 00       	mov    $0x2,%esi
  4071ad:	e9 f1 fc ff ff       	jmp    406ea3 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x593>
	  if (__value < __b4) return __n + 3;
  4071b2:	be 04 00 00 00       	mov    $0x4,%esi
  4071b7:	e9 28 f9 ff ff       	jmp    406ae4 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x1d4>
	  if (__value < __b3) return __n + 2;
  4071bc:	be 03 00 00 00       	mov    $0x3,%esi
  4071c1:	89 d9                	mov    %ebx,%ecx
  4071c3:	e9 1c f9 ff ff       	jmp    406ae4 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x1d4>
	  std::__throw_logic_error(__N("basic_string::"
  4071c8:	bf 78 81 40 00       	mov    $0x408178,%edi
  4071cd:	e8 9e af ff ff       	call   402170 <_ZSt19__throw_logic_errorPKc@plt>
  4071d2:	bf 78 81 40 00       	mov    $0x408178,%edi
  4071d7:	e8 94 af ff ff       	call   402170 <_ZSt19__throw_logic_errorPKc@plt>
  4071dc:	4c 89 f7             	mov    %r14,%rdi
  4071df:	e9 8d fd ff ff       	jmp    406f71 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x661>
  4071e4:	48 89 ef             	mov    %rbp,%rdi
  4071e7:	e9 45 fd ff ff       	jmp    406f31 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x621>
  4071ec:	49 89 c4             	mov    %rax,%r12
  4071ef:	e9 ad b3 ff ff       	jmp    4025a1 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_.cold+0x18>
  4071f4:	49 89 c4             	mov    %rax,%r12
  4071f7:	e9 8d b3 ff ff       	jmp    402589 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_.cold>
  4071fc:	48 89 c5             	mov    %rax,%rbp
  4071ff:	e9 bd b3 ff ff       	jmp    4025c1 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_.cold+0x38>
  407204:	48 89 c5             	mov    %rax,%rbp
  407207:	e9 b5 b3 ff ff       	jmp    4025c1 <_Z13int_to_stringiiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_.cold+0x38>
  40720c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000407210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
  407210:	41 55                	push   %r13
  407212:	41 54                	push   %r12
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  407214:	4c 8d 67 10          	lea    0x10(%rdi),%r12
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
  407218:	55                   	push   %rbp
  407219:	53                   	push   %rbx
  40721a:	48 83 ec 18          	sub    $0x18,%rsp
	: allocator_type(__a), _M_p(__dat) { }
  40721e:	4c 89 27             	mov    %r12,(%rdi)
	const _CharT* __end = __s ? __s + traits_type::length(__s)
  407221:	48 85 f6             	test   %rsi,%rsi
  407224:	0f 84 8c 00 00 00    	je     4072b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0xa6>
  40722a:	48 89 fb             	mov    %rdi,%rbx
	return __builtin_strlen(__s);
  40722d:	48 89 f7             	mov    %rsi,%rdi
  407230:	48 89 f5             	mov    %rsi,%rbp
  407233:	e8 d8 ae ff ff       	call   402110 <strlen@plt>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
  407238:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  40723d:	49 89 c5             	mov    %rax,%r13
	if (__dnew > size_type(_S_local_capacity))
  407240:	48 83 f8 0f          	cmp    $0xf,%rax
  407244:	77 3a                	ja     407280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x70>
	if (__n == 1)
  407246:	48 83 f8 01          	cmp    $0x1,%rax
  40724a:	75 24                	jne    407270 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x60>
      { __c1 = __c2; }
  40724c:	0f b6 55 00          	movzbl 0x0(%rbp),%edx
  407250:	88 53 10             	mov    %dl,0x10(%rbx)
      { _M_string_length = __length; }
  407253:	48 89 43 08          	mov    %rax,0x8(%rbx)
  407257:	41 c6 04 04 00       	movb   $0x0,(%r12,%rax,1)
      }
  40725c:	48 83 c4 18          	add    $0x18,%rsp
  407260:	5b                   	pop    %rbx
  407261:	5d                   	pop    %rbp
  407262:	41 5c                	pop    %r12
  407264:	41 5d                	pop    %r13
  407266:	c3                   	ret    
  407267:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40726e:	00 00 
	if (__n == 0)
  407270:	48 85 c0             	test   %rax,%rax
  407273:	74 de                	je     407253 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x43>
  407275:	eb 27                	jmp    40729e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x8e>
  407277:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40727e:	00 00 
	    _M_data(_M_create(__dnew, size_type(0)));
  407280:	31 d2                	xor    %edx,%edx
  407282:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  407287:	48 89 df             	mov    %rbx,%rdi
  40728a:	e8 f1 b1 ff ff       	call   402480 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>
      { _M_dataplus._M_p = __p; }
  40728f:	48 89 03             	mov    %rax,(%rbx)
  407292:	49 89 c4             	mov    %rax,%r12
      { _M_allocated_capacity = __capacity; }
  407295:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40729a:	48 89 43 10          	mov    %rax,0x10(%rbx)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
  40729e:	4c 89 e7             	mov    %r12,%rdi
  4072a1:	4c 89 ea             	mov    %r13,%rdx
  4072a4:	48 89 ee             	mov    %rbp,%rsi
  4072a7:	e8 24 af ff ff       	call   4021d0 <memcpy@plt>
	_M_set_length(__dnew);
  4072ac:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
      { return _M_dataplus._M_p; }
  4072b1:	4c 8b 23             	mov    (%rbx),%r12
  4072b4:	eb 9d                	jmp    407253 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x43>
	  std::__throw_logic_error(__N("basic_string::"
  4072b6:	bf 78 81 40 00       	mov    $0x408178,%edi
  4072bb:	e8 b0 ae ff ff       	call   402170 <_ZSt19__throw_logic_errorPKc@plt>

00000000004072c0 <_ZN2sf4TextD1Ev>:
{
////////////////////////////////////////////////////////////
/// \brief Graphical text that can be drawn to a render target
///
////////////////////////////////////////////////////////////
class SFML_GRAPHICS_API Text : public Drawable, public Transformable
  4072c0:	b8 50 ad 40 00       	mov    $0x40ad50,%eax
  4072c5:	53                   	push   %rbx
  4072c6:	48 89 fb             	mov    %rdi,%rbx
{
////////////////////////////////////////////////////////////
/// \brief Define a set of one or more 2D primitives
///
////////////////////////////////////////////////////////////
class SFML_GRAPHICS_API VertexArray : public Drawable
  4072c9:	48 c7 87 28 01 00 00 	movq   $0x40ad98,0x128(%rdi)
  4072d0:	98 ad 40 00 
  4072d4:	66 48 0f 6e c0       	movq   %rax,%xmm0
  4072d9:	0f 16 05 d0 12 00 00 	movhps 0x12d0(%rip),%xmm0        # 4085b0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xd0>
  4072e0:	0f 11 07             	movups %xmm0,(%rdi)
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4072e3:	48 8b bf 30 01 00 00 	mov    0x130(%rdi),%rdi
	if (__p)
  4072ea:	48 85 ff             	test   %rdi,%rdi
  4072ed:	74 0f                	je     4072fe <_ZN2sf4TextD1Ev+0x3e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  4072ef:	48 8b b3 40 01 00 00 	mov    0x140(%rbx),%rsi
  4072f6:	48 29 fe             	sub    %rdi,%rsi
  4072f9:	e8 22 af ff ff       	call   402220 <_ZdlPvm@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4072fe:	48 8b bb 08 01 00 00 	mov    0x108(%rbx),%rdi
  407305:	48 c7 83 00 01 00 00 	movq   $0x40ad98,0x100(%rbx)
  40730c:	98 ad 40 00 
	if (__p)
  407310:	48 85 ff             	test   %rdi,%rdi
  407313:	74 0f                	je     407324 <_ZN2sf4TextD1Ev+0x64>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  407315:	48 8b b3 18 01 00 00 	mov    0x118(%rbx),%rsi
  40731c:	48 29 fe             	sub    %rdi,%rsi
  40731f:	e8 fc ae ff ff       	call   402220 <_ZdlPvm@plt>
  407324:	48 8b bb b8 00 00 00 	mov    0xb8(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  40732b:	48 8d 83 c8 00 00 00 	lea    0xc8(%rbx),%rax
	if (!_M_is_local())
  407332:	48 39 c7             	cmp    %rax,%rdi
  407335:	74 14                	je     40734b <_ZN2sf4TextD1Ev+0x8b>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  407337:	48 8b 83 c8 00 00 00 	mov    0xc8(%rbx),%rax
  40733e:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  407345:	00 
  407346:	e8 d5 ae ff ff       	call   402220 <_ZdlPvm@plt>
  40734b:	48 8d 7b 08          	lea    0x8(%rbx),%rdi
  40734f:	5b                   	pop    %rbx
  407350:	e9 cb ad ff ff       	jmp    402120 <_ZN2sf13TransformableD2Ev@plt>
  407355:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  40735c:	00 00 00 00 

0000000000407360 <_ZThn8_N2sf4TextD1Ev>:
  407360:	b8 50 ad 40 00       	mov    $0x40ad50,%eax
  407365:	55                   	push   %rbp
  407366:	48 89 fd             	mov    %rdi,%rbp
  407369:	48 c7 87 20 01 00 00 	movq   $0x40ad98,0x120(%rdi)
  407370:	98 ad 40 00 
  407374:	66 48 0f 6e c0       	movq   %rax,%xmm0
  407379:	0f 16 05 30 12 00 00 	movhps 0x1230(%rip),%xmm0        # 4085b0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xd0>
  407380:	0f 11 47 f8          	movups %xmm0,-0x8(%rdi)
  407384:	48 8b bf 28 01 00 00 	mov    0x128(%rdi),%rdi
  40738b:	48 85 ff             	test   %rdi,%rdi
  40738e:	74 0f                	je     40739f <_ZThn8_N2sf4TextD1Ev+0x3f>
  407390:	48 8b b5 38 01 00 00 	mov    0x138(%rbp),%rsi
  407397:	48 29 fe             	sub    %rdi,%rsi
  40739a:	e8 81 ae ff ff       	call   402220 <_ZdlPvm@plt>
  40739f:	48 8b bd 00 01 00 00 	mov    0x100(%rbp),%rdi
  4073a6:	48 c7 85 f8 00 00 00 	movq   $0x40ad98,0xf8(%rbp)
  4073ad:	98 ad 40 00 
  4073b1:	48 85 ff             	test   %rdi,%rdi
  4073b4:	74 0f                	je     4073c5 <_ZThn8_N2sf4TextD1Ev+0x65>
  4073b6:	48 8b b5 10 01 00 00 	mov    0x110(%rbp),%rsi
  4073bd:	48 29 fe             	sub    %rdi,%rsi
  4073c0:	e8 5b ae ff ff       	call   402220 <_ZdlPvm@plt>
  4073c5:	48 8b bd b0 00 00 00 	mov    0xb0(%rbp),%rdi
  4073cc:	48 8d 85 c0 00 00 00 	lea    0xc0(%rbp),%rax
  4073d3:	48 39 c7             	cmp    %rax,%rdi
  4073d6:	74 14                	je     4073ec <_ZThn8_N2sf4TextD1Ev+0x8c>
  4073d8:	48 8b 85 c0 00 00 00 	mov    0xc0(%rbp),%rax
  4073df:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  4073e6:	00 
  4073e7:	e8 34 ae ff ff       	call   402220 <_ZdlPvm@plt>
  4073ec:	48 89 ef             	mov    %rbp,%rdi
  4073ef:	5d                   	pop    %rbp
  4073f0:	e9 2b ad ff ff       	jmp    402120 <_ZN2sf13TransformableD2Ev@plt>
  4073f5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  4073fc:	00 00 00 
  4073ff:	90                   	nop

0000000000407400 <_ZN2sf4TextD0Ev>:
  407400:	b8 50 ad 40 00       	mov    $0x40ad50,%eax
  407405:	55                   	push   %rbp
  407406:	48 89 fd             	mov    %rdi,%rbp
  407409:	48 c7 87 28 01 00 00 	movq   $0x40ad98,0x128(%rdi)
  407410:	98 ad 40 00 
  407414:	66 48 0f 6e c0       	movq   %rax,%xmm0
  407419:	0f 16 05 90 11 00 00 	movhps 0x1190(%rip),%xmm0        # 4085b0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xd0>
  407420:	0f 11 07             	movups %xmm0,(%rdi)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  407423:	48 8b bf 30 01 00 00 	mov    0x130(%rdi),%rdi
	if (__p)
  40742a:	48 85 ff             	test   %rdi,%rdi
  40742d:	74 0f                	je     40743e <_ZN2sf4TextD0Ev+0x3e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  40742f:	48 8b b5 40 01 00 00 	mov    0x140(%rbp),%rsi
  407436:	48 29 fe             	sub    %rdi,%rsi
  407439:	e8 e2 ad ff ff       	call   402220 <_ZdlPvm@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  40743e:	48 8b bd 08 01 00 00 	mov    0x108(%rbp),%rdi
  407445:	48 c7 85 00 01 00 00 	movq   $0x40ad98,0x100(%rbp)
  40744c:	98 ad 40 00 
	if (__p)
  407450:	48 85 ff             	test   %rdi,%rdi
  407453:	74 0f                	je     407464 <_ZN2sf4TextD0Ev+0x64>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  407455:	48 8b b5 18 01 00 00 	mov    0x118(%rbp),%rsi
  40745c:	48 29 fe             	sub    %rdi,%rsi
  40745f:	e8 bc ad ff ff       	call   402220 <_ZdlPvm@plt>
      { return _M_dataplus._M_p; }
  407464:	48 8b bd b8 00 00 00 	mov    0xb8(%rbp),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  40746b:	48 8d 85 c8 00 00 00 	lea    0xc8(%rbp),%rax
	if (!_M_is_local())
  407472:	48 39 c7             	cmp    %rax,%rdi
  407475:	74 14                	je     40748b <_ZN2sf4TextD0Ev+0x8b>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
  407477:	48 8b 85 c8 00 00 00 	mov    0xc8(%rbp),%rax
  40747e:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  407485:	00 
  407486:	e8 95 ad ff ff       	call   402220 <_ZdlPvm@plt>
  40748b:	48 8d 7d 08          	lea    0x8(%rbp),%rdi
  40748f:	e8 8c ac ff ff       	call   402120 <_ZN2sf13TransformableD2Ev@plt>
  407494:	48 89 ef             	mov    %rbp,%rdi
  407497:	be 70 01 00 00       	mov    $0x170,%esi
  40749c:	5d                   	pop    %rbp
  40749d:	e9 7e ad ff ff       	jmp    402220 <_ZdlPvm@plt>
  4074a2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  4074a9:	00 00 00 00 
  4074ad:	0f 1f 00             	nopl   (%rax)

00000000004074b0 <_ZThn8_N2sf4TextD0Ev>:
  4074b0:	41 54                	push   %r12
  4074b2:	b8 50 ad 40 00       	mov    $0x40ad50,%eax
  4074b7:	4c 8d 67 f8          	lea    -0x8(%rdi),%r12
  4074bb:	55                   	push   %rbp
  4074bc:	66 48 0f 6e c0       	movq   %rax,%xmm0
  4074c1:	48 89 fd             	mov    %rdi,%rbp
  4074c4:	48 83 ec 08          	sub    $0x8,%rsp
  4074c8:	48 c7 87 20 01 00 00 	movq   $0x40ad98,0x120(%rdi)
  4074cf:	98 ad 40 00 
  4074d3:	0f 16 05 d6 10 00 00 	movhps 0x10d6(%rip),%xmm0        # 4085b0 <_ZZNSt8__detail18__to_chars_10_implIjEEvPcjT_E8__digits+0xd0>
  4074da:	0f 11 47 f8          	movups %xmm0,-0x8(%rdi)
  4074de:	48 8b bf 28 01 00 00 	mov    0x128(%rdi),%rdi
  4074e5:	48 85 ff             	test   %rdi,%rdi
  4074e8:	74 0f                	je     4074f9 <_ZThn8_N2sf4TextD0Ev+0x49>
  4074ea:	48 8b b5 38 01 00 00 	mov    0x138(%rbp),%rsi
  4074f1:	48 29 fe             	sub    %rdi,%rsi
  4074f4:	e8 27 ad ff ff       	call   402220 <_ZdlPvm@plt>
  4074f9:	48 8b bd 00 01 00 00 	mov    0x100(%rbp),%rdi
  407500:	48 c7 85 f8 00 00 00 	movq   $0x40ad98,0xf8(%rbp)
  407507:	98 ad 40 00 
  40750b:	48 85 ff             	test   %rdi,%rdi
  40750e:	74 0f                	je     40751f <_ZThn8_N2sf4TextD0Ev+0x6f>
  407510:	48 8b b5 10 01 00 00 	mov    0x110(%rbp),%rsi
  407517:	48 29 fe             	sub    %rdi,%rsi
  40751a:	e8 01 ad ff ff       	call   402220 <_ZdlPvm@plt>
  40751f:	48 8b bd b0 00 00 00 	mov    0xb0(%rbp),%rdi
  407526:	48 8d 85 c0 00 00 00 	lea    0xc0(%rbp),%rax
  40752d:	48 39 c7             	cmp    %rax,%rdi
  407530:	74 14                	je     407546 <_ZThn8_N2sf4TextD0Ev+0x96>
  407532:	48 8b 85 c0 00 00 00 	mov    0xc0(%rbp),%rax
  407539:	48 8d 34 85 04 00 00 	lea    0x4(,%rax,4),%rsi
  407540:	00 
  407541:	e8 da ac ff ff       	call   402220 <_ZdlPvm@plt>
  407546:	48 89 ef             	mov    %rbp,%rdi
  407549:	e8 d2 ab ff ff       	call   402120 <_ZN2sf13TransformableD2Ev@plt>
  40754e:	48 83 c4 08          	add    $0x8,%rsp
  407552:	4c 89 e7             	mov    %r12,%rdi
  407555:	be 70 01 00 00       	mov    $0x170,%esi
  40755a:	5d                   	pop    %rbp
  40755b:	41 5c                	pop    %r12
  40755d:	e9 be ac ff ff       	jmp    402220 <_ZdlPvm@plt>

Desmontagem da secção .fini:

0000000000407564 <_fini>:
  407564:	f3 0f 1e fa          	endbr64 
  407568:	48 83 ec 08          	sub    $0x8,%rsp
  40756c:	48 83 c4 08          	add    $0x8,%rsp
  407570:	c3                   	ret    
